
SD with mega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  0000377c  00003810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000377c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  008001b4  008001b4  000038c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000038c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00003934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e1b  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b59  00000000  00000000  00009aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000167b  00000000  00000000  0000a600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010d8  00000000  00000000  0000bc7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2e  00000000  00000000  0000cd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007e14  00000000  00000000  0000d782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00015596  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <FONT>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2e 7b 2a 12 23 13 08 64 62 36 49     ....$.{*.#..db6I
      88:	56 20 50 00 04 03 01 00 00 1c 22 41 00 00 41 22     V P......."A..A"
      98:	1c 00 22 14 7f 14 22 08 08 7f 08 08 40 30 10 00     .."...".....@0..
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 62 51 49 49 46 21     >QIE>.B.@.bQIIF!
      c8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
      d8:	49 49 31 01 71 09 05 03 36 49 49 49 36 46 49 49     II1.q...6III6FII
      e8:	29 1e 00 36 36 00 00 02 7c 42 42 00 08 14 22 41     )..66...|BB..."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 59 05 02     .......A"....Y..
     108:	3e 41 5d 55 5e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]U^|...|.III6>
     118:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     128:	09 09 01 3e 41 51 51 72 7f 08 08 08 7f 00 41 7f     ...>AQQr......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     168:	49 49 49 32 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     178:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     188:	04 03 61 51 49 45 43 7f 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 7f 04 02 7f 02 04 08 1c 2a 08 08      .AA.........*..
     1a8:	00 00 01 02 04 24 54 54 38 40 7f 28 44 44 38 38     .....$TT8@.(DD88
     1b8:	44 44 44 08 38 44 44 28 7f 38 54 54 54 08 08 7e     DDD.8DD(.8TTT..~
     1c8:	09 09 02 98 a4 a4 a4 78 7f 08 04 04 78 00 00 79     .......x....x..y
     1d8:	00 00 00 80 88 79 00 7f 10 28 44 40 00 41 7f 40     .....y...(D@.A.@
     1e8:	00 78 04 78 04 78 04 78 04 04 78 38 44 44 44 38     .x.x.x.x..x8DDD8
     1f8:	fc 24 24 24 18 18 24 24 24 fc 04 78 04 04 08 48     .$$$..$$$..x...H
     208:	54 54 54 24 04 3f 44 44 24 3c 40 40 3c 40 1c 20     TTT$.?DD$<@@<@. 
     218:	40 20 1c 3c 40 3c 40 3c 44 28 10 28 44 9c a0 a0     @ .<@<@<D(.(D...
     228:	90 7c 44 64 54 4c 44 08 36 41 00 00 00 00 77 00     .|DdTLD.6A....w.
     238:	00 00 00 41 36 08 08 04 08 10 08 55 2a 55 2a 55     ...A6......U*U*U

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	ec e7       	ldi	r30, 0x7C	; 124
     25c:	f7 e3       	ldi	r31, 0x37	; 55
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a4 3b       	cpi	r26, 0xB4	; 180
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	a4 eb       	ldi	r26, 0xB4	; 180
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	ab 3e       	cpi	r26, 0xEB	; 235
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <main>
     27e:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <disk_initialize>:
unsigned char disk_initialize(unsigned char drv)

{
	unsigned char state;

	if(drv)
     286:	81 11       	cpse	r24, r1
     288:	0c c0       	rjmp	.+24     	; 0x2a2 <disk_initialize+0x1c>
	{
		 return STA_NOINIT;  //仅支持磁盘0的操作
	}

	state = SD_Init();      //SD卡的初始化
     28a:	0e 94 a9 18 	call	0x3152	; 0x3152 <SD_Init>
	 
	 
	
	if(state == STA_NODISK)
     28e:	82 30       	cpi	r24, 0x02	; 2
     290:	51 f0       	breq	.+20     	; 0x2a6 <disk_initialize+0x20>
    {
        return STA_NODISK;
    }
    else if(state != 0)
     292:	88 23       	and	r24, r24
     294:	51 f0       	breq	.+20     	; 0x2aa <disk_initialize+0x24>
    {
	
		Serial_SendString("InitializeFail\r\n");
     296:	8a e2       	ldi	r24, 0x2A	; 42
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <Serial_SendString>
        return STA_NOINIT;  //其他错误：初始化失败
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	08 95       	ret
{
	unsigned char state;

	if(drv)
	{
		 return STA_NOINIT;  //仅支持磁盘0的操作
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	08 95       	ret
	 
	 
	
	if(state == STA_NODISK)
    {
        return STA_NODISK;
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	08 95       	ret
    }
    else
    {
	
		//Serial_SendString("InitializeSuccess\r\n");
        return 0;           //初始化成功
     2aa:	80 e0       	ldi	r24, 0x00	; 0
    }


	
}
     2ac:	08 95       	ret

000002ae <disk_status>:
//Get disk status
DSTATUS disk_status (               
	BYTE drv		/* Physical drive nmuber (0..) */
)
{
    if(drv)
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	81 11       	cpse	r24, r1
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <disk_status+0x8>
     2b4:	90 e0       	ldi	r25, 0x00	; 0
    if(!SD_DET())
    {
        return STA_NODISK;
    }
    return 0;
}
     2b6:	89 2f       	mov	r24, r25
     2b8:	08 95       	ret

000002ba <disk_read>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	69 01       	movw	r12, r18
     2c6:	7a 01       	movw	r14, r20
	unsigned char res=0;
	//count=count;      //不知为何,count会被优化为0,故加上这条语句
	//sector=sector;
    if ((drv) || (!count))
     2c8:	81 11       	cpse	r24, r1
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <disk_read+0x16>
     2cc:	01 11       	cpse	r16, r1
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <disk_read+0x20>
    {    
		Serial_Send(5+0x30);
     2d0:	85 e3       	ldi	r24, 0x35	; 53
     2d2:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <Serial_Send>
        return RES_PARERR;  //仅支持单磁盘操作，count不能等于0，否则返回参数错误
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	14 c0       	rjmp	.+40     	; 0x302 <disk_read+0x48>
        return RES_NOTRDY;  //没有检测到SD卡，报NOT READY错误
    }

    
	
    if(count==1)            //1个sector的读操作      
     2da:	01 30       	cpi	r16, 0x01	; 1
     2dc:	39 f4       	brne	.+14     	; 0x2ec <disk_read+0x32>
    {                                                
        res = SD_ReadSingleBlock(sector, buff);      
     2de:	ab 01       	movw	r20, r22
     2e0:	c7 01       	movw	r24, r14
     2e2:	b6 01       	movw	r22, r12
     2e4:	0e 94 71 19 	call	0x32e2	; 0x32e2 <SD_ReadSingleBlock>
     2e8:	98 2f       	mov	r25, r24
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <disk_read+0x40>
    }                                                
    else                    //多个sector的读操作     
    {                                                
        res = SD_ReadMultiBlock(sector, buff, count);
     2ec:	20 2f       	mov	r18, r16
     2ee:	ab 01       	movw	r20, r22
     2f0:	c7 01       	movw	r24, r14
     2f2:	b6 01       	movw	r22, r12
     2f4:	0e 94 9a 19 	call	0x3334	; 0x3334 <SD_ReadMultiBlock>
     2f8:	98 2f       	mov	r25, r24
        }                                      
        buff+=512;                             
    }while(--count);                                         
    */
    //处理返回值，将SPI_SD_driver.c的返回值转成ff.c的返回值
    if(res == 0x00)
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	91 11       	cpse	r25, r1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <disk_read+0x48>
     300:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return RES_ERROR;
    }
}
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	08 95       	ret

0000030e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	        /* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
     30e:	0f 93       	push	r16
     310:	fb 01       	movw	r30, r22
	unsigned char res;
//	count = 1;
//	sector = 2;

    if (drv || !count)
     312:	81 11       	cpse	r24, r1
     314:	14 c0       	rjmp	.+40     	; 0x33e <disk_write+0x30>
     316:	00 23       	and	r16, r16
     318:	a1 f0       	breq	.+40     	; 0x342 <disk_write+0x34>
     31a:	ca 01       	movw	r24, r20
     31c:	b9 01       	movw	r22, r18
     31e:	af 01       	movw	r20, r30
        return RES_NOTRDY;  //没有检测到SD卡，报NOT READY错误
    }


    // 读写操作
    if(count == 1)
     320:	01 30       	cpi	r16, 0x01	; 1
     322:	21 f4       	brne	.+8      	; 0x32c <disk_write+0x1e>
    {
        res = SD_WriteSingleBlock(sector, buff);
     324:	0e 94 d7 19 	call	0x33ae	; 0x33ae <SD_WriteSingleBlock>
     328:	98 2f       	mov	r25, r24
     32a:	04 c0       	rjmp	.+8      	; 0x334 <disk_write+0x26>
    }
    else
    {
        res = SD_WriteMultiBlock(sector, buff, count);
     32c:	20 2f       	mov	r18, r16
     32e:	0e 94 3e 1a 	call	0x347c	; 0x347c <SD_WriteMultiBlock>
     332:	98 2f       	mov	r25, r24
    }
    // 返回值转换
    if(res == 0)
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	91 11       	cpse	r25, r1
     338:	05 c0       	rjmp	.+10     	; 0x344 <disk_write+0x36>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	03 c0       	rjmp	.+6      	; 0x344 <disk_write+0x36>
//	count = 1;
//	sector = 2;

    if (drv || !count)
    {    
        return RES_PARERR;  //仅支持单磁盘操作，count不能等于0，否则返回参数错误
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	01 c0       	rjmp	.+2      	; 0x344 <disk_write+0x36>
     342:	84 e0       	ldi	r24, 0x04	; 4
    }
    else
    {
        return RES_ERROR;
    }
}
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <disk_ioctl>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)

{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
    DRESULT res;


    if (drv)
     34c:	81 11       	cpse	r24, r1
     34e:	1e c0       	rjmp	.+60     	; 0x38c <disk_ioctl+0x44>
     350:	ea 01       	movw	r28, r20
    {    
        return RES_PARERR;  //仅支持单磁盘操作，否则返回参数错误
    }
    
    //FATFS目前版本仅需处理CTRL_SYNC，GET_SECTOR_COUNT，GET_BLOCK_SIZ三个命令
    switch(ctrl)
     352:	61 30       	cpi	r22, 0x01	; 1
     354:	99 f0       	breq	.+38     	; 0x37c <disk_ioctl+0x34>
     356:	18 f0       	brcs	.+6      	; 0x35e <disk_ioctl+0x16>
     358:	64 30       	cpi	r22, 0x04	; 4
     35a:	d0 f4       	brcc	.+52     	; 0x390 <disk_ioctl+0x48>
     35c:	09 c0       	rjmp	.+18     	; 0x370 <disk_ioctl+0x28>
    {
    case CTRL_SYNC:
        SD_CS_L;
     35e:	2a 98       	cbi	0x05, 2	; 5
        if(SD_WaitReady()==0)
     360:	0e 94 37 1a 	call	0x346e	; 0x346e <SD_WaitReady>
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	81 11       	cpse	r24, r1
     368:	01 c0       	rjmp	.+2      	; 0x36c <disk_ioctl+0x24>
     36a:	90 e0       	ldi	r25, 0x00	; 0
        }
        else
        {
            res = RES_ERROR;
        }
        SD_CS_H;
     36c:	2a 9a       	sbi	0x05, 2	; 5
        break;
     36e:	11 c0       	rjmp	.+34     	; 0x392 <disk_ioctl+0x4a>
        
    case GET_BLOCK_SIZE:
    case GET_SECTOR_SIZE:
        *(WORD*)buff = 512;
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	99 83       	std	Y+1, r25	; 0x01
     376:	88 83       	st	Y, r24
        res = RES_OK;
     378:	90 e0       	ldi	r25, 0x00	; 0
        break;
     37a:	0b c0       	rjmp	.+22     	; 0x392 <disk_ioctl+0x4a>

    case GET_SECTOR_COUNT:
        *(DWORD*)buff = SD_GetCapacity();
     37c:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <SD_GetCapacity>
     380:	68 83       	st	Y, r22
     382:	79 83       	std	Y+1, r23	; 0x01
     384:	8a 83       	std	Y+2, r24	; 0x02
     386:	9b 83       	std	Y+3, r25	; 0x03
        res = RES_OK;
     388:	90 e0       	ldi	r25, 0x00	; 0
        break;
     38a:	03 c0       	rjmp	.+6      	; 0x392 <disk_ioctl+0x4a>
    DRESULT res;


    if (drv)
    {    
        return RES_PARERR;  //仅支持单磁盘操作，否则返回参数错误
     38c:	94 e0       	ldi	r25, 0x04	; 4
     38e:	01 c0       	rjmp	.+2      	; 0x392 <disk_ioctl+0x4a>
    case GET_SECTOR_COUNT:
        *(DWORD*)buff = SD_GetCapacity();
        res = RES_OK;
        break;
    default:
        res = RES_PARERR;
     390:	94 e0       	ldi	r25, 0x04	; 4
        break;
    }

    return res;
}
     392:	89 2f       	mov	r24, r25
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <get_fattime>:
	date=date<<5;
	date+=t.tm_sec;
	date=1950466004;
*/
    return 1950466005;
}
     39a:	65 ed       	ldi	r22, 0xD5	; 213
     39c:	7f eb       	ldi	r23, 0xBF	; 191
     39e:	81 e4       	ldi	r24, 0x41	; 65
     3a0:	94 e7       	ldi	r25, 0x74	; 116
     3a2:	08 95       	ret

000003a4 <mem_cpy>:
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
     3a4:	41 15       	cp	r20, r1
     3a6:	51 05       	cpc	r21, r1
     3a8:	51 f0       	breq	.+20     	; 0x3be <mem_cpy+0x1a>
     3aa:	a6 2f       	mov	r26, r22
     3ac:	b7 2f       	mov	r27, r23
     3ae:	fc 01       	movw	r30, r24
     3b0:	48 0f       	add	r20, r24
     3b2:	59 1f       	adc	r21, r25
     3b4:	9d 91       	ld	r25, X+
     3b6:	91 93       	st	Z+, r25
     3b8:	e4 17       	cp	r30, r20
     3ba:	f5 07       	cpc	r31, r21
     3bc:	d9 f7       	brne	.-10     	; 0x3b4 <mem_cpy+0x10>
     3be:	08 95       	ret

000003c0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
     3c0:	cf 92       	push	r12
     3c2:	df 92       	push	r13
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	8b 01       	movw	r16, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
     3d2:	fb 01       	movw	r30, r22
     3d4:	39 96       	adiw	r30, 0x09	; 9
	if (dj->sect) {
     3d6:	dc 01       	movw	r26, r24
     3d8:	1e 96       	adiw	r26, 0x0e	; 14
     3da:	4d 91       	ld	r20, X+
     3dc:	5d 91       	ld	r21, X+
     3de:	6d 91       	ld	r22, X+
     3e0:	7c 91       	ld	r23, X
     3e2:	51 97       	sbiw	r26, 0x11	; 17
     3e4:	45 2b       	or	r20, r21
     3e6:	46 2b       	or	r20, r22
     3e8:	47 2b       	or	r20, r23
     3ea:	09 f4       	brne	.+2      	; 0x3ee <get_fileinfo+0x2e>
     3ec:	75 c0       	rjmp	.+234    	; 0x4d8 <get_fileinfo+0x118>
		dir = dj->dir;
     3ee:	52 96       	adiw	r26, 0x12	; 18
     3f0:	0d 90       	ld	r0, X+
     3f2:	bc 91       	ld	r27, X
     3f4:	a0 2d       	mov	r26, r0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     3f6:	8c 91       	ld	r24, X
			if (c == ' ') break;
     3f8:	80 32       	cpi	r24, 0x20	; 32
     3fa:	c1 f0       	breq	.+48     	; 0x42c <get_fileinfo+0x6c>
     3fc:	9d 01       	movw	r18, r26
     3fe:	2f 5f       	subi	r18, 0xFF	; 255
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	a8 01       	movw	r20, r16
     404:	4f 5e       	subi	r20, 0xEF	; 239
     406:	5f 4f       	sbci	r21, 0xFF	; 255
			if (c == 0x05) c = 0xE5;
     408:	95 ee       	ldi	r25, 0xE5	; 229
     40a:	05 c0       	rjmp	.+10     	; 0x416 <get_fileinfo+0x56>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     40c:	e9 01       	movw	r28, r18
     40e:	89 91       	ld	r24, Y+
     410:	9e 01       	movw	r18, r28
			if (c == ' ') break;
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	69 f0       	breq	.+26     	; 0x430 <get_fileinfo+0x70>
			if (c == 0x05) c = 0xE5;
     416:	85 30       	cpi	r24, 0x05	; 5
     418:	09 f4       	brne	.+2      	; 0x41c <get_fileinfo+0x5c>
     41a:	89 2f       	mov	r24, r25
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
     41c:	31 96       	adiw	r30, 0x01	; 1
     41e:	ef 01       	movw	r28, r30
     420:	21 97       	sbiw	r28, 0x01	; 1
     422:	88 83       	st	Y, r24

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     424:	e4 17       	cp	r30, r20
     426:	f5 07       	cpc	r31, r21
     428:	89 f7       	brne	.-30     	; 0x40c <get_fileinfo+0x4c>
     42a:	03 c0       	rjmp	.+6      	; 0x432 <get_fileinfo+0x72>
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
     42c:	af 01       	movw	r20, r30
     42e:	01 c0       	rjmp	.+2      	; 0x432 <get_fileinfo+0x72>
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
     430:	af 01       	movw	r20, r30
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     432:	18 96       	adiw	r26, 0x08	; 8
     434:	8c 91       	ld	r24, X
     436:	18 97       	sbiw	r26, 0x08	; 8
     438:	80 32       	cpi	r24, 0x20	; 32
     43a:	81 f0       	breq	.+32     	; 0x45c <get_fileinfo+0x9c>
			*p++ = '.';
     43c:	8e e2       	ldi	r24, 0x2E	; 46
     43e:	fa 01       	movw	r30, r20
     440:	80 83       	st	Z, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
     442:	18 96       	adiw	r26, 0x08	; 8
     444:	8c 91       	ld	r24, X
     446:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
     448:	80 32       	cpi	r24, 0x20	; 32
     44a:	09 f0       	breq	.+2      	; 0x44e <get_fileinfo+0x8e>
     44c:	47 c0       	rjmp	.+142    	; 0x4dc <get_fileinfo+0x11c>
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
     44e:	31 96       	adiw	r30, 0x01	; 1
     450:	06 c0       	rjmp	.+12     	; 0x45e <get_fileinfo+0x9e>
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
     452:	fa 01       	movw	r30, r20
     454:	34 96       	adiw	r30, 0x04	; 4
     456:	ea 01       	movw	r28, r20
     458:	8b 83       	std	Y+3, r24	; 0x03
     45a:	01 c0       	rjmp	.+2      	; 0x45e <get_fileinfo+0x9e>
     45c:	fa 01       	movw	r30, r20
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     45e:	1b 96       	adiw	r26, 0x0b	; 11
     460:	8c 91       	ld	r24, X
     462:	1b 97       	sbiw	r26, 0x0b	; 11
     464:	e8 01       	movw	r28, r16
     466:	88 87       	std	Y+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     468:	5f 96       	adiw	r26, 0x1f	; 31
     46a:	8c 91       	ld	r24, X
     46c:	5f 97       	sbiw	r26, 0x1f	; 31
     46e:	5e 96       	adiw	r26, 0x1e	; 30
     470:	4c 91       	ld	r20, X
     472:	5e 97       	sbiw	r26, 0x1e	; 30
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	ba 01       	movw	r22, r20
     47c:	55 27       	eor	r21, r21
     47e:	44 27       	eor	r20, r20
     480:	78 2b       	or	r23, r24
     482:	5c 96       	adiw	r26, 0x1c	; 28
     484:	8c 91       	ld	r24, X
     486:	5c 97       	sbiw	r26, 0x1c	; 28
     488:	48 2b       	or	r20, r24
     48a:	5d 96       	adiw	r26, 0x1d	; 29
     48c:	cc 90       	ld	r12, X
     48e:	5d 97       	sbiw	r26, 0x1d	; 29
     490:	d1 2c       	mov	r13, r1
     492:	dc 2c       	mov	r13, r12
     494:	cc 24       	eor	r12, r12
     496:	e1 2c       	mov	r14, r1
     498:	f1 2c       	mov	r15, r1
     49a:	4c 29       	or	r20, r12
     49c:	5d 29       	or	r21, r13
     49e:	6e 29       	or	r22, r14
     4a0:	7f 29       	or	r23, r15
     4a2:	48 83       	st	Y, r20
     4a4:	59 83       	std	Y+1, r21	; 0x01
     4a6:	6a 83       	std	Y+2, r22	; 0x02
     4a8:	7b 83       	std	Y+3, r23	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     4aa:	59 96       	adiw	r26, 0x19	; 25
     4ac:	8c 91       	ld	r24, X
     4ae:	59 97       	sbiw	r26, 0x19	; 25
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	98 2f       	mov	r25, r24
     4b4:	88 27       	eor	r24, r24
     4b6:	58 96       	adiw	r26, 0x18	; 24
     4b8:	2c 91       	ld	r18, X
     4ba:	58 97       	sbiw	r26, 0x18	; 24
     4bc:	82 2b       	or	r24, r18
     4be:	9d 83       	std	Y+5, r25	; 0x05
     4c0:	8c 83       	std	Y+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     4c2:	57 96       	adiw	r26, 0x17	; 23
     4c4:	8c 91       	ld	r24, X
     4c6:	57 97       	sbiw	r26, 0x17	; 23
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	98 2f       	mov	r25, r24
     4cc:	88 27       	eor	r24, r24
     4ce:	56 96       	adiw	r26, 0x16	; 22
     4d0:	2c 91       	ld	r18, X
     4d2:	82 2b       	or	r24, r18
     4d4:	9f 83       	std	Y+7, r25	; 0x07
     4d6:	8e 83       	std	Y+6, r24	; 0x06
	}
	*p = 0;
     4d8:	10 82       	st	Z, r1
     4da:	13 c0       	rjmp	.+38     	; 0x502 <get_fileinfo+0x142>
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
     4dc:	fa 01       	movw	r30, r20
     4de:	32 96       	adiw	r30, 0x02	; 2
     4e0:	ea 01       	movw	r28, r20
     4e2:	89 83       	std	Y+1, r24	; 0x01
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     4e4:	19 96       	adiw	r26, 0x09	; 9
     4e6:	8c 91       	ld	r24, X
     4e8:	19 97       	sbiw	r26, 0x09	; 9
				if (c == ' ') break;
     4ea:	80 32       	cpi	r24, 0x20	; 32
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <get_fileinfo+0x130>
     4ee:	b7 cf       	rjmp	.-146    	; 0x45e <get_fileinfo+0x9e>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
     4f0:	31 96       	adiw	r30, 0x01	; 1
     4f2:	8a 83       	std	Y+2, r24	; 0x02
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     4f4:	1a 96       	adiw	r26, 0x0a	; 10
     4f6:	8c 91       	ld	r24, X
     4f8:	1a 97       	sbiw	r26, 0x0a	; 10
				if (c == ' ') break;
     4fa:	80 32       	cpi	r24, 0x20	; 32
     4fc:	09 f0       	breq	.+2      	; 0x500 <get_fileinfo+0x140>
     4fe:	a9 cf       	rjmp	.-174    	; 0x452 <get_fileinfo+0x92>
     500:	ae cf       	rjmp	.-164    	; 0x45e <get_fileinfo+0x9e>
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	08 95       	ret

00000514 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
     514:	4f 92       	push	r4
     516:	5f 92       	push	r5
     518:	6f 92       	push	r6
     51a:	7f 92       	push	r7
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
	DWORD wsect;


	wsect = fs->winsect;
     530:	fc 01       	movw	r30, r24
     532:	c2 a4       	ldd	r12, Z+42	; 0x2a
     534:	d3 a4       	ldd	r13, Z+43	; 0x2b
     536:	e4 a4       	ldd	r14, Z+44	; 0x2c
     538:	f5 a4       	ldd	r15, Z+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
     53a:	c4 16       	cp	r12, r20
     53c:	d5 06       	cpc	r13, r21
     53e:	e6 06       	cpc	r14, r22
     540:	f7 06       	cpc	r15, r23
     542:	09 f4       	brne	.+2      	; 0x546 <move_window+0x32>
     544:	4f c0       	rjmp	.+158    	; 0x5e4 <move_window+0xd0>
     546:	2a 01       	movw	r4, r20
     548:	3b 01       	movw	r6, r22
     54a:	ec 01       	movw	r28, r24
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
     54c:	84 81       	ldd	r24, Z+4	; 0x04
     54e:	88 23       	and	r24, r24
     550:	a1 f1       	breq	.+104    	; 0x5ba <move_window+0xa6>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
     552:	5f 01       	movw	r10, r30
     554:	fe e2       	ldi	r31, 0x2E	; 46
     556:	af 0e       	add	r10, r31
     558:	b1 1c       	adc	r11, r1
     55a:	01 e0       	ldi	r16, 0x01	; 1
     55c:	a7 01       	movw	r20, r14
     55e:	96 01       	movw	r18, r12
     560:	b5 01       	movw	r22, r10
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	0e 94 87 01 	call	0x30e	; 0x30e <disk_write>
     568:	81 11       	cpse	r24, r1
     56a:	3e c0       	rjmp	.+124    	; 0x5e8 <move_window+0xd4>
				return FR_DISK_ERR;
			fs->wflag = 0;
     56c:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
     56e:	4e 89       	ldd	r20, Y+22	; 0x16
     570:	5f 89       	ldd	r21, Y+23	; 0x17
     572:	68 8d       	ldd	r22, Y+24	; 0x18
     574:	79 8d       	ldd	r23, Y+25	; 0x19
     576:	8e 8d       	ldd	r24, Y+30	; 0x1e
     578:	9f 8d       	ldd	r25, Y+31	; 0x1f
     57a:	a8 a1       	ldd	r26, Y+32	; 0x20
     57c:	b9 a1       	ldd	r27, Y+33	; 0x21
     57e:	84 0f       	add	r24, r20
     580:	95 1f       	adc	r25, r21
     582:	a6 1f       	adc	r26, r22
     584:	b7 1f       	adc	r27, r23
     586:	c8 16       	cp	r12, r24
     588:	d9 06       	cpc	r13, r25
     58a:	ea 06       	cpc	r14, r26
     58c:	fb 06       	cpc	r15, r27
     58e:	a8 f4       	brcc	.+42     	; 0x5ba <move_window+0xa6>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     590:	1b 81       	ldd	r17, Y+3	; 0x03
     592:	12 30       	cpi	r17, 0x02	; 2
     594:	90 f0       	brcs	.+36     	; 0x5ba <move_window+0xa6>
					wsect += fs->sects_fat;
     596:	8e 89       	ldd	r24, Y+22	; 0x16
     598:	9f 89       	ldd	r25, Y+23	; 0x17
     59a:	a8 8d       	ldd	r26, Y+24	; 0x18
     59c:	b9 8d       	ldd	r27, Y+25	; 0x19
     59e:	c8 0e       	add	r12, r24
     5a0:	d9 1e       	adc	r13, r25
     5a2:	ea 1e       	adc	r14, r26
     5a4:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
     5a6:	01 e0       	ldi	r16, 0x01	; 1
     5a8:	a7 01       	movw	r20, r14
     5aa:	96 01       	movw	r18, r12
     5ac:	b5 01       	movw	r22, r10
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	0e 94 87 01 	call	0x30e	; 0x30e <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     5b4:	11 50       	subi	r17, 0x01	; 1
     5b6:	11 30       	cpi	r17, 0x01	; 1
     5b8:	71 f7       	brne	.-36     	; 0x596 <move_window+0x82>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     5ba:	41 14       	cp	r4, r1
     5bc:	51 04       	cpc	r5, r1
     5be:	61 04       	cpc	r6, r1
     5c0:	71 04       	cpc	r7, r1
     5c2:	a1 f0       	breq	.+40     	; 0x5ec <move_window+0xd8>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
     5c4:	01 e0       	ldi	r16, 0x01	; 1
     5c6:	a3 01       	movw	r20, r6
     5c8:	92 01       	movw	r18, r4
     5ca:	be 01       	movw	r22, r28
     5cc:	62 5d       	subi	r22, 0xD2	; 210
     5ce:	7f 4f       	sbci	r23, 0xFF	; 255
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <disk_read>
     5d6:	81 11       	cpse	r24, r1
     5d8:	0b c0       	rjmp	.+22     	; 0x5f0 <move_window+0xdc>
				return FR_DISK_ERR;
			fs->winsect = sector;
     5da:	4a a6       	std	Y+42, r4	; 0x2a
     5dc:	5b a6       	std	Y+43, r5	; 0x2b
     5de:	6c a6       	std	Y+44, r6	; 0x2c
     5e0:	7d a6       	std	Y+45, r7	; 0x2d
     5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <move_window+0xde>
		}
	}

	return FR_OK;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <move_window+0xde>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <move_window+0xde>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <move_window+0xde>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	bf 90       	pop	r11
     604:	af 90       	pop	r10
     606:	7f 90       	pop	r7
     608:	6f 90       	pop	r6
     60a:	5f 90       	pop	r5
     60c:	4f 90       	pop	r4
     60e:	08 95       	ret

00000610 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     610:	0f 93       	push	r16
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	ec 01       	movw	r28, r24
     618:	9a 01       	movw	r18, r20
     61a:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     61c:	bc 01       	movw	r22, r24
     61e:	62 5d       	subi	r22, 0xD2	; 210
     620:	7f 4f       	sbci	r23, 0xFF	; 255
     622:	01 e0       	ldi	r16, 0x01	; 1
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	0e 94 5d 01 	call	0x2ba	; 0x2ba <disk_read>
     62a:	81 11       	cpse	r24, r1
     62c:	51 c0       	rjmp	.+162    	; 0x6d0 <check_fs+0xc0>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     62e:	fe 01       	movw	r30, r28
     630:	e3 5d       	subi	r30, 0xD3	; 211
     632:	fd 4f       	sbci	r31, 0xFD	; 253
     634:	80 81       	ld	r24, Z
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	98 2f       	mov	r25, r24
     63a:	88 27       	eor	r24, r24
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	20 81       	ld	r18, Z
     640:	82 2b       	or	r24, r18
     642:	85 35       	cpi	r24, 0x55	; 85
     644:	9a 4a       	sbci	r25, 0xAA	; 170
     646:	09 f0       	breq	.+2      	; 0x64a <check_fs+0x3a>
     648:	45 c0       	rjmp	.+138    	; 0x6d4 <check_fs+0xc4>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     64a:	e5 5c       	subi	r30, 0xC5	; 197
     64c:	f1 40       	sbci	r31, 0x01	; 1
     64e:	20 81       	ld	r18, Z
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	80 81       	ld	r24, Z
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	a0 e0       	ldi	r26, 0x00	; 0
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	dc 01       	movw	r26, r24
     65c:	99 27       	eor	r25, r25
     65e:	88 27       	eor	r24, r24
     660:	b2 2b       	or	r27, r18
     662:	32 97       	sbiw	r30, 0x02	; 2
     664:	20 81       	ld	r18, Z
     666:	82 2b       	or	r24, r18
     668:	31 96       	adiw	r30, 0x01	; 1
     66a:	40 81       	ld	r20, Z
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	54 2f       	mov	r21, r20
     670:	44 27       	eor	r20, r20
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	84 2b       	or	r24, r20
     678:	95 2b       	or	r25, r21
     67a:	a6 2b       	or	r26, r22
     67c:	b7 2b       	or	r27, r23
     67e:	bb 27       	eor	r27, r27
     680:	86 34       	cpi	r24, 0x46	; 70
     682:	91 44       	sbci	r25, 0x41	; 65
     684:	a4 45       	sbci	r26, 0x54	; 84
     686:	b1 05       	cpc	r27, r1
     688:	39 f1       	breq	.+78     	; 0x6d8 <check_fs+0xc8>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     68a:	7e 96       	adiw	r30, 0x1e	; 30
     68c:	80 81       	ld	r24, Z
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	40 81       	ld	r20, Z
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	ba 01       	movw	r22, r20
     69a:	55 27       	eor	r21, r21
     69c:	44 27       	eor	r20, r20
     69e:	78 2b       	or	r23, r24
     6a0:	32 97       	sbiw	r30, 0x02	; 2
     6a2:	80 81       	ld	r24, Z
     6a4:	48 2b       	or	r20, r24
     6a6:	cf 57       	subi	r28, 0x7F	; 127
     6a8:	df 4f       	sbci	r29, 0xFF	; 255
     6aa:	88 81       	ld	r24, Y
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	98 2f       	mov	r25, r24
     6b0:	88 27       	eor	r24, r24
     6b2:	a0 e0       	ldi	r26, 0x00	; 0
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	48 2b       	or	r20, r24
     6b8:	59 2b       	or	r21, r25
     6ba:	6a 2b       	or	r22, r26
     6bc:	7b 2b       	or	r23, r27
     6be:	77 27       	eor	r23, r23
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	46 34       	cpi	r20, 0x46	; 70
     6c4:	51 44       	sbci	r21, 0x41	; 65
     6c6:	64 45       	sbci	r22, 0x54	; 84
     6c8:	71 05       	cpc	r23, r1
     6ca:	39 f4       	brne	.+14     	; 0x6da <check_fs+0xca>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	05 c0       	rjmp	.+10     	; 0x6da <check_fs+0xca>
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <check_fs+0xca>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <check_fs+0xca>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	81 f0       	breq	.+32     	; 0x706 <validate+0x24>
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 81       	ld	r18, Z
     6ea:	22 23       	and	r18, r18
     6ec:	71 f0       	breq	.+28     	; 0x70a <validate+0x28>
     6ee:	26 81       	ldd	r18, Z+6	; 0x06
     6f0:	37 81       	ldd	r19, Z+7	; 0x07
     6f2:	26 17       	cp	r18, r22
     6f4:	37 07       	cpc	r19, r23
     6f6:	59 f4       	brne	.+22     	; 0x70e <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
     6f8:	81 81       	ldd	r24, Z+1	; 0x01
     6fa:	0e 94 57 01 	call	0x2ae	; 0x2ae <disk_status>
     6fe:	80 fd       	sbrc	r24, 0
     700:	08 c0       	rjmp	.+16     	; 0x712 <validate+0x30>
		return FR_NOT_READY;

	return FR_OK;
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	08 95       	ret
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
     706:	89 e0       	ldi	r24, 0x09	; 9
     708:	08 95       	ret
     70a:	89 e0       	ldi	r24, 0x09	; 9
     70c:	08 95       	ret
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	08 95       	ret

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
		return FR_NOT_READY;
     712:	83 e0       	ldi	r24, 0x03	; 3

	return FR_OK;
}
     714:	08 95       	ret

00000716 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
     716:	0f 93       	push	r16
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	ba 01       	movw	r22, r20
     724:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
     728:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
     72a:	81 11       	cpse	r24, r1
     72c:	5a c0       	rjmp	.+180    	; 0x7e2 <sync+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
     72e:	88 81       	ld	r24, Y
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	09 f0       	breq	.+2      	; 0x736 <sync+0x20>
     734:	4c c0       	rjmp	.+152    	; 0x7ce <sync+0xb8>
     736:	8d 81       	ldd	r24, Y+5	; 0x05
     738:	88 23       	and	r24, r24
     73a:	09 f4       	brne	.+2      	; 0x73e <sync+0x28>
     73c:	48 c0       	rjmp	.+144    	; 0x7ce <sync+0xb8>
			fs->winsect = 0;
     73e:	1a a6       	std	Y+42, r1	; 0x2a
     740:	1b a6       	std	Y+43, r1	; 0x2b
     742:	1c a6       	std	Y+44, r1	; 0x2c
     744:	1d a6       	std	Y+45, r1	; 0x2d
			mem_set(fs->win, 0, 512);
     746:	be 01       	movw	r22, r28
     748:	62 5d       	subi	r22, 0xD2	; 210
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	fb 01       	movw	r30, r22
     74e:	ce 01       	movw	r24, r28
     750:	82 5d       	subi	r24, 0xD2	; 210
     752:	9d 4f       	sbci	r25, 0xFD	; 253

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     754:	11 92       	st	Z+, r1
     756:	e8 17       	cp	r30, r24
     758:	f9 07       	cpc	r31, r25
     75a:	e1 f7       	brne	.-8      	; 0x754 <sync+0x3e>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
     75c:	85 e5       	ldi	r24, 0x55	; 85
     75e:	fe 01       	movw	r30, r28
     760:	e4 5d       	subi	r30, 0xD4	; 212
     762:	fd 4f       	sbci	r31, 0xFD	; 253
     764:	80 83       	st	Z, r24
     766:	8a ea       	ldi	r24, 0xAA	; 170
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
     76c:	82 e5       	ldi	r24, 0x52	; 82
     76e:	8e a7       	std	Y+46, r24	; 0x2e
     770:	8f a7       	std	Y+47, r24	; 0x2f
     772:	81 e6       	ldi	r24, 0x61	; 97
     774:	88 ab       	std	Y+48, r24	; 0x30
     776:	91 e4       	ldi	r25, 0x41	; 65
     778:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
     77a:	22 e7       	ldi	r18, 0x72	; 114
     77c:	7b 97       	sbiw	r30, 0x1b	; 27
     77e:	20 83       	st	Z, r18
     780:	31 96       	adiw	r30, 0x01	; 1
     782:	20 83       	st	Z, r18
     784:	31 96       	adiw	r30, 0x01	; 1
     786:	90 83       	st	Z, r25
     788:	31 96       	adiw	r30, 0x01	; 1
     78a:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
     78c:	3e 85       	ldd	r19, Y+14	; 0x0e
     78e:	2f 85       	ldd	r18, Y+15	; 0x0f
     790:	98 89       	ldd	r25, Y+16	; 0x10
     792:	89 89       	ldd	r24, Y+17	; 0x11
     794:	31 96       	adiw	r30, 0x01	; 1
     796:	30 83       	st	Z, r19
     798:	31 96       	adiw	r30, 0x01	; 1
     79a:	20 83       	st	Z, r18
     79c:	31 96       	adiw	r30, 0x01	; 1
     79e:	90 83       	st	Z, r25
     7a0:	31 96       	adiw	r30, 0x01	; 1
     7a2:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
     7a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a6:	2b 85       	ldd	r18, Y+11	; 0x0b
     7a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     7aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     7ac:	31 96       	adiw	r30, 0x01	; 1
     7ae:	30 83       	st	Z, r19
     7b0:	31 96       	adiw	r30, 0x01	; 1
     7b2:	20 83       	st	Z, r18
     7b4:	31 96       	adiw	r30, 0x01	; 1
     7b6:	90 83       	st	Z, r25
     7b8:	31 96       	adiw	r30, 0x01	; 1
     7ba:	80 83       	st	Z, r24
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
     7bc:	2a 89       	ldd	r18, Y+18	; 0x12
     7be:	3b 89       	ldd	r19, Y+19	; 0x13
     7c0:	4c 89       	ldd	r20, Y+20	; 0x14
     7c2:	5d 89       	ldd	r21, Y+21	; 0x15
     7c4:	01 e0       	ldi	r16, 0x01	; 1
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	0e 94 87 01 	call	0x30e	; 0x30e <disk_write>
			fs->fsi_flag = 0;
     7cc:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	0e 94 a4 01 	call	0x348	; 0x348 <disk_ioctl>
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	81 11       	cpse	r24, r1
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <sync+0xcc>
     7e0:	90 e0       	ldi	r25, 0x00	; 0
			res = FR_DISK_ERR;
	}

	return res;
}
     7e2:	89 2f       	mov	r24, r25
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	0f 91       	pop	r16
     7ea:	08 95       	ret

000007ec <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     7ec:	4f 92       	push	r4
     7ee:	5f 92       	push	r5
     7f0:	6f 92       	push	r6
     7f2:	7f 92       	push	r7
     7f4:	af 92       	push	r10
     7f6:	bf 92       	push	r11
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
     808:	6a 01       	movw	r12, r20
     80a:	7b 01       	movw	r14, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     80c:	42 30       	cpi	r20, 0x02	; 2
     80e:	51 05       	cpc	r21, r1
     810:	61 05       	cpc	r22, r1
     812:	71 05       	cpc	r23, r1
     814:	08 f4       	brcc	.+2      	; 0x818 <get_fat+0x2c>
     816:	b2 c0       	rjmp	.+356    	; 0x97c <__stack+0x7d>
     818:	8a 8d       	ldd	r24, Y+26	; 0x1a
     81a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     81c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     81e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     820:	48 17       	cp	r20, r24
     822:	59 07       	cpc	r21, r25
     824:	6a 07       	cpc	r22, r26
     826:	7b 07       	cpc	r23, r27
     828:	08 f0       	brcs	.+2      	; 0x82c <get_fat+0x40>
     82a:	ad c0       	rjmp	.+346    	; 0x986 <__stack+0x87>
		return 1;

	fsect = fs->fatbase;
     82c:	4e 8c       	ldd	r4, Y+30	; 0x1e
     82e:	5f 8c       	ldd	r5, Y+31	; 0x1f
     830:	68 a0       	ldd	r6, Y+32	; 0x20
     832:	79 a0       	ldd	r7, Y+33	; 0x21
	switch (fs->fs_type) {
     834:	88 81       	ld	r24, Y
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	09 f4       	brne	.+2      	; 0x83c <get_fat+0x50>
     83a:	49 c0       	rjmp	.+146    	; 0x8ce <get_fat+0xe2>
     83c:	83 30       	cpi	r24, 0x03	; 3
     83e:	09 f4       	brne	.+2      	; 0x842 <get_fat+0x56>
     840:	65 c0       	rjmp	.+202    	; 0x90c <__stack+0xd>
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	09 f0       	breq	.+2      	; 0x848 <get_fat+0x5c>
     846:	a4 c0       	rjmp	.+328    	; 0x990 <__stack+0x91>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
     848:	5a 01       	movw	r10, r20
     84a:	b6 94       	lsr	r11
     84c:	a7 94       	ror	r10
     84e:	a4 0e       	add	r10, r20
     850:	b5 1e       	adc	r11, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     852:	c5 01       	movw	r24, r10
     854:	89 2f       	mov	r24, r25
     856:	99 27       	eor	r25, r25
     858:	86 95       	lsr	r24
     85a:	b3 01       	movw	r22, r6
     85c:	a2 01       	movw	r20, r4
     85e:	48 0f       	add	r20, r24
     860:	59 1f       	adc	r21, r25
     862:	61 1d       	adc	r22, r1
     864:	71 1d       	adc	r23, r1
     866:	ce 01       	movw	r24, r28
     868:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
     86c:	81 11       	cpse	r24, r1
     86e:	94 c0       	rjmp	.+296    	; 0x998 <__stack+0x99>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     870:	f5 01       	movw	r30, r10
     872:	f1 70       	andi	r31, 0x01	; 1
     874:	ec 0f       	add	r30, r28
     876:	fd 1f       	adc	r31, r29
     878:	16 a5       	ldd	r17, Z+46	; 0x2e
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	a8 1a       	sub	r10, r24
     87e:	b8 0a       	sbc	r11, r24
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     880:	c5 01       	movw	r24, r10
     882:	89 2f       	mov	r24, r25
     884:	99 27       	eor	r25, r25
     886:	86 95       	lsr	r24
     888:	b3 01       	movw	r22, r6
     88a:	a2 01       	movw	r20, r4
     88c:	48 0f       	add	r20, r24
     88e:	59 1f       	adc	r21, r25
     890:	61 1d       	adc	r22, r1
     892:	71 1d       	adc	r23, r1
     894:	ce 01       	movw	r24, r28
     896:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
     89a:	81 11       	cpse	r24, r1
     89c:	81 c0       	rjmp	.+258    	; 0x9a0 <__stack+0xa1>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	b8 22       	and	r11, r24
     8a2:	fe 01       	movw	r30, r28
     8a4:	ea 0d       	add	r30, r10
     8a6:	fb 1d       	adc	r31, r11
     8a8:	86 a5       	ldd	r24, Z+46	; 0x2e
     8aa:	61 2f       	mov	r22, r17
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	78 2b       	or	r23, r24
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     8b0:	c0 fe       	sbrs	r12, 0
     8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <get_fat+0xda>
     8b4:	72 95       	swap	r23
     8b6:	62 95       	swap	r22
     8b8:	6f 70       	andi	r22, 0x0F	; 15
     8ba:	67 27       	eor	r22, r23
     8bc:	7f 70       	andi	r23, 0x0F	; 15
     8be:	67 27       	eor	r22, r23
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	78 c0       	rjmp	.+240    	; 0x9b6 <__stack+0xb7>
     8c6:	7f 70       	andi	r23, 0x0F	; 15
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	74 c0       	rjmp	.+232    	; 0x9b6 <__stack+0xb7>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
     8ce:	45 2f       	mov	r20, r21
     8d0:	56 2f       	mov	r21, r22
     8d2:	67 2f       	mov	r22, r23
     8d4:	77 27       	eor	r23, r23
     8d6:	44 0d       	add	r20, r4
     8d8:	55 1d       	adc	r21, r5
     8da:	66 1d       	adc	r22, r6
     8dc:	77 1d       	adc	r23, r7
     8de:	ce 01       	movw	r24, r28
     8e0:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
     8e4:	81 11       	cpse	r24, r1
     8e6:	60 c0       	rjmp	.+192    	; 0x9a8 <__stack+0xa9>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
     8e8:	cc 0c       	add	r12, r12
     8ea:	dd 1c       	adc	r13, r13
     8ec:	e8 94       	clt
     8ee:	c0 f8       	bld	r12, 0
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	d8 22       	and	r13, r24
     8f4:	fe 01       	movw	r30, r28
     8f6:	ec 0d       	add	r30, r12
     8f8:	fd 1d       	adc	r31, r13
     8fa:	67 a5       	ldd	r22, Z+47	; 0x2f
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	76 2f       	mov	r23, r22
     900:	66 27       	eor	r22, r22
     902:	86 a5       	ldd	r24, Z+46	; 0x2e
     904:	68 2b       	or	r22, r24
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	55 c0       	rjmp	.+170    	; 0x9b6 <__stack+0xb7>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
     90c:	68 94       	set
     90e:	16 f8       	bld	r1, 6
     910:	76 95       	lsr	r23
     912:	67 95       	ror	r22
     914:	57 95       	ror	r21
     916:	47 95       	ror	r20
     918:	16 94       	lsr	r1
     91a:	d1 f7       	brne	.-12     	; 0x910 <__stack+0x11>
     91c:	44 0d       	add	r20, r4
     91e:	55 1d       	adc	r21, r5
     920:	66 1d       	adc	r22, r6
     922:	77 1d       	adc	r23, r7
     924:	ce 01       	movw	r24, r28
     926:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
     92a:	81 11       	cpse	r24, r1
     92c:	41 c0       	rjmp	.+130    	; 0x9b0 <__stack+0xb1>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
     92e:	cc 0c       	add	r12, r12
     930:	dd 1c       	adc	r13, r13
     932:	cc 0c       	add	r12, r12
     934:	dd 1c       	adc	r13, r13
     936:	8c ef       	ldi	r24, 0xFC	; 252
     938:	c8 22       	and	r12, r24
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	d8 22       	and	r13, r24
     93e:	fe 01       	movw	r30, r28
     940:	ec 0d       	add	r30, r12
     942:	fd 1d       	adc	r31, r13
     944:	21 a9       	ldd	r18, Z+49	; 0x31
     946:	60 a9       	ldd	r22, Z+48	; 0x30
     948:	86 2f       	mov	r24, r22
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	dc 01       	movw	r26, r24
     952:	99 27       	eor	r25, r25
     954:	88 27       	eor	r24, r24
     956:	b2 2b       	or	r27, r18
     958:	26 a5       	ldd	r18, Z+46	; 0x2e
     95a:	ac 01       	movw	r20, r24
     95c:	bd 01       	movw	r22, r26
     95e:	42 2b       	or	r20, r18
     960:	87 a5       	ldd	r24, Z+47	; 0x2f
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	98 2f       	mov	r25, r24
     966:	88 27       	eor	r24, r24
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	84 2b       	or	r24, r20
     96e:	95 2b       	or	r25, r21
     970:	a6 2b       	or	r26, r22
     972:	b7 2b       	or	r27, r23
     974:	bc 01       	movw	r22, r24
     976:	cd 01       	movw	r24, r26
     978:	9f 70       	andi	r25, 0x0F	; 15
     97a:	1d c0       	rjmp	.+58     	; 0x9b6 <__stack+0xb7>
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	18 c0       	rjmp	.+48     	; 0x9b6 <__stack+0xb7>
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	13 c0       	rjmp	.+38     	; 0x9b6 <__stack+0xb7>
	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
     990:	6f ef       	ldi	r22, 0xFF	; 255
     992:	7f ef       	ldi	r23, 0xFF	; 255
     994:	cb 01       	movw	r24, r22
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <__stack+0xb7>
     998:	6f ef       	ldi	r22, 0xFF	; 255
     99a:	7f ef       	ldi	r23, 0xFF	; 255
     99c:	cb 01       	movw	r24, r22
     99e:	0b c0       	rjmp	.+22     	; 0x9b6 <__stack+0xb7>
     9a0:	6f ef       	ldi	r22, 0xFF	; 255
     9a2:	7f ef       	ldi	r23, 0xFF	; 255
     9a4:	cb 01       	movw	r24, r22
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__stack+0xb7>
     9a8:	6f ef       	ldi	r22, 0xFF	; 255
     9aa:	7f ef       	ldi	r23, 0xFF	; 255
     9ac:	cb 01       	movw	r24, r22
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
     9b0:	6f ef       	ldi	r22, 0xFF	; 255
     9b2:	7f ef       	ldi	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	bf 90       	pop	r11
     9c6:	af 90       	pop	r10
     9c8:	7f 90       	pop	r7
     9ca:	6f 90       	pop	r6
     9cc:	5f 90       	pop	r5
     9ce:	4f 90       	pop	r4
     9d0:	08 95       	ret

000009d2 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     9d2:	2f 92       	push	r2
     9d4:	3f 92       	push	r3
     9d6:	4f 92       	push	r4
     9d8:	5f 92       	push	r5
     9da:	6f 92       	push	r6
     9dc:	7f 92       	push	r7
     9de:	8f 92       	push	r8
     9e0:	9f 92       	push	r9
     9e2:	af 92       	push	r10
     9e4:	bf 92       	push	r11
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
     9f8:	6a 01       	movw	r12, r20
     9fa:	7b 01       	movw	r14, r22
     9fc:	48 01       	movw	r8, r16
     9fe:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
     a00:	42 30       	cpi	r20, 0x02	; 2
     a02:	51 05       	cpc	r21, r1
     a04:	61 05       	cpc	r22, r1
     a06:	71 05       	cpc	r23, r1
     a08:	08 f4       	brcc	.+2      	; 0xa0c <put_fat+0x3a>
     a0a:	b6 c0       	rjmp	.+364    	; 0xb78 <put_fat+0x1a6>
     a0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a0e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a10:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a12:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a14:	48 17       	cp	r20, r24
     a16:	59 07       	cpc	r21, r25
     a18:	6a 07       	cpc	r22, r26
     a1a:	7b 07       	cpc	r23, r27
     a1c:	08 f0       	brcs	.+2      	; 0xa20 <put_fat+0x4e>
     a1e:	ae c0       	rjmp	.+348    	; 0xb7c <put_fat+0x1aa>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
     a20:	4e 8c       	ldd	r4, Y+30	; 0x1e
     a22:	5f 8c       	ldd	r5, Y+31	; 0x1f
     a24:	68 a0       	ldd	r6, Y+32	; 0x20
     a26:	79 a0       	ldd	r7, Y+33	; 0x21
		switch (fs->fs_type) {
     a28:	88 81       	ld	r24, Y
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	09 f4       	brne	.+2      	; 0xa30 <put_fat+0x5e>
     a2e:	60 c0       	rjmp	.+192    	; 0xaf0 <put_fat+0x11e>
     a30:	83 30       	cpi	r24, 0x03	; 3
     a32:	09 f4       	brne	.+2      	; 0xa36 <put_fat+0x64>
     a34:	77 c0       	rjmp	.+238    	; 0xb24 <put_fat+0x152>
     a36:	81 30       	cpi	r24, 0x01	; 1
     a38:	09 f0       	breq	.+2      	; 0xa3c <put_fat+0x6a>
     a3a:	96 c0       	rjmp	.+300    	; 0xb68 <put_fat+0x196>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
     a3c:	8a 01       	movw	r16, r20
     a3e:	16 95       	lsr	r17
     a40:	07 95       	ror	r16
     a42:	18 01       	movw	r2, r16
     a44:	24 0e       	add	r2, r20
     a46:	35 1e       	adc	r3, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
     a48:	c1 01       	movw	r24, r2
     a4a:	89 2f       	mov	r24, r25
     a4c:	99 27       	eor	r25, r25
     a4e:	86 95       	lsr	r24
     a50:	b3 01       	movw	r22, r6
     a52:	a2 01       	movw	r20, r4
     a54:	48 0f       	add	r20, r24
     a56:	59 1f       	adc	r21, r25
     a58:	61 1d       	adc	r22, r1
     a5a:	71 1d       	adc	r23, r1
     a5c:	ce 01       	movw	r24, r28
     a5e:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
     a62:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
     a64:	81 11       	cpse	r24, r1
     a66:	85 c0       	rjmp	.+266    	; 0xb72 <put_fat+0x1a0>
			p = &fs->win[bc & (SS(fs) - 1)];
     a68:	c1 01       	movw	r24, r2
     a6a:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     a6c:	c0 fe       	sbrs	r12, 0
     a6e:	22 c0       	rjmp	.+68     	; 0xab4 <put_fat+0xe2>
     a70:	fe 01       	movw	r30, r28
     a72:	e8 0f       	add	r30, r24
     a74:	f9 1f       	adc	r31, r25
     a76:	86 a5       	ldd	r24, Z+46	; 0x2e
     a78:	28 2f       	mov	r18, r24
     a7a:	2f 70       	andi	r18, 0x0F	; 15
     a7c:	30 e1       	ldi	r19, 0x10	; 16
     a7e:	83 9e       	mul	r8, r19
     a80:	c0 01       	movw	r24, r0
     a82:	11 24       	eor	r1, r1
     a84:	82 2b       	or	r24, r18
     a86:	86 a7       	std	Z+46, r24	; 0x2e
			bc++;
     a88:	71 01       	movw	r14, r2
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	e8 1a       	sub	r14, r24
     a8e:	f8 0a       	sbc	r15, r24
			fs->wflag = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     a94:	c7 01       	movw	r24, r14
     a96:	89 2f       	mov	r24, r25
     a98:	99 27       	eor	r25, r25
     a9a:	86 95       	lsr	r24
     a9c:	b3 01       	movw	r22, r6
     a9e:	a2 01       	movw	r20, r4
     aa0:	48 0f       	add	r20, r24
     aa2:	59 1f       	adc	r21, r25
     aa4:	61 1d       	adc	r22, r1
     aa6:	71 1d       	adc	r23, r1
     aa8:	ce 01       	movw	r24, r28
     aaa:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
			if (res != FR_OK) break;
     aae:	81 11       	cpse	r24, r1
     ab0:	5d c0       	rjmp	.+186    	; 0xb6c <put_fat+0x19a>
     ab2:	66 c0       	rjmp	.+204    	; 0xb80 <put_fat+0x1ae>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     ab4:	fe 01       	movw	r30, r28
     ab6:	e8 0f       	add	r30, r24
     ab8:	f9 1f       	adc	r31, r25
     aba:	86 a6       	std	Z+46, r8	; 0x2e
			bc++;
     abc:	71 01       	movw	r14, r2
     abe:	3f ef       	ldi	r19, 0xFF	; 255
     ac0:	e3 1a       	sub	r14, r19
     ac2:	f3 0a       	sbc	r15, r19
			fs->wflag = 1;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     ac8:	c7 01       	movw	r24, r14
     aca:	89 2f       	mov	r24, r25
     acc:	99 27       	eor	r25, r25
     ace:	86 95       	lsr	r24
     ad0:	b3 01       	movw	r22, r6
     ad2:	a2 01       	movw	r20, r4
     ad4:	48 0f       	add	r20, r24
     ad6:	59 1f       	adc	r21, r25
     ad8:	61 1d       	adc	r22, r1
     ada:	71 1d       	adc	r23, r1
     adc:	ce 01       	movw	r24, r28
     ade:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
			if (res != FR_OK) break;
     ae2:	81 11       	cpse	r24, r1
     ae4:	45 c0       	rjmp	.+138    	; 0xb70 <put_fat+0x19e>
     ae6:	57 c0       	rjmp	.+174    	; 0xb96 <put_fat+0x1c4>
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     ae8:	ec 0f       	add	r30, r28
     aea:	fd 1f       	adc	r31, r29
     aec:	86 a6       	std	Z+46, r8	; 0x2e
			break;
     aee:	41 c0       	rjmp	.+130    	; 0xb72 <put_fat+0x1a0>

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
     af0:	45 2f       	mov	r20, r21
     af2:	56 2f       	mov	r21, r22
     af4:	67 2f       	mov	r22, r23
     af6:	77 27       	eor	r23, r23
     af8:	44 0d       	add	r20, r4
     afa:	55 1d       	adc	r21, r5
     afc:	66 1d       	adc	r22, r6
     afe:	77 1d       	adc	r23, r7
     b00:	ce 01       	movw	r24, r28
     b02:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
     b06:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
     b08:	81 11       	cpse	r24, r1
     b0a:	33 c0       	rjmp	.+102    	; 0xb72 <put_fat+0x1a0>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
     b0c:	cc 0c       	add	r12, r12
     b0e:	dd 1c       	adc	r13, r13
     b10:	e8 94       	clt
     b12:	c0 f8       	bld	r12, 0
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	d8 22       	and	r13, r24
     b18:	fe 01       	movw	r30, r28
     b1a:	ec 0d       	add	r30, r12
     b1c:	fd 1d       	adc	r31, r13
     b1e:	86 a6       	std	Z+46, r8	; 0x2e
     b20:	97 a6       	std	Z+47, r9	; 0x2f
			break;
     b22:	27 c0       	rjmp	.+78     	; 0xb72 <put_fat+0x1a0>

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
     b24:	68 94       	set
     b26:	16 f8       	bld	r1, 6
     b28:	76 95       	lsr	r23
     b2a:	67 95       	ror	r22
     b2c:	57 95       	ror	r21
     b2e:	47 95       	ror	r20
     b30:	16 94       	lsr	r1
     b32:	d1 f7       	brne	.-12     	; 0xb28 <put_fat+0x156>
     b34:	44 0d       	add	r20, r4
     b36:	55 1d       	adc	r21, r5
     b38:	66 1d       	adc	r22, r6
     b3a:	77 1d       	adc	r23, r7
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
     b42:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
     b44:	81 11       	cpse	r24, r1
     b46:	15 c0       	rjmp	.+42     	; 0xb72 <put_fat+0x1a0>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
     b48:	cc 0c       	add	r12, r12
     b4a:	dd 1c       	adc	r13, r13
     b4c:	cc 0c       	add	r12, r12
     b4e:	dd 1c       	adc	r13, r13
     b50:	3c ef       	ldi	r19, 0xFC	; 252
     b52:	c3 22       	and	r12, r19
     b54:	31 e0       	ldi	r19, 0x01	; 1
     b56:	d3 22       	and	r13, r19
     b58:	fe 01       	movw	r30, r28
     b5a:	ec 0d       	add	r30, r12
     b5c:	fd 1d       	adc	r31, r13
     b5e:	86 a6       	std	Z+46, r8	; 0x2e
     b60:	97 a6       	std	Z+47, r9	; 0x2f
     b62:	a0 aa       	std	Z+48, r10	; 0x30
     b64:	b1 aa       	std	Z+49, r11	; 0x31
			break;
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <put_fat+0x1a0>

		default :
			res = FR_INT_ERR;
     b68:	12 e0       	ldi	r17, 0x02	; 2
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <put_fat+0x1a0>
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
     b6c:	18 2f       	mov	r17, r24
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <put_fat+0x1a0>
     b70:	18 2f       	mov	r17, r24
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	8c 83       	std	Y+4, r24	; 0x04
     b76:	1c c0       	rjmp	.+56     	; 0xbb0 <put_fat+0x1de>
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;
     b78:	12 e0       	ldi	r17, 0x02	; 2
     b7a:	1a c0       	rjmp	.+52     	; 0xbb0 <put_fat+0x1de>
     b7c:	12 e0       	ldi	r17, 0x02	; 2
     b7e:	18 c0       	rjmp	.+48     	; 0xbb0 <put_fat+0x1de>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
     b80:	f7 01       	movw	r30, r14
     b82:	f1 70       	andi	r31, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     b84:	68 94       	set
     b86:	13 f8       	bld	r1, 3
     b88:	b6 94       	lsr	r11
     b8a:	a7 94       	ror	r10
     b8c:	97 94       	ror	r9
     b8e:	87 94       	ror	r8
     b90:	16 94       	lsr	r1
     b92:	d1 f7       	brne	.-12     	; 0xb88 <put_fat+0x1b6>
     b94:	a9 cf       	rjmp	.-174    	; 0xae8 <put_fat+0x116>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
     b96:	f7 01       	movw	r30, r14
     b98:	f1 70       	andi	r31, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     b9a:	de 01       	movw	r26, r28
     b9c:	ae 0f       	add	r26, r30
     b9e:	bf 1f       	adc	r27, r31
     ba0:	9e 96       	adiw	r26, 0x2e	; 46
     ba2:	9c 91       	ld	r25, X
     ba4:	90 7f       	andi	r25, 0xF0	; 240
     ba6:	89 2d       	mov	r24, r9
     ba8:	8f 70       	andi	r24, 0x0F	; 15
     baa:	89 2e       	mov	r8, r25
     bac:	88 2a       	or	r8, r24
     bae:	9c cf       	rjmp	.-200    	; 0xae8 <put_fat+0x116>
		}
		fs->wflag = 1;
	}

	return res;
}
     bb0:	81 2f       	mov	r24, r17
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	bf 90       	pop	r11
     bc4:	af 90       	pop	r10
     bc6:	9f 90       	pop	r9
     bc8:	8f 90       	pop	r8
     bca:	7f 90       	pop	r7
     bcc:	6f 90       	pop	r6
     bce:	5f 90       	pop	r5
     bd0:	4f 90       	pop	r4
     bd2:	3f 90       	pop	r3
     bd4:	2f 90       	pop	r2
     bd6:	08 95       	ret

00000bd8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
     bd8:	2f 92       	push	r2
     bda:	3f 92       	push	r3
     bdc:	4f 92       	push	r4
     bde:	5f 92       	push	r5
     be0:	6f 92       	push	r6
     be2:	7f 92       	push	r7
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	cf 92       	push	r12
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <create_chain+0x26>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <create_chain+0x28>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <create_chain+0x2a>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	8d 83       	std	Y+5, r24	; 0x05
     c0a:	49 83       	std	Y+1, r20	; 0x01
     c0c:	5a 83       	std	Y+2, r21	; 0x02
     c0e:	6b 83       	std	Y+3, r22	; 0x03
     c10:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
     c12:	dc 01       	movw	r26, r24
     c14:	5a 96       	adiw	r26, 0x1a	; 26
     c16:	4d 90       	ld	r4, X+
     c18:	5d 90       	ld	r5, X+
     c1a:	6d 90       	ld	r6, X+
     c1c:	7c 90       	ld	r7, X
     c1e:	5d 97       	sbiw	r26, 0x1d	; 29
	if (clst == 0) {		/* Create new chain */
     c20:	45 2b       	or	r20, r21
     c22:	46 2b       	or	r20, r22
     c24:	47 2b       	or	r20, r23
     c26:	a9 f4       	brne	.+42     	; 0xc52 <create_chain+0x7a>
		scl = fs->last_clust;			/* Get suggested start point */
     c28:	1a 96       	adiw	r26, 0x0a	; 10
     c2a:	8d 90       	ld	r8, X+
     c2c:	9d 90       	ld	r9, X+
     c2e:	ad 90       	ld	r10, X+
     c30:	bc 90       	ld	r11, X
     c32:	1d 97       	sbiw	r26, 0x0d	; 13
		if (scl == 0 || scl >= mcl) scl = 1;
     c34:	81 14       	cp	r8, r1
     c36:	91 04       	cpc	r9, r1
     c38:	a1 04       	cpc	r10, r1
     c3a:	b1 04       	cpc	r11, r1
     c3c:	29 f1       	breq	.+74     	; 0xc88 <create_chain+0xb0>
     c3e:	84 14       	cp	r8, r4
     c40:	95 04       	cpc	r9, r5
     c42:	a6 04       	cpc	r10, r6
     c44:	b7 04       	cpc	r11, r7
     c46:	20 f1       	brcs	.+72     	; 0xc90 <create_chain+0xb8>
     c48:	81 2c       	mov	r8, r1
     c4a:	91 2c       	mov	r9, r1
     c4c:	54 01       	movw	r10, r8
     c4e:	83 94       	inc	r8
     c50:	1f c0       	rjmp	.+62     	; 0xc90 <create_chain+0xb8>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
     c52:	49 81       	ldd	r20, Y+1	; 0x01
     c54:	5a 81       	ldd	r21, Y+2	; 0x02
     c56:	6b 81       	ldd	r22, Y+3	; 0x03
     c58:	7c 81       	ldd	r23, Y+4	; 0x04
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
     c5c:	9e 81       	ldd	r25, Y+6	; 0x06
     c5e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <get_fat>
     c62:	6b 01       	movw	r12, r22
     c64:	7c 01       	movw	r14, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
     c66:	62 30       	cpi	r22, 0x02	; 2
     c68:	71 05       	cpc	r23, r1
     c6a:	81 05       	cpc	r24, r1
     c6c:	91 05       	cpc	r25, r1
     c6e:	08 f4       	brcc	.+2      	; 0xc72 <create_chain+0x9a>
     c70:	95 c0       	rjmp	.+298    	; 0xd9c <create_chain+0x1c4>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
     c72:	64 15       	cp	r22, r4
     c74:	75 05       	cpc	r23, r5
     c76:	86 05       	cpc	r24, r6
     c78:	97 05       	cpc	r25, r7
     c7a:	08 f4       	brcc	.+2      	; 0xc7e <create_chain+0xa6>
     c7c:	94 c0       	rjmp	.+296    	; 0xda6 <create_chain+0x1ce>
		scl = clst;
     c7e:	89 80       	ldd	r8, Y+1	; 0x01
     c80:	9a 80       	ldd	r9, Y+2	; 0x02
     c82:	ab 80       	ldd	r10, Y+3	; 0x03
     c84:	bc 80       	ldd	r11, Y+4	; 0x04
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <create_chain+0xb8>


	mcl = fs->max_clust;
	if (clst == 0) {		/* Create new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
     c88:	81 2c       	mov	r8, r1
     c8a:	91 2c       	mov	r9, r1
     c8c:	54 01       	movw	r10, r8
     c8e:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
     c90:	75 01       	movw	r14, r10
     c92:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
     c94:	12 e0       	ldi	r17, 0x02	; 2
     c96:	00 e0       	ldi	r16, 0x00	; 0
     c98:	31 2c       	mov	r3, r1
     c9a:	21 2c       	mov	r2, r1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
     c9c:	ef ef       	ldi	r30, 0xFF	; 255
     c9e:	ce 1a       	sub	r12, r30
     ca0:	de 0a       	sbc	r13, r30
     ca2:	ee 0a       	sbc	r14, r30
     ca4:	fe 0a       	sbc	r15, r30
		if (ncl >= mcl) {				/* Wrap around */
     ca6:	c4 14       	cp	r12, r4
     ca8:	d5 04       	cpc	r13, r5
     caa:	e6 04       	cpc	r14, r6
     cac:	f7 04       	cpc	r15, r7
     cae:	58 f0       	brcs	.+22     	; 0xcc6 <create_chain+0xee>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
     cb0:	f2 e0       	ldi	r31, 0x02	; 2
     cb2:	8f 16       	cp	r8, r31
     cb4:	91 04       	cpc	r9, r1
     cb6:	a1 04       	cpc	r10, r1
     cb8:	b1 04       	cpc	r11, r1
     cba:	08 f4       	brcc	.+2      	; 0xcbe <create_chain+0xe6>
     cbc:	78 c0       	rjmp	.+240    	; 0xdae <create_chain+0x1d6>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
     cbe:	c1 2e       	mov	r12, r17
     cc0:	d0 2e       	mov	r13, r16
     cc2:	e3 2c       	mov	r14, r3
     cc4:	f2 2c       	mov	r15, r2
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     cc6:	b7 01       	movw	r22, r14
     cc8:	a6 01       	movw	r20, r12
     cca:	8d 81       	ldd	r24, Y+5	; 0x05
     ccc:	9e 81       	ldd	r25, Y+6	; 0x06
     cce:	0e 94 f6 03 	call	0x7ec	; 0x7ec <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
     cd2:	61 15       	cp	r22, r1
     cd4:	71 05       	cpc	r23, r1
     cd6:	81 05       	cpc	r24, r1
     cd8:	91 05       	cpc	r25, r1
     cda:	99 f0       	breq	.+38     	; 0xd02 <create_chain+0x12a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
     cdc:	6f 3f       	cpi	r22, 0xFF	; 255
     cde:	2f ef       	ldi	r18, 0xFF	; 255
     ce0:	72 07       	cpc	r23, r18
     ce2:	82 07       	cpc	r24, r18
     ce4:	92 07       	cpc	r25, r18
     ce6:	09 f4       	brne	.+2      	; 0xcea <create_chain+0x112>
     ce8:	67 c0       	rjmp	.+206    	; 0xdb8 <create_chain+0x1e0>
     cea:	61 30       	cpi	r22, 0x01	; 1
     cec:	71 05       	cpc	r23, r1
     cee:	81 05       	cpc	r24, r1
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <create_chain+0x11e>
     cf4:	66 c0       	rjmp	.+204    	; 0xdc2 <create_chain+0x1ea>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     cf6:	c8 14       	cp	r12, r8
     cf8:	d9 04       	cpc	r13, r9
     cfa:	ea 04       	cpc	r14, r10
     cfc:	fb 04       	cpc	r15, r11
     cfe:	71 f6       	brne	.-100    	; 0xc9c <create_chain+0xc4>
     d00:	65 c0       	rjmp	.+202    	; 0xdcc <create_chain+0x1f4>
     d02:	8c 2c       	mov	r8, r12
     d04:	9d 2c       	mov	r9, r13
     d06:	ae 2c       	mov	r10, r14
     d08:	bf 2c       	mov	r11, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
     d0a:	0f ef       	ldi	r16, 0xFF	; 255
     d0c:	1f ef       	ldi	r17, 0xFF	; 255
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	3f e0       	ldi	r19, 0x0F	; 15
     d12:	b7 01       	movw	r22, r14
     d14:	a6 01       	movw	r20, r12
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <put_fat>
     d1e:	81 11       	cpse	r24, r1
     d20:	5a c0       	rjmp	.+180    	; 0xdd6 <create_chain+0x1fe>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	ab 81       	ldd	r26, Y+3	; 0x03
     d28:	bc 81       	ldd	r27, Y+4	; 0x04
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	a1 05       	cpc	r26, r1
     d2e:	b1 05       	cpc	r27, r1
     d30:	61 f0       	breq	.+24     	; 0xd4a <create_chain+0x172>
		if (put_fat(fs, clst, ncl))
     d32:	0c 2d       	mov	r16, r12
     d34:	1d 2d       	mov	r17, r13
     d36:	2e 2d       	mov	r18, r14
     d38:	3f 2d       	mov	r19, r15
     d3a:	ac 01       	movw	r20, r24
     d3c:	bd 01       	movw	r22, r26
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <put_fat>
     d46:	81 11       	cpse	r24, r1
     d48:	4b c0       	rjmp	.+150    	; 0xde0 <create_chain+0x208>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
     d4a:	ad 81       	ldd	r26, Y+5	; 0x05
     d4c:	be 81       	ldd	r27, Y+6	; 0x06
     d4e:	1a 96       	adiw	r26, 0x0a	; 10
     d50:	8c 92       	st	X, r8
     d52:	1a 97       	sbiw	r26, 0x0a	; 10
     d54:	1b 96       	adiw	r26, 0x0b	; 11
     d56:	9c 92       	st	X, r9
     d58:	1b 97       	sbiw	r26, 0x0b	; 11
     d5a:	1c 96       	adiw	r26, 0x0c	; 12
     d5c:	ac 92       	st	X, r10
     d5e:	1c 97       	sbiw	r26, 0x0c	; 12
     d60:	1d 96       	adiw	r26, 0x0d	; 13
     d62:	bc 92       	st	X, r11
     d64:	1d 97       	sbiw	r26, 0x0d	; 13
	if (fs->free_clust != 0xFFFFFFFF) {
     d66:	fd 01       	movw	r30, r26
     d68:	86 85       	ldd	r24, Z+14	; 0x0e
     d6a:	97 85       	ldd	r25, Z+15	; 0x0f
     d6c:	a0 89       	ldd	r26, Z+16	; 0x10
     d6e:	b1 89       	ldd	r27, Z+17	; 0x11
     d70:	8f 3f       	cpi	r24, 0xFF	; 255
     d72:	ff ef       	ldi	r31, 0xFF	; 255
     d74:	9f 07       	cpc	r25, r31
     d76:	af 07       	cpc	r26, r31
     d78:	bf 07       	cpc	r27, r31
     d7a:	59 f0       	breq	.+22     	; 0xd92 <create_chain+0x1ba>
		fs->free_clust--;
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	a1 09       	sbc	r26, r1
     d80:	b1 09       	sbc	r27, r1
     d82:	ed 81       	ldd	r30, Y+5	; 0x05
     d84:	fe 81       	ldd	r31, Y+6	; 0x06
     d86:	86 87       	std	Z+14, r24	; 0x0e
     d88:	97 87       	std	Z+15, r25	; 0x0f
     d8a:	a0 8b       	std	Z+16, r26	; 0x10
     d8c:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	85 83       	std	Z+5, r24	; 0x05
	}

	return ncl;		/* Return new cluster number */
     d92:	6c 2d       	mov	r22, r12
     d94:	7d 2d       	mov	r23, r13
     d96:	8e 2d       	mov	r24, r14
     d98:	9f 2d       	mov	r25, r15
     d9a:	26 c0       	rjmp	.+76     	; 0xde8 <create_chain+0x210>
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	21 c0       	rjmp	.+66     	; 0xde8 <create_chain+0x210>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
     da6:	7d 2d       	mov	r23, r13
     da8:	8e 2d       	mov	r24, r14
     daa:	9f 2d       	mov	r25, r15
     dac:	1d c0       	rjmp	.+58     	; 0xde8 <create_chain+0x210>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	18 c0       	rjmp	.+48     	; 0xde8 <create_chain+0x210>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     db8:	6f ef       	ldi	r22, 0xFF	; 255
     dba:	7f ef       	ldi	r23, 0xFF	; 255
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	9f ef       	ldi	r25, 0xFF	; 255
     dc0:	13 c0       	rjmp	.+38     	; 0xde8 <create_chain+0x210>
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e c0       	rjmp	.+28     	; 0xde8 <create_chain+0x210>
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	09 c0       	rjmp	.+18     	; 0xde8 <create_chain+0x210>
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
		return 0xFFFFFFFF;
     dd6:	6f ef       	ldi	r22, 0xFF	; 255
     dd8:	7f ef       	ldi	r23, 0xFF	; 255
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <create_chain+0x210>
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
     de0:	6f ef       	ldi	r22, 0xFF	; 255
     de2:	7f ef       	ldi	r23, 0xFF	; 255
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	9f ef       	ldi	r25, 0xFF	; 255
		fs->free_clust--;
		fs->fsi_flag = 1;
	}

	return ncl;		/* Return new cluster number */
}
     de8:	26 96       	adiw	r28, 0x06	; 6
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	7f 90       	pop	r7
     e0e:	6f 90       	pop	r6
     e10:	5f 90       	pop	r5
     e12:	4f 90       	pop	r4
     e14:	3f 90       	pop	r3
     e16:	2f 90       	pop	r2
     e18:	08 95       	ret

00000e1a <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
     e1a:	7f 92       	push	r7
     e1c:	8f 92       	push	r8
     e1e:	9f 92       	push	r9
     e20:	af 92       	push	r10
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ec 01       	movw	r28, r24
     e36:	6a 01       	movw	r12, r20
     e38:	7b 01       	movw	r14, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
     e3a:	42 30       	cpi	r20, 0x02	; 2
     e3c:	51 05       	cpc	r21, r1
     e3e:	61 05       	cpc	r22, r1
     e40:	71 05       	cpc	r23, r1
     e42:	08 f4       	brcc	.+2      	; 0xe46 <remove_chain+0x2c>
     e44:	4d c0       	rjmp	.+154    	; 0xee0 <remove_chain+0xc6>
     e46:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e48:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e4a:	ac 8d       	ldd	r26, Y+28	; 0x1c
     e4c:	bd 8d       	ldd	r27, Y+29	; 0x1d
     e4e:	48 17       	cp	r20, r24
     e50:	59 07       	cpc	r21, r25
     e52:	6a 07       	cpc	r22, r26
     e54:	7b 07       	cpc	r23, r27
     e56:	08 f0       	brcs	.+2      	; 0xe5a <remove_chain+0x40>
     e58:	45 c0       	rjmp	.+138    	; 0xee4 <remove_chain+0xca>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
     e5a:	77 24       	eor	r7, r7
     e5c:	73 94       	inc	r7
     e5e:	35 c0       	rjmp	.+106    	; 0xeca <remove_chain+0xb0>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
     e60:	b7 01       	movw	r22, r14
     e62:	a6 01       	movw	r20, r12
     e64:	ce 01       	movw	r24, r28
     e66:	0e 94 f6 03 	call	0x7ec	; 0x7ec <get_fat>
     e6a:	4b 01       	movw	r8, r22
     e6c:	5c 01       	movw	r10, r24
			if (nxt == 0) break;				/* Empty cluster? */
     e6e:	67 2b       	or	r22, r23
     e70:	68 2b       	or	r22, r24
     e72:	69 2b       	or	r22, r25
     e74:	c9 f1       	breq	.+114    	; 0xee8 <remove_chain+0xce>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	88 16       	cp	r8, r24
     e7a:	91 04       	cpc	r9, r1
     e7c:	a1 04       	cpc	r10, r1
     e7e:	b1 04       	cpc	r11, r1
     e80:	a9 f1       	breq	.+106    	; 0xeec <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
     e82:	2f ef       	ldi	r18, 0xFF	; 255
     e84:	82 16       	cp	r8, r18
     e86:	92 06       	cpc	r9, r18
     e88:	a2 06       	cpc	r10, r18
     e8a:	b2 06       	cpc	r11, r18
     e8c:	89 f1       	breq	.+98     	; 0xef0 <remove_chain+0xd6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
     e8e:	00 e0       	ldi	r16, 0x00	; 0
     e90:	10 e0       	ldi	r17, 0x00	; 0
     e92:	98 01       	movw	r18, r16
     e94:	b7 01       	movw	r22, r14
     e96:	a6 01       	movw	r20, r12
     e98:	ce 01       	movw	r24, r28
     e9a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <put_fat>
			if (res != FR_OK) break;
     e9e:	81 11       	cpse	r24, r1
     ea0:	28 c0       	rjmp	.+80     	; 0xef2 <remove_chain+0xd8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
     ea2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ea4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ea6:	a8 89       	ldd	r26, Y+16	; 0x10
     ea8:	b9 89       	ldd	r27, Y+17	; 0x11
     eaa:	8f 3f       	cpi	r24, 0xFF	; 255
     eac:	2f ef       	ldi	r18, 0xFF	; 255
     eae:	92 07       	cpc	r25, r18
     eb0:	a2 07       	cpc	r26, r18
     eb2:	b2 07       	cpc	r27, r18
     eb4:	41 f0       	breq	.+16     	; 0xec6 <remove_chain+0xac>
				fs->free_clust++;
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	a1 1d       	adc	r26, r1
     eba:	b1 1d       	adc	r27, r1
     ebc:	8e 87       	std	Y+14, r24	; 0x0e
     ebe:	9f 87       	std	Y+15, r25	; 0x0f
     ec0:	a8 8b       	std	Y+16, r26	; 0x10
     ec2:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
     ec4:	7d 82       	std	Y+5, r7	; 0x05
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
     ec6:	75 01       	movw	r14, r10
     ec8:	64 01       	movw	r12, r8
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
     eca:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ecc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ece:	ac 8d       	ldd	r26, Y+28	; 0x1c
     ed0:	bd 8d       	ldd	r27, Y+29	; 0x1d
     ed2:	c8 16       	cp	r12, r24
     ed4:	d9 06       	cpc	r13, r25
     ed6:	ea 06       	cpc	r14, r26
     ed8:	fb 06       	cpc	r15, r27
     eda:	10 f2       	brcs	.-124    	; 0xe60 <remove_chain+0x46>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <remove_chain+0xd8>
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <remove_chain+0xd8>
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <remove_chain+0xd8>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <remove_chain+0xd8>
	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
     ef0:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	bf 90       	pop	r11
     f04:	af 90       	pop	r10
     f06:	9f 90       	pop	r9
     f08:	8f 90       	pop	r8
     f0a:	7f 90       	pop	r7
     f0c:	08 95       	ret

00000f0e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	fc 01       	movw	r30, r24
	clst -= 2;
     f18:	9a 01       	movw	r18, r20
     f1a:	ab 01       	movw	r20, r22
     f1c:	22 50       	subi	r18, 0x02	; 2
     f1e:	31 09       	sbc	r19, r1
     f20:	41 09       	sbc	r20, r1
     f22:	51 09       	sbc	r21, r1
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     f24:	c2 8c       	ldd	r12, Z+26	; 0x1a
     f26:	d3 8c       	ldd	r13, Z+27	; 0x1b
     f28:	e4 8c       	ldd	r14, Z+28	; 0x1c
     f2a:	f5 8c       	ldd	r15, Z+29	; 0x1d
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	c8 1a       	sub	r12, r24
     f30:	d1 08       	sbc	r13, r1
     f32:	e1 08       	sbc	r14, r1
     f34:	f1 08       	sbc	r15, r1
     f36:	2c 15       	cp	r18, r12
     f38:	3d 05       	cpc	r19, r13
     f3a:	4e 05       	cpc	r20, r14
     f3c:	5f 05       	cpc	r21, r15
     f3e:	68 f4       	brcc	.+26     	; 0xf5a <clust2sect+0x4c>
	return clst * fs->csize + fs->database;
     f40:	a2 81       	ldd	r26, Z+2	; 0x02
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	0e 94 b1 1b 	call	0x3762	; 0x3762 <__muluhisi3>
     f48:	c6 a0       	ldd	r12, Z+38	; 0x26
     f4a:	d7 a0       	ldd	r13, Z+39	; 0x27
     f4c:	e0 a4       	ldd	r14, Z+40	; 0x28
     f4e:	f1 a4       	ldd	r15, Z+41	; 0x29
     f50:	6c 0d       	add	r22, r12
     f52:	7d 1d       	adc	r23, r13
     f54:	8e 1d       	adc	r24, r14
     f56:	9f 1d       	adc	r25, r15
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <clust2sect+0x52>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	cb 01       	movw	r24, r22
	return clst * fs->csize + fs->database;
}
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	08 95       	ret

00000f6a <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
     f7a:	7d 83       	std	Y+5, r23	; 0x05
     f7c:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
     f7e:	4e 81       	ldd	r20, Y+6	; 0x06
     f80:	5f 81       	ldd	r21, Y+7	; 0x07
     f82:	68 85       	ldd	r22, Y+8	; 0x08
     f84:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
     f86:	41 30       	cpi	r20, 0x01	; 1
     f88:	51 05       	cpc	r21, r1
     f8a:	61 05       	cpc	r22, r1
     f8c:	71 05       	cpc	r23, r1
     f8e:	09 f4       	brne	.+2      	; 0xf92 <dir_seek+0x28>
     f90:	93 c0       	rjmp	.+294    	; 0x10b8 <dir_seek+0x14e>
     f92:	e8 81       	ld	r30, Y
     f94:	f9 81       	ldd	r31, Y+1	; 0x01
     f96:	82 8d       	ldd	r24, Z+26	; 0x1a
     f98:	93 8d       	ldd	r25, Z+27	; 0x1b
     f9a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     f9c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     f9e:	48 17       	cp	r20, r24
     fa0:	59 07       	cpc	r21, r25
     fa2:	6a 07       	cpc	r22, r26
     fa4:	7b 07       	cpc	r23, r27
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <dir_seek+0x40>
     fa8:	89 c0       	rjmp	.+274    	; 0x10bc <dir_seek+0x152>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     faa:	41 15       	cp	r20, r1
     fac:	51 05       	cpc	r21, r1
     fae:	61 05       	cpc	r22, r1
     fb0:	71 05       	cpc	r23, r1
     fb2:	51 f5       	brne	.+84     	; 0x1008 <dir_seek+0x9e>
     fb4:	80 81       	ld	r24, Z
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	49 f4       	brne	.+18     	; 0xfcc <dir_seek+0x62>
		clst = dj->fs->dirbase;
     fba:	42 a1       	ldd	r20, Z+34	; 0x22
     fbc:	53 a1       	ldd	r21, Z+35	; 0x23
     fbe:	64 a1       	ldd	r22, Z+36	; 0x24
     fc0:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
     fc2:	41 15       	cp	r20, r1
     fc4:	51 05       	cpc	r21, r1
     fc6:	61 05       	cpc	r22, r1
     fc8:	71 05       	cpc	r23, r1
     fca:	f1 f4       	brne	.+60     	; 0x1008 <dir_seek+0x9e>
		dj->clust = clst;
     fcc:	1a 86       	std	Y+10, r1	; 0x0a
     fce:	1b 86       	std	Y+11, r1	; 0x0b
     fd0:	1c 86       	std	Y+12, r1	; 0x0c
     fd2:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
     fd4:	80 85       	ldd	r24, Z+8	; 0x08
     fd6:	91 85       	ldd	r25, Z+9	; 0x09
     fd8:	08 17       	cp	r16, r24
     fda:	19 07       	cpc	r17, r25
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <dir_seek+0x76>
     fde:	70 c0       	rjmp	.+224    	; 0x10c0 <dir_seek+0x156>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
     fe0:	82 a1       	ldd	r24, Z+34	; 0x22
     fe2:	93 a1       	ldd	r25, Z+35	; 0x23
     fe4:	a4 a1       	ldd	r26, Z+36	; 0x24
     fe6:	b5 a1       	ldd	r27, Z+37	; 0x25
     fe8:	98 01       	movw	r18, r16
     fea:	32 95       	swap	r19
     fec:	22 95       	swap	r18
     fee:	2f 70       	andi	r18, 0x0F	; 15
     ff0:	23 27       	eor	r18, r19
     ff2:	3f 70       	andi	r19, 0x0F	; 15
     ff4:	23 27       	eor	r18, r19
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	a1 1d       	adc	r26, r1
     ffc:	b1 1d       	adc	r27, r1
     ffe:	8e 87       	std	Y+14, r24	; 0x0e
    1000:	9f 87       	std	Y+15, r25	; 0x0f
    1002:	a8 8b       	std	Y+16, r26	; 0x10
    1004:	b9 8b       	std	Y+17, r27	; 0x11
    1006:	44 c0       	rjmp	.+136    	; 0x1090 <dir_seek+0x126>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1008:	e2 80       	ldd	r14, Z+2	; 0x02
    100a:	80 e1       	ldi	r24, 0x10	; 16
    100c:	e8 9e       	mul	r14, r24
    100e:	70 01       	movw	r14, r0
    1010:	11 24       	eor	r1, r1
		while (idx >= ic) {	/* Follow cluster chain */
    1012:	0e 15       	cp	r16, r14
    1014:	1f 05       	cpc	r17, r15
    1016:	18 f1       	brcs	.+70     	; 0x105e <dir_seek+0xf4>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1018:	88 81       	ld	r24, Y
    101a:	99 81       	ldd	r25, Y+1	; 0x01
    101c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <get_fat>
    1020:	ab 01       	movw	r20, r22
    1022:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1024:	4f 3f       	cpi	r20, 0xFF	; 255
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	58 07       	cpc	r21, r24
    102a:	68 07       	cpc	r22, r24
    102c:	78 07       	cpc	r23, r24
    102e:	09 f4       	brne	.+2      	; 0x1032 <dir_seek+0xc8>
    1030:	49 c0       	rjmp	.+146    	; 0x10c4 <dir_seek+0x15a>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1032:	42 30       	cpi	r20, 0x02	; 2
    1034:	51 05       	cpc	r21, r1
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	08 f4       	brcc	.+2      	; 0x103e <dir_seek+0xd4>
    103c:	45 c0       	rjmp	.+138    	; 0x10c8 <dir_seek+0x15e>
    103e:	e8 81       	ld	r30, Y
    1040:	f9 81       	ldd	r31, Y+1	; 0x01
    1042:	82 8d       	ldd	r24, Z+26	; 0x1a
    1044:	93 8d       	ldd	r25, Z+27	; 0x1b
    1046:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1048:	b5 8d       	ldd	r27, Z+29	; 0x1d
    104a:	48 17       	cp	r20, r24
    104c:	59 07       	cpc	r21, r25
    104e:	6a 07       	cpc	r22, r26
    1050:	7b 07       	cpc	r23, r27
    1052:	e0 f5       	brcc	.+120    	; 0x10cc <dir_seek+0x162>
				return FR_INT_ERR;
			idx -= ic;
    1054:	0e 19       	sub	r16, r14
    1056:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1058:	0e 15       	cp	r16, r14
    105a:	1f 05       	cpc	r17, r15
    105c:	e8 f6       	brcc	.-70     	; 0x1018 <dir_seek+0xae>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    105e:	4a 87       	std	Y+10, r20	; 0x0a
    1060:	5b 87       	std	Y+11, r21	; 0x0b
    1062:	6c 87       	std	Y+12, r22	; 0x0c
    1064:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1066:	88 81       	ld	r24, Y
    1068:	99 81       	ldd	r25, Y+1	; 0x01
    106a:	0e 94 87 07 	call	0xf0e	; 0xf0e <clust2sect>
    106e:	98 01       	movw	r18, r16
    1070:	32 95       	swap	r19
    1072:	22 95       	swap	r18
    1074:	2f 70       	andi	r18, 0x0F	; 15
    1076:	23 27       	eor	r18, r19
    1078:	3f 70       	andi	r19, 0x0F	; 15
    107a:	23 27       	eor	r18, r19
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	82 0f       	add	r24, r18
    1082:	93 1f       	adc	r25, r19
    1084:	a1 1d       	adc	r26, r1
    1086:	b1 1d       	adc	r27, r1
    1088:	8e 87       	std	Y+14, r24	; 0x0e
    108a:	9f 87       	std	Y+15, r25	; 0x0f
    108c:	a8 8b       	std	Y+16, r26	; 0x10
    108e:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1090:	0f 70       	andi	r16, 0x0F	; 15
    1092:	11 27       	eor	r17, r17
    1094:	00 0f       	add	r16, r16
    1096:	11 1f       	adc	r17, r17
    1098:	02 95       	swap	r16
    109a:	12 95       	swap	r17
    109c:	10 7f       	andi	r17, 0xF0	; 240
    109e:	10 27       	eor	r17, r16
    10a0:	00 7f       	andi	r16, 0xF0	; 240
    10a2:	10 27       	eor	r17, r16
    10a4:	02 5d       	subi	r16, 0xD2	; 210
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	88 81       	ld	r24, Y
    10aa:	99 81       	ldd	r25, Y+1	; 0x01
    10ac:	08 0f       	add	r16, r24
    10ae:	19 1f       	adc	r17, r25
    10b0:	1b 8b       	std	Y+19, r17	; 0x13
    10b2:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;	/* Seek succeeded */
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <dir_seek+0x164>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
		return FR_INT_ERR;
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <dir_seek+0x164>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <dir_seek+0x164>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <dir_seek+0x164>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <dir_seek+0x164>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <dir_seek+0x164>
    10cc:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	08 95       	ret

000010dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    10dc:	4f 92       	push	r4
    10de:	5f 92       	push	r5
    10e0:	6f 92       	push	r6
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    10fa:	dc 01       	movw	r26, r24
    10fc:	14 96       	adiw	r26, 0x04	; 4
    10fe:	cd 91       	ld	r28, X+
    1100:	dc 91       	ld	r29, X
    1102:	15 97       	sbiw	r26, 0x05	; 5
    1104:	21 96       	adiw	r28, 0x01	; 1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1106:	09 f4       	brne	.+2      	; 0x110a <dir_next+0x2e>
    1108:	08 c1       	rjmp	.+528    	; 0x131a <dir_next+0x23e>
    110a:	1e 96       	adiw	r26, 0x0e	; 14
    110c:	8d 90       	ld	r8, X+
    110e:	9d 90       	ld	r9, X+
    1110:	ad 90       	ld	r10, X+
    1112:	bc 90       	ld	r11, X
    1114:	51 97       	sbiw	r26, 0x11	; 17
    1116:	81 14       	cp	r8, r1
    1118:	91 04       	cpc	r9, r1
    111a:	a1 04       	cpc	r10, r1
    111c:	b1 04       	cpc	r11, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <dir_next+0x46>
    1120:	fe c0       	rjmp	.+508    	; 0x131e <dir_next+0x242>
    1122:	f6 2e       	mov	r15, r22
    1124:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1126:	6e 01       	movw	r12, r28
    1128:	bf e0       	ldi	r27, 0x0F	; 15
    112a:	cb 22       	and	r12, r27
    112c:	dd 24       	eor	r13, r13
    112e:	c1 14       	cp	r12, r1
    1130:	d1 04       	cpc	r13, r1
    1132:	09 f0       	breq	.+2      	; 0x1136 <dir_next+0x5a>
    1134:	d6 c0       	rjmp	.+428    	; 0x12e2 <dir_next+0x206>
		dj->sect++;					/* Next sector */
    1136:	ef ef       	ldi	r30, 0xFF	; 255
    1138:	8e 1a       	sub	r8, r30
    113a:	9e 0a       	sbc	r9, r30
    113c:	ae 0a       	sbc	r10, r30
    113e:	be 0a       	sbc	r11, r30
    1140:	dc 01       	movw	r26, r24
    1142:	1e 96       	adiw	r26, 0x0e	; 14
    1144:	8d 92       	st	X+, r8
    1146:	9d 92       	st	X+, r9
    1148:	ad 92       	st	X+, r10
    114a:	bc 92       	st	X, r11
    114c:	51 97       	sbiw	r26, 0x11	; 17

		if (dj->clust == 0) {	/* Static table */
    114e:	1a 96       	adiw	r26, 0x0a	; 10
    1150:	4d 91       	ld	r20, X+
    1152:	5d 91       	ld	r21, X+
    1154:	6d 91       	ld	r22, X+
    1156:	7c 91       	ld	r23, X
    1158:	1d 97       	sbiw	r26, 0x0d	; 13
    115a:	41 15       	cp	r20, r1
    115c:	51 05       	cpc	r21, r1
    115e:	61 05       	cpc	r22, r1
    1160:	71 05       	cpc	r23, r1
    1162:	49 f4       	brne	.+18     	; 0x1176 <dir_next+0x9a>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1164:	ed 91       	ld	r30, X+
    1166:	fc 91       	ld	r31, X
    1168:	80 85       	ldd	r24, Z+8	; 0x08
    116a:	91 85       	ldd	r25, Z+9	; 0x09
    116c:	c8 17       	cp	r28, r24
    116e:	d9 07       	cpc	r29, r25
    1170:	08 f0       	brcs	.+2      	; 0x1174 <dir_next+0x98>
    1172:	d7 c0       	rjmp	.+430    	; 0x1322 <dir_next+0x246>
    1174:	b6 c0       	rjmp	.+364    	; 0x12e2 <dir_next+0x206>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1176:	dc 01       	movw	r26, r24
    1178:	ed 91       	ld	r30, X+
    117a:	fc 91       	ld	r31, X
    117c:	22 81       	ldd	r18, Z+2	; 0x02
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	21 50       	subi	r18, 0x01	; 1
    1182:	31 09       	sbc	r19, r1
    1184:	ce 01       	movw	r24, r28
    1186:	92 95       	swap	r25
    1188:	82 95       	swap	r24
    118a:	8f 70       	andi	r24, 0x0F	; 15
    118c:	89 27       	eor	r24, r25
    118e:	9f 70       	andi	r25, 0x0F	; 15
    1190:	89 27       	eor	r24, r25
    1192:	28 23       	and	r18, r24
    1194:	39 23       	and	r19, r25
    1196:	23 2b       	or	r18, r19
    1198:	09 f0       	breq	.+2      	; 0x119c <dir_next+0xc0>
    119a:	a3 c0       	rjmp	.+326    	; 0x12e2 <dir_next+0x206>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    119c:	cf 01       	movw	r24, r30
    119e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <get_fat>
    11a2:	2b 01       	movw	r4, r22
    11a4:	3c 01       	movw	r6, r24
				if (clst <= 1) return FR_INT_ERR;
    11a6:	62 30       	cpi	r22, 0x02	; 2
    11a8:	71 05       	cpc	r23, r1
    11aa:	81 05       	cpc	r24, r1
    11ac:	91 05       	cpc	r25, r1
    11ae:	08 f4       	brcc	.+2      	; 0x11b2 <dir_next+0xd6>
    11b0:	ba c0       	rjmp	.+372    	; 0x1326 <dir_next+0x24a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    11b2:	6f 3f       	cpi	r22, 0xFF	; 255
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	8f 4f       	sbci	r24, 0xFF	; 255
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	09 f4       	brne	.+2      	; 0x11be <dir_next+0xe2>
    11bc:	b6 c0       	rjmp	.+364    	; 0x132a <dir_next+0x24e>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    11be:	d8 01       	movw	r26, r16
    11c0:	ed 91       	ld	r30, X+
    11c2:	fc 91       	ld	r31, X
    11c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    11c6:	93 8d       	ldd	r25, Z+27	; 0x1b
    11c8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    11ca:	b5 8d       	ldd	r27, Z+29	; 0x1d
    11cc:	48 16       	cp	r4, r24
    11ce:	59 06       	cpc	r5, r25
    11d0:	6a 06       	cpc	r6, r26
    11d2:	7b 06       	cpc	r7, r27
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <dir_next+0xfc>
    11d6:	73 c0       	rjmp	.+230    	; 0x12be <dir_next+0x1e2>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    11d8:	ff 20       	and	r15, r15
    11da:	09 f4       	brne	.+2      	; 0x11de <dir_next+0x102>
    11dc:	a8 c0       	rjmp	.+336    	; 0x132e <dir_next+0x252>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    11de:	d8 01       	movw	r26, r16
    11e0:	1a 96       	adiw	r26, 0x0a	; 10
    11e2:	4d 91       	ld	r20, X+
    11e4:	5d 91       	ld	r21, X+
    11e6:	6d 91       	ld	r22, X+
    11e8:	7c 91       	ld	r23, X
    11ea:	1d 97       	sbiw	r26, 0x0d	; 13
    11ec:	cf 01       	movw	r24, r30
    11ee:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <create_chain>
    11f2:	2b 01       	movw	r4, r22
    11f4:	3c 01       	movw	r6, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    11f6:	61 15       	cp	r22, r1
    11f8:	71 05       	cpc	r23, r1
    11fa:	81 05       	cpc	r24, r1
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <dir_next+0x126>
    1200:	98 c0       	rjmp	.+304    	; 0x1332 <dir_next+0x256>
					if (clst == 1) return FR_INT_ERR;
    1202:	61 30       	cpi	r22, 0x01	; 1
    1204:	71 05       	cpc	r23, r1
    1206:	81 05       	cpc	r24, r1
    1208:	91 05       	cpc	r25, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <dir_next+0x132>
    120c:	94 c0       	rjmp	.+296    	; 0x1336 <dir_next+0x25a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    120e:	6f 3f       	cpi	r22, 0xFF	; 255
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	8f 4f       	sbci	r24, 0xFF	; 255
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	09 f4       	brne	.+2      	; 0x121a <dir_next+0x13e>
    1218:	90 c0       	rjmp	.+288    	; 0x133a <dir_next+0x25e>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	ba 01       	movw	r22, r20
    1220:	d8 01       	movw	r26, r16
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
    122a:	81 11       	cpse	r24, r1
    122c:	88 c0       	rjmp	.+272    	; 0x133e <dir_next+0x262>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    122e:	f8 01       	movw	r30, r16
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	fc 01       	movw	r30, r24
    1236:	be 96       	adiw	r30, 0x2e	; 46
    1238:	82 5d       	subi	r24, 0xD2	; 210
    123a:	9d 4f       	sbci	r25, 0xFD	; 253

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    123c:	11 92       	st	Z+, r1
    123e:	e8 17       	cp	r30, r24
    1240:	f9 07       	cpc	r31, r25
    1242:	e1 f7       	brne	.-8      	; 0x123c <dir_next+0x160>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1244:	d8 01       	movw	r26, r16
    1246:	ad 90       	ld	r10, X+
    1248:	bc 90       	ld	r11, X
    124a:	b3 01       	movw	r22, r6
    124c:	a2 01       	movw	r20, r4
    124e:	c5 01       	movw	r24, r10
    1250:	0e 94 87 07 	call	0xf0e	; 0xf0e <clust2sect>
    1254:	f5 01       	movw	r30, r10
    1256:	62 a7       	std	Z+42, r22	; 0x2a
    1258:	73 a7       	std	Z+43, r23	; 0x2b
    125a:	84 a7       	std	Z+44, r24	; 0x2c
    125c:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    125e:	f1 2c       	mov	r15, r1
						dj->fs->wflag = 1;
    1260:	bb 24       	eor	r11, r11
    1262:	b3 94       	inc	r11
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1264:	1a c0       	rjmp	.+52     	; 0x129a <dir_next+0x1be>
						dj->fs->wflag = 1;
    1266:	b4 82       	std	Z+4, r11	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	ba 01       	movw	r22, r20
    126e:	d8 01       	movw	r26, r16
    1270:	8d 91       	ld	r24, X+
    1272:	9c 91       	ld	r25, X
    1274:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
    1278:	81 11       	cpse	r24, r1
    127a:	63 c0       	rjmp	.+198    	; 0x1342 <dir_next+0x266>
						dj->fs->winsect++;
    127c:	d8 01       	movw	r26, r16
    127e:	ed 91       	ld	r30, X+
    1280:	fc 91       	ld	r31, X
    1282:	82 a5       	ldd	r24, Z+42	; 0x2a
    1284:	93 a5       	ldd	r25, Z+43	; 0x2b
    1286:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1288:	b5 a5       	ldd	r27, Z+45	; 0x2d
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	a1 1d       	adc	r26, r1
    128e:	b1 1d       	adc	r27, r1
    1290:	82 a7       	std	Z+42, r24	; 0x2a
    1292:	93 a7       	std	Z+43, r25	; 0x2b
    1294:	a4 a7       	std	Z+44, r26	; 0x2c
    1296:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1298:	f3 94       	inc	r15
    129a:	d8 01       	movw	r26, r16
    129c:	ed 91       	ld	r30, X+
    129e:	fc 91       	ld	r31, X
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	f8 16       	cp	r15, r24
    12a4:	00 f3       	brcs	.-64     	; 0x1266 <dir_next+0x18a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    12a6:	82 a5       	ldd	r24, Z+42	; 0x2a
    12a8:	93 a5       	ldd	r25, Z+43	; 0x2b
    12aa:	a4 a5       	ldd	r26, Z+44	; 0x2c
    12ac:	b5 a5       	ldd	r27, Z+45	; 0x2d
    12ae:	8f 19       	sub	r24, r15
    12b0:	91 09       	sbc	r25, r1
    12b2:	a1 09       	sbc	r26, r1
    12b4:	b1 09       	sbc	r27, r1
    12b6:	82 a7       	std	Z+42, r24	; 0x2a
    12b8:	93 a7       	std	Z+43, r25	; 0x2b
    12ba:	a4 a7       	std	Z+44, r26	; 0x2c
    12bc:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    12be:	f8 01       	movw	r30, r16
    12c0:	42 86       	std	Z+10, r4	; 0x0a
    12c2:	53 86       	std	Z+11, r5	; 0x0b
    12c4:	64 86       	std	Z+12, r6	; 0x0c
    12c6:	75 86       	std	Z+13, r7	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    12c8:	b3 01       	movw	r22, r6
    12ca:	a2 01       	movw	r20, r4
    12cc:	80 81       	ld	r24, Z
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	0e 94 87 07 	call	0xf0e	; 0xf0e <clust2sect>
    12d4:	d8 01       	movw	r26, r16
    12d6:	1e 96       	adiw	r26, 0x0e	; 14
    12d8:	6d 93       	st	X+, r22
    12da:	7d 93       	st	X+, r23
    12dc:	8d 93       	st	X+, r24
    12de:	9c 93       	st	X, r25
    12e0:	51 97       	sbiw	r26, 0x11	; 17
			}
		}
	}

	dj->index = i;
    12e2:	f8 01       	movw	r30, r16
    12e4:	d5 83       	std	Z+5, r29	; 0x05
    12e6:	c4 83       	std	Z+4, r28	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    12e8:	cc 0c       	add	r12, r12
    12ea:	dd 1c       	adc	r13, r13
    12ec:	cc 0c       	add	r12, r12
    12ee:	dd 1c       	adc	r13, r13
    12f0:	cc 0c       	add	r12, r12
    12f2:	dd 1c       	adc	r13, r13
    12f4:	cc 0c       	add	r12, r12
    12f6:	dd 1c       	adc	r13, r13
    12f8:	cc 0c       	add	r12, r12
    12fa:	dd 1c       	adc	r13, r13
    12fc:	fe e2       	ldi	r31, 0x2E	; 46
    12fe:	cf 0e       	add	r12, r31
    1300:	d1 1c       	adc	r13, r1
    1302:	d8 01       	movw	r26, r16
    1304:	8d 91       	ld	r24, X+
    1306:	9c 91       	ld	r25, X
    1308:	11 97       	sbiw	r26, 0x01	; 1
    130a:	c8 0e       	add	r12, r24
    130c:	d9 1e       	adc	r13, r25
    130e:	53 96       	adiw	r26, 0x13	; 19
    1310:	dc 92       	st	X, r13
    1312:	ce 92       	st	-X, r12
    1314:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	15 c0       	rjmp	.+42     	; 0x1344 <dir_next+0x268>
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    131a:	84 e0       	ldi	r24, 0x04	; 4
    131c:	13 c0       	rjmp	.+38     	; 0x1344 <dir_next+0x268>
    131e:	84 e0       	ldi	r24, 0x04	; 4
    1320:	11 c0       	rjmp	.+34     	; 0x1344 <dir_next+0x268>
	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <dir_next+0x268>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <dir_next+0x268>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	0b c0       	rjmp	.+22     	; 0x1344 <dir_next+0x268>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    132e:	84 e0       	ldi	r24, 0x04	; 4
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <dir_next+0x268>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1332:	87 e0       	ldi	r24, 0x07	; 7
    1334:	07 c0       	rjmp	.+14     	; 0x1344 <dir_next+0x268>
					if (clst == 1) return FR_INT_ERR;
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <dir_next+0x268>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <dir_next+0x268>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <dir_next+0x268>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1342:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	af 90       	pop	r10
    1356:	9f 90       	pop	r9
    1358:	8f 90       	pop	r8
    135a:	7f 90       	pop	r7
    135c:	6f 90       	pop	r6
    135e:	5f 90       	pop	r5
    1360:	4f 90       	pop	r4
    1362:	08 95       	ret

00001364 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    1364:	2f 92       	push	r2
    1366:	3f 92       	push	r3
    1368:	4f 92       	push	r4
    136a:	5f 92       	push	r5
    136c:	6f 92       	push	r6
    136e:	7f 92       	push	r7
    1370:	8f 92       	push	r8
    1372:	9f 92       	push	r9
    1374:	af 92       	push	r10
    1376:	bf 92       	push	r11
    1378:	cf 92       	push	r12
    137a:	df 92       	push	r13
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	00 d0       	rcall	.+0      	; 0x138a <follow_path+0x26>
    138a:	00 d0       	rcall	.+0      	; 0x138c <follow_path+0x28>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	6c 01       	movw	r12, r24
    1392:	7b 01       	movw	r14, r22
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    1394:	db 01       	movw	r26, r22
    1396:	8c 91       	ld	r24, X
    1398:	80 32       	cpi	r24, 0x20	; 32
    139a:	31 f4       	brne	.+12     	; 0x13a8 <follow_path+0x44>
    139c:	fb 01       	movw	r30, r22
    139e:	31 96       	adiw	r30, 0x01	; 1
    13a0:	7f 01       	movw	r14, r30
    13a2:	81 91       	ld	r24, Z+
    13a4:	80 32       	cpi	r24, 0x20	; 32
    13a6:	e1 f3       	breq	.-8      	; 0x13a0 <follow_path+0x3c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    13a8:	8f 32       	cpi	r24, 0x2F	; 47
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <follow_path+0x4c>
    13ac:	8c 35       	cpi	r24, 0x5C	; 92
    13ae:	19 f4       	brne	.+6      	; 0x13b6 <follow_path+0x52>
		path++;
    13b0:	bf ef       	ldi	r27, 0xFF	; 255
    13b2:	eb 1a       	sub	r14, r27
    13b4:	fb 0a       	sbc	r15, r27
	dj->sclust = 0;						/* Start from the root dir */
    13b6:	f6 01       	movw	r30, r12
    13b8:	16 82       	std	Z+6, r1	; 0x06
    13ba:	17 82       	std	Z+7, r1	; 0x07
    13bc:	10 86       	std	Z+8, r1	; 0x08
    13be:	11 86       	std	Z+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    13c0:	d7 01       	movw	r26, r14
    13c2:	8c 91       	ld	r24, X
    13c4:	80 32       	cpi	r24, 0x20	; 32
    13c6:	48 f4       	brcc	.+18     	; 0x13da <follow_path+0x76>
		res = dir_seek(dj, 0);
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	c6 01       	movw	r24, r12
    13ce:	0e 94 b5 07 	call	0xf6a	; 0xf6a <dir_seek>
		dj->dir = NULL;
    13d2:	f6 01       	movw	r30, r12
    13d4:	13 8a       	std	Z+19, r1	; 0x13
    13d6:	12 8a       	std	Z+18, r1	; 0x12
    13d8:	5f c1       	rjmp	.+702    	; 0x1698 <follow_path+0x334>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    13da:	10 e2       	ldi	r17, 0x20	; 32
    13dc:	b1 2c       	mov	r11, r1
    13de:	81 2c       	mov	r8, r1
    13e0:	68 94       	set
    13e2:	77 24       	eor	r7, r7
    13e4:	73 f8       	bld	r7, 3
    13e6:	61 2c       	mov	r6, r1
    13e8:	a1 2c       	mov	r10, r1
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    13ea:	79 82       	std	Y+1, r7	; 0x01
    13ec:	6a 82       	std	Y+2, r6	; 0x02
    13ee:	0f 2e       	mov	r0, r31
    13f0:	fb e0       	ldi	r31, 0x0B	; 11
    13f2:	2f 2e       	mov	r2, r31
    13f4:	f0 2d       	mov	r31, r0
    13f6:	0f 2e       	mov	r0, r31
    13f8:	fc e3       	ldi	r31, 0x3C	; 60
    13fa:	4f 2e       	mov	r4, r31
    13fc:	f1 e0       	ldi	r31, 0x01	; 1
    13fe:	5f 2e       	mov	r5, r31
    1400:	f0 2d       	mov	r31, r0
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1402:	0f 2e       	mov	r0, r31
    1404:	f5 e0       	ldi	r31, 0x05	; 5
    1406:	3f 2e       	mov	r3, r31
    1408:	f0 2d       	mov	r31, r0
    140a:	dc 82       	std	Y+4, r13	; 0x04
    140c:	cb 82       	std	Y+3, r12	; 0x03
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    140e:	ab 81       	ldd	r26, Y+3	; 0x03
    1410:	bc 81       	ldd	r27, Y+4	; 0x04
    1412:	54 96       	adiw	r26, 0x14	; 20
    1414:	ed 91       	ld	r30, X+
    1416:	fc 91       	ld	r31, X
    1418:	55 97       	sbiw	r26, 0x15	; 21
    141a:	df 01       	movw	r26, r30
    141c:	cf 01       	movw	r24, r30
    141e:	0b 96       	adiw	r24, 0x0b	; 11
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1424:	1d 93       	st	X+, r17
    1426:	a8 17       	cp	r26, r24
    1428:	b9 07       	cpc	r27, r25
    142a:	e1 f7       	brne	.-8      	; 0x1424 <follow_path+0xc0>
    142c:	3c 83       	std	Y+4, r19	; 0x04
    142e:	2b 83       	std	Y+3, r18	; 0x03
    1430:	2b 2d       	mov	r18, r11
    1432:	38 2d       	mov	r19, r8
    1434:	8b 2d       	mov	r24, r11
    1436:	98 2d       	mov	r25, r8
    1438:	47 2d       	mov	r20, r7
    143a:	56 2d       	mov	r21, r6
    143c:	9a 2c       	mov	r9, r10
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    143e:	6c 01       	movw	r12, r24
    1440:	7f ef       	ldi	r23, 0xFF	; 255
    1442:	c7 1a       	sub	r12, r23
    1444:	d7 0a       	sbc	r13, r23
    1446:	d7 01       	movw	r26, r14
    1448:	a8 0f       	add	r26, r24
    144a:	b9 1f       	adc	r27, r25
    144c:	0c 91       	ld	r16, X
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    144e:	01 32       	cpi	r16, 0x21	; 33
    1450:	08 f4       	brcc	.+2      	; 0x1454 <follow_path+0xf0>
    1452:	0a c1       	rjmp	.+532    	; 0x1668 <follow_path+0x304>
    1454:	0f 32       	cpi	r16, 0x2F	; 47
    1456:	09 f4       	brne	.+2      	; 0x145a <follow_path+0xf6>
    1458:	03 c1       	rjmp	.+518    	; 0x1660 <follow_path+0x2fc>
    145a:	0c 35       	cpi	r16, 0x5C	; 92
    145c:	09 f4       	brne	.+2      	; 0x1460 <follow_path+0xfc>
    145e:	00 c1       	rjmp	.+512    	; 0x1660 <follow_path+0x2fc>
		if (c == '.' || i >= ni) {
    1460:	0e 32       	cpi	r16, 0x2E	; 46
    1462:	09 f4       	brne	.+2      	; 0x1466 <follow_path+0x102>
    1464:	e5 c0       	rjmp	.+458    	; 0x1630 <follow_path+0x2cc>
    1466:	24 17       	cp	r18, r20
    1468:	35 07       	cpc	r19, r21
    146a:	0c f0       	brlt	.+2      	; 0x146e <follow_path+0x10a>
    146c:	d1 c0       	rjmp	.+418    	; 0x1610 <follow_path+0x2ac>
    146e:	08 c0       	rjmp	.+16     	; 0x1480 <follow_path+0x11c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
    1470:	99 0c       	add	r9, r9
    1472:	99 0c       	add	r9, r9
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    1474:	c6 01       	movw	r24, r12
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1476:	29 81       	ldd	r18, Y+1	; 0x01
    1478:	3a 81       	ldd	r19, Y+2	; 0x02
    147a:	42 2d       	mov	r20, r2
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	df cf       	rjmp	.-66     	; 0x143e <follow_path+0xda>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
    1480:	00 23       	and	r16, r16
    1482:	0c f0       	brlt	.+2      	; 0x1486 <follow_path+0x122>
    1484:	e1 c0       	rjmp	.+450    	; 0x1648 <follow_path+0x2e4>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    1486:	a9 2d       	mov	r26, r9
    1488:	a3 60       	ori	r26, 0x03	; 3
    148a:	9a 2e       	mov	r9, r26
    148c:	dd c0       	rjmp	.+442    	; 0x1648 <follow_path+0x2e4>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    148e:	02 96       	adiw	r24, 0x02	; 2
    1490:	d7 01       	movw	r26, r14
    1492:	ac 0d       	add	r26, r12
    1494:	bd 1d       	adc	r27, r13
    1496:	dc 90       	ld	r13, X
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1498:	60 ec       	ldi	r22, 0xC0	; 192
    149a:	6d 0d       	add	r22, r13
    149c:	6f 33       	cpi	r22, 0x3F	; 63
    149e:	28 f0       	brcs	.+10     	; 0x14aa <follow_path+0x146>
    14a0:	60 e8       	ldi	r22, 0x80	; 128
    14a2:	6d 0d       	add	r22, r13
    14a4:	6f 37       	cpi	r22, 0x7F	; 127
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <follow_path+0x146>
    14a8:	b5 c0       	rjmp	.+362    	; 0x1614 <follow_path+0x2b0>
    14aa:	ba 01       	movw	r22, r20
    14ac:	61 50       	subi	r22, 0x01	; 1
    14ae:	71 09       	sbc	r23, r1
    14b0:	26 17       	cp	r18, r22
    14b2:	37 07       	cpc	r19, r23
    14b4:	0c f0       	brlt	.+2      	; 0x14b8 <follow_path+0x154>
    14b6:	b0 c0       	rjmp	.+352    	; 0x1618 <follow_path+0x2b4>
				return FR_INVALID_NAME;
			sfn[i++] = c;
    14b8:	df 01       	movw	r26, r30
    14ba:	a2 0f       	add	r26, r18
    14bc:	b3 1f       	adc	r27, r19
    14be:	0c 93       	st	X, r16
			sfn[i++] = d;
    14c0:	d9 01       	movw	r26, r18
    14c2:	11 96       	adiw	r26, 0x01	; 1
    14c4:	ae 0f       	add	r26, r30
    14c6:	bf 1f       	adc	r27, r31
    14c8:	2e 5f       	subi	r18, 0xFE	; 254
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	dc 92       	st	X, r13
    14ce:	b7 cf       	rjmp	.-146    	; 0x143e <follow_path+0xda>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    14d0:	8d 91       	ld	r24, X+
    14d2:	88 23       	and	r24, r24
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <follow_path+0x174>
    14d6:	be c0       	rjmp	.+380    	; 0x1654 <follow_path+0x2f0>
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	68 17       	cp	r22, r24
    14dc:	79 07       	cpc	r23, r25
    14de:	c1 f7       	brne	.-16     	; 0x14d0 <follow_path+0x16c>
    14e0:	86 e0       	ldi	r24, 0x06	; 6
    14e2:	da c0       	rjmp	.+436    	; 0x1698 <follow_path+0x334>
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
    14e4:	b9 2d       	mov	r27, r9
    14e6:	b2 60       	ori	r27, 0x02	; 2
    14e8:	9b 2e       	mov	r9, r27
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <follow_path+0x198>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    14ec:	8f e9       	ldi	r24, 0x9F	; 159
    14ee:	80 0f       	add	r24, r16
    14f0:	8a 31       	cpi	r24, 0x1A	; 26
    14f2:	20 f4       	brcc	.+8      	; 0x14fc <follow_path+0x198>
					b |= 1; c -= 0x20;
    14f4:	69 2d       	mov	r22, r9
    14f6:	61 60       	ori	r22, 0x01	; 1
    14f8:	96 2e       	mov	r9, r22
    14fa:	00 52       	subi	r16, 0x20	; 32
				}
			}
			sfn[i++] = c;
    14fc:	df 01       	movw	r26, r30
    14fe:	a2 0f       	add	r26, r18
    1500:	b3 1f       	adc	r27, r19
    1502:	0c 93       	st	X, r16
    1504:	2f 5f       	subi	r18, 0xFF	; 255
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    1508:	c6 01       	movw	r24, r12
    150a:	99 cf       	rjmp	.-206    	; 0x143e <follow_path+0xda>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    150c:	23 2b       	or	r18, r19
    150e:	09 f4       	brne	.+2      	; 0x1512 <follow_path+0x1ae>
    1510:	85 c0       	rjmp	.+266    	; 0x161c <follow_path+0x2b8>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1512:	90 81       	ld	r25, Z
    1514:	95 3e       	cpi	r25, 0xE5	; 229
    1516:	09 f4       	brne	.+2      	; 0x151a <follow_path+0x1b6>
    1518:	30 82       	st	Z, r3

	if (ni == 8) b <<= 2;
    151a:	48 30       	cpi	r20, 0x08	; 8
    151c:	51 05       	cpc	r21, r1
    151e:	11 f4       	brne	.+4      	; 0x1524 <follow_path+0x1c0>
    1520:	99 0c       	add	r9, r9
    1522:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    1524:	99 2d       	mov	r25, r9
    1526:	93 70       	andi	r25, 0x03	; 3
    1528:	91 30       	cpi	r25, 0x01	; 1
    152a:	09 f4       	brne	.+2      	; 0x152e <follow_path+0x1ca>
    152c:	80 61       	ori	r24, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    152e:	99 2d       	mov	r25, r9
    1530:	9c 70       	andi	r25, 0x0C	; 12
    1532:	94 30       	cpi	r25, 0x04	; 4
    1534:	09 f4       	brne	.+2      	; 0x1538 <follow_path+0x1d4>
    1536:	88 60       	ori	r24, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1538:	83 87       	std	Z+11, r24	; 0x0b
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    153a:	6b 2d       	mov	r22, r11
    153c:	78 2d       	mov	r23, r8
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	0e 94 b5 07 	call	0xf6a	; 0xf6a <dir_seek>
	if (res != FR_OK) return res;
    1546:	81 11       	cpse	r24, r1
    1548:	93 c0       	rjmp	.+294    	; 0x1670 <follow_path+0x30c>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    154a:	ab 81       	ldd	r26, Y+3	; 0x03
    154c:	bc 81       	ldd	r27, Y+4	; 0x04
    154e:	1e 96       	adiw	r26, 0x0e	; 14
    1550:	4d 91       	ld	r20, X+
    1552:	5d 91       	ld	r21, X+
    1554:	6d 91       	ld	r22, X+
    1556:	7c 91       	ld	r23, X
    1558:	51 97       	sbiw	r26, 0x11	; 17
    155a:	8d 91       	ld	r24, X+
    155c:	9c 91       	ld	r25, X
    155e:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
		if (res != FR_OK) break;
    1562:	81 11       	cpse	r24, r1
    1564:	88 c0       	rjmp	.+272    	; 0x1676 <follow_path+0x312>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1566:	eb 81       	ldd	r30, Y+3	; 0x03
    1568:	fc 81       	ldd	r31, Y+4	; 0x04
    156a:	62 89       	ldd	r22, Z+18	; 0x12
    156c:	73 89       	ldd	r23, Z+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    156e:	db 01       	movw	r26, r22
    1570:	9c 91       	ld	r25, X
    1572:	99 23       	and	r25, r25
    1574:	f1 f0       	breq	.+60     	; 0x15b2 <follow_path+0x24e>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1576:	1b 96       	adiw	r26, 0x0b	; 11
    1578:	9c 91       	ld	r25, X
    157a:	93 fd       	sbrc	r25, 3
    157c:	10 c0       	rjmp	.+32     	; 0x159e <follow_path+0x23a>
    157e:	c4 88       	ldd	r12, Z+20	; 0x14
    1580:	d5 88       	ldd	r13, Z+21	; 0x15
    1582:	fb 01       	movw	r30, r22
    1584:	d6 01       	movw	r26, r12
    1586:	ab 01       	movw	r20, r22
    1588:	45 5f       	subi	r20, 0xF5	; 245
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <follow_path+0x232>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    158e:	e4 17       	cp	r30, r20
    1590:	f5 07       	cpc	r31, r21
    1592:	09 f4       	brne	.+2      	; 0x1596 <follow_path+0x232>
    1594:	7c c0       	rjmp	.+248    	; 0x168e <follow_path+0x32a>
    1596:	21 91       	ld	r18, Z+
    1598:	9d 91       	ld	r25, X+
    159a:	29 17       	cp	r18, r25
    159c:	c1 f3       	breq	.-16     	; 0x158e <follow_path+0x22a>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    159e:	6a 2d       	mov	r22, r10
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <dir_next>
	} while (res == FR_OK);
    15a8:	88 23       	and	r24, r24
    15aa:	79 f2       	breq	.-98     	; 0x154a <follow_path+0x1e6>
    15ac:	cb 80       	ldd	r12, Y+3	; 0x03
    15ae:	dc 80       	ldd	r13, Y+4	; 0x04
    15b0:	64 c0       	rjmp	.+200    	; 0x167a <follow_path+0x316>
    15b2:	cb 80       	ldd	r12, Y+3	; 0x03
    15b4:	dc 80       	ldd	r13, Y+4	; 0x04
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    15b6:	d6 01       	movw	r26, r12
    15b8:	54 96       	adiw	r26, 0x14	; 20
    15ba:	ed 91       	ld	r30, X+
    15bc:	fc 91       	ld	r31, X
    15be:	55 97       	sbiw	r26, 0x15	; 21
    15c0:	93 85       	ldd	r25, Z+11	; 0x0b
    15c2:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
    15c4:	91 11       	cpse	r25, r1
    15c6:	2c c0       	rjmp	.+88     	; 0x1620 <follow_path+0x2bc>
					res = FR_NO_PATH;
    15c8:	85 e0       	ldi	r24, 0x05	; 5
    15ca:	66 c0       	rjmp	.+204    	; 0x1698 <follow_path+0x334>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    15cc:	fb 01       	movw	r30, r22
    15ce:	83 85       	ldd	r24, Z+11	; 0x0b
    15d0:	84 ff       	sbrs	r24, 4
    15d2:	28 c0       	rjmp	.+80     	; 0x1624 <follow_path+0x2c0>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    15d4:	85 89       	ldd	r24, Z+21	; 0x15
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	98 2f       	mov	r25, r24
    15da:	88 27       	eor	r24, r24
    15dc:	24 89       	ldd	r18, Z+20	; 0x14
    15de:	82 2b       	or	r24, r18
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	dc 01       	movw	r26, r24
    15e6:	99 27       	eor	r25, r25
    15e8:	88 27       	eor	r24, r24
    15ea:	43 8d       	ldd	r20, Z+27	; 0x1b
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	54 2f       	mov	r21, r20
    15f0:	44 27       	eor	r20, r20
    15f2:	22 8d       	ldd	r18, Z+26	; 0x1a
    15f4:	42 2b       	or	r20, r18
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	84 2b       	or	r24, r20
    15fc:	95 2b       	or	r25, r21
    15fe:	a6 2b       	or	r26, r22
    1600:	b7 2b       	or	r27, r23
    1602:	eb 81       	ldd	r30, Y+3	; 0x03
    1604:	fc 81       	ldd	r31, Y+4	; 0x04
    1606:	86 83       	std	Z+6, r24	; 0x06
    1608:	97 83       	std	Z+7, r25	; 0x07
    160a:	a0 87       	std	Z+8, r26	; 0x08
    160c:	b1 87       	std	Z+9, r27	; 0x09
		}
    160e:	ff ce       	rjmp	.-514    	; 0x140e <follow_path+0xaa>
	}
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
    1610:	86 e0       	ldi	r24, 0x06	; 6
    1612:	42 c0       	rjmp	.+132    	; 0x1698 <follow_path+0x334>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1614:	86 e0       	ldi	r24, 0x06	; 6
    1616:	40 c0       	rjmp	.+128    	; 0x1698 <follow_path+0x334>
    1618:	86 e0       	ldi	r24, 0x06	; 6
    161a:	3e c0       	rjmp	.+124    	; 0x1698 <follow_path+0x334>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    161c:	86 e0       	ldi	r24, 0x06	; 6
    161e:	3c c0       	rjmp	.+120    	; 0x1698 <follow_path+0x334>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    1620:	84 e0       	ldi	r24, 0x04	; 4
    1622:	3a c0       	rjmp	.+116    	; 0x1698 <follow_path+0x334>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    1624:	85 e0       	ldi	r24, 0x05	; 5
    1626:	38 c0       	rjmp	.+112    	; 0x1698 <follow_path+0x334>
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1628:	86 e0       	ldi	r24, 0x06	; 6
    162a:	36 c0       	rjmp	.+108    	; 0x1698 <follow_path+0x334>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    162c:	86 e0       	ldi	r24, 0x06	; 6
    162e:	34 c0       	rjmp	.+104    	; 0x1698 <follow_path+0x334>
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1630:	48 30       	cpi	r20, 0x08	; 8
    1632:	51 05       	cpc	r21, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <follow_path+0x2d4>
    1636:	1c cf       	rjmp	.-456    	; 0x1470 <follow_path+0x10c>
    1638:	f7 cf       	rjmp	.-18     	; 0x1628 <follow_path+0x2c4>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    163a:	60 2f       	mov	r22, r16
    163c:	70 e0       	ldi	r23, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    163e:	60 32       	cpi	r22, 0x20	; 32
    1640:	71 05       	cpc	r23, r1
    1642:	a1 f3       	breq	.-24     	; 0x162c <follow_path+0x2c8>
    1644:	d2 01       	movw	r26, r4
    1646:	44 cf       	rjmp	.-376    	; 0x14d0 <follow_path+0x16c>
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    1648:	6f e7       	ldi	r22, 0x7F	; 127
    164a:	60 0f       	add	r22, r16
    164c:	6e 37       	cpi	r22, 0x7E	; 126
    164e:	08 f4       	brcc	.+2      	; 0x1652 <follow_path+0x2ee>
    1650:	1e cf       	rjmp	.-452    	; 0x148e <follow_path+0x12a>
    1652:	f3 cf       	rjmp	.-26     	; 0x163a <follow_path+0x2d6>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1654:	8f eb       	ldi	r24, 0xBF	; 191
    1656:	80 0f       	add	r24, r16
    1658:	8a 31       	cpi	r24, 0x1A	; 26
    165a:	08 f4       	brcc	.+2      	; 0x165e <follow_path+0x2fa>
    165c:	43 cf       	rjmp	.-378    	; 0x14e4 <follow_path+0x180>
    165e:	46 cf       	rjmp	.-372    	; 0x14ec <follow_path+0x188>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1660:	ec 0c       	add	r14, r12
    1662:	fd 1c       	adc	r15, r13
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1664:	8a 2d       	mov	r24, r10
    1666:	52 cf       	rjmp	.-348    	; 0x150c <follow_path+0x1a8>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1668:	ec 0c       	add	r14, r12
    166a:	fd 1c       	adc	r15, r13
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    166c:	84 e0       	ldi	r24, 0x04	; 4
    166e:	4e cf       	rjmp	.-356    	; 0x150c <follow_path+0x1a8>
    1670:	cb 80       	ldd	r12, Y+3	; 0x03
    1672:	dc 80       	ldd	r13, Y+4	; 0x04
    1674:	02 c0       	rjmp	.+4      	; 0x167a <follow_path+0x316>
    1676:	cb 80       	ldd	r12, Y+3	; 0x03
    1678:	dc 80       	ldd	r13, Y+4	; 0x04
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    167a:	d6 01       	movw	r26, r12
    167c:	54 96       	adiw	r26, 0x14	; 20
    167e:	ed 91       	ld	r30, X+
    1680:	fc 91       	ld	r31, X
    1682:	55 97       	sbiw	r26, 0x15	; 21
    1684:	93 85       	ldd	r25, Z+11	; 0x0b
    1686:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
    1688:	84 30       	cpi	r24, 0x04	; 4
    168a:	31 f4       	brne	.+12     	; 0x1698 <follow_path+0x334>
    168c:	9b cf       	rjmp	.-202    	; 0x15c4 <follow_path+0x260>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    168e:	d6 01       	movw	r26, r12
    1690:	1b 96       	adiw	r26, 0x0b	; 11
    1692:	9c 91       	ld	r25, X
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    1694:	92 ff       	sbrs	r25, 2
    1696:	9a cf       	rjmp	.-204    	; 0x15cc <follow_path+0x268>
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	6f 90       	pop	r6
    16bc:	5f 90       	pop	r5
    16be:	4f 90       	pop	r4
    16c0:	3f 90       	pop	r3
    16c2:	2f 90       	pop	r2
    16c4:	08 95       	ret

000016c6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <dir_seek>
    16da:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    16dc:	81 11       	cpse	r24, r1
    16de:	51 c0       	rjmp	.+162    	; 0x1782 <dir_register+0xbc>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    16e0:	d8 01       	movw	r26, r16
    16e2:	1e 96       	adiw	r26, 0x0e	; 14
    16e4:	4d 91       	ld	r20, X+
    16e6:	5d 91       	ld	r21, X+
    16e8:	6d 91       	ld	r22, X+
    16ea:	7c 91       	ld	r23, X
    16ec:	51 97       	sbiw	r26, 0x11	; 17
    16ee:	8d 91       	ld	r24, X+
    16f0:	9c 91       	ld	r25, X
    16f2:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
    16f6:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    16f8:	81 11       	cpse	r24, r1
    16fa:	43 c0       	rjmp	.+134    	; 0x1782 <dir_register+0xbc>
			c = *dj->dir;
    16fc:	d8 01       	movw	r26, r16
    16fe:	52 96       	adiw	r26, 0x12	; 18
    1700:	ed 91       	ld	r30, X+
    1702:	fc 91       	ld	r31, X
    1704:	53 97       	sbiw	r26, 0x13	; 19
    1706:	80 81       	ld	r24, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    1708:	85 3e       	cpi	r24, 0xE5	; 229
    170a:	69 f1       	breq	.+90     	; 0x1766 <dir_register+0xa0>
    170c:	88 23       	and	r24, r24
    170e:	59 f1       	breq	.+86     	; 0x1766 <dir_register+0xa0>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	c8 01       	movw	r24, r16
    1714:	0e 94 6e 08 	call	0x10dc	; 0x10dc <dir_next>
    1718:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    171a:	88 23       	and	r24, r24
    171c:	09 f3       	breq	.-62     	; 0x16e0 <dir_register+0x1a>
    171e:	31 c0       	rjmp	.+98     	; 0x1782 <dir_register+0xbc>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    1720:	f8 01       	movw	r30, r16
    1722:	e2 88       	ldd	r14, Z+18	; 0x12
    1724:	f3 88       	ldd	r15, Z+19	; 0x13
    1726:	f7 01       	movw	r30, r14
    1728:	97 01       	movw	r18, r14
    172a:	20 5e       	subi	r18, 0xE0	; 224
    172c:	3f 4f       	sbci	r19, 0xFF	; 255

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    172e:	11 92       	st	Z+, r1
    1730:	e2 17       	cp	r30, r18
    1732:	f3 07       	cpc	r31, r19
    1734:	e1 f7       	brne	.-8      	; 0x172e <dir_register+0x68>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1736:	d8 01       	movw	r26, r16
    1738:	54 96       	adiw	r26, 0x14	; 20
    173a:	6d 91       	ld	r22, X+
    173c:	7c 91       	ld	r23, X
    173e:	55 97       	sbiw	r26, 0x15	; 21
    1740:	4b e0       	ldi	r20, 0x0B	; 11
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	c7 01       	movw	r24, r14
    1746:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    174a:	d8 01       	movw	r26, r16
    174c:	54 96       	adiw	r26, 0x14	; 20
    174e:	ed 91       	ld	r30, X+
    1750:	fc 91       	ld	r31, X
    1752:	55 97       	sbiw	r26, 0x15	; 21
    1754:	83 85       	ldd	r24, Z+11	; 0x0b
    1756:	88 71       	andi	r24, 0x18	; 24
    1758:	f7 01       	movw	r30, r14
    175a:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	84 83       	std	Z+4, r24	; 0x04
    1764:	0e c0       	rjmp	.+28     	; 0x1782 <dir_register+0xbc>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    1766:	d8 01       	movw	r26, r16
    1768:	1e 96       	adiw	r26, 0x0e	; 14
    176a:	4d 91       	ld	r20, X+
    176c:	5d 91       	ld	r21, X+
    176e:	6d 91       	ld	r22, X+
    1770:	7c 91       	ld	r23, X
    1772:	51 97       	sbiw	r26, 0x11	; 17
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
    177c:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    177e:	88 23       	and	r24, r24
    1780:	79 f2       	breq	.-98     	; 0x1720 <dir_register+0x5a>
			dj->fs->wflag = 1;
		}
	}

	return res;
}
    1782:	8c 2f       	mov	r24, r28
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	ff 90       	pop	r15
    178c:	ef 90       	pop	r14
    178e:	08 95       	ret

00001790 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    1790:	2f 92       	push	r2
    1792:	3f 92       	push	r3
    1794:	4f 92       	push	r4
    1796:	5f 92       	push	r5
    1798:	6f 92       	push	r6
    179a:	7f 92       	push	r7
    179c:	8f 92       	push	r8
    179e:	9f 92       	push	r9
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	27 97       	sbiw	r28, 0x07	; 7
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    17c4:	dc 01       	movw	r26, r24
    17c6:	ed 91       	ld	r30, X+
    17c8:	fc 91       	ld	r31, X
    17ca:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    17cc:	20 81       	ld	r18, Z
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	20 53       	subi	r18, 0x30	; 48
    17d2:	31 09       	sbc	r19, r1
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    17d4:	2a 30       	cpi	r18, 0x0A	; 10
    17d6:	31 05       	cpc	r19, r1
    17d8:	48 f4       	brcc	.+18     	; 0x17ec <chk_mounted+0x5c>
    17da:	51 81       	ldd	r21, Z+1	; 0x01
    17dc:	5a 33       	cpi	r21, 0x3A	; 58
    17de:	31 f4       	brne	.+12     	; 0x17ec <chk_mounted+0x5c>
		p += 2; *path = p;			/* Return pointer to the path name */
    17e0:	32 96       	adiw	r30, 0x02	; 2
    17e2:	ed 93       	st	X+, r30
    17e4:	fc 93       	st	X, r31
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    17e6:	23 2b       	or	r18, r19
    17e8:	09 f0       	breq	.+2      	; 0x17ec <chk_mounted+0x5c>
    17ea:	36 c2       	rjmp	.+1132   	; 0x1c58 <chk_mounted+0x4c8>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    17ec:	e0 91 b6 01 	lds	r30, 0x01B6
    17f0:	f0 91 b7 01 	lds	r31, 0x01B7
    17f4:	ff 83       	std	Y+7, r31	; 0x07
    17f6:	ee 83       	std	Y+6, r30	; 0x06
    17f8:	db 01       	movw	r26, r22
    17fa:	ed 93       	st	X+, r30
    17fc:	fc 93       	st	X, r31
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    17fe:	30 97       	sbiw	r30, 0x00	; 0
    1800:	09 f4       	brne	.+2      	; 0x1804 <chk_mounted+0x74>
    1802:	2c c2       	rjmp	.+1112   	; 0x1c5c <chk_mounted+0x4cc>
    1804:	14 2f       	mov	r17, r20

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    1806:	80 81       	ld	r24, Z
    1808:	88 23       	and	r24, r24
    180a:	61 f0       	breq	.+24     	; 0x1824 <chk_mounted+0x94>
		stat = disk_status(fs->drive);
    180c:	81 81       	ldd	r24, Z+1	; 0x01
    180e:	0e 94 57 01 	call	0x2ae	; 0x2ae <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    1812:	80 fd       	sbrc	r24, 0
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    1816:	11 23       	and	r17, r17
    1818:	09 f4       	brne	.+2      	; 0x181c <chk_mounted+0x8c>
    181a:	22 c2       	rjmp	.+1092   	; 0x1c60 <chk_mounted+0x4d0>
    181c:	82 ff       	sbrs	r24, 2
    181e:	22 c2       	rjmp	.+1092   	; 0x1c64 <chk_mounted+0x4d4>
				return FR_WRITE_PROTECTED;
    1820:	8a e0       	ldi	r24, 0x0A	; 10
    1822:	cf c2       	rjmp	.+1438   	; 0x1dc2 <chk_mounted+0x632>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    1824:	ee 81       	ldd	r30, Y+6	; 0x06
    1826:	ff 81       	ldd	r31, Y+7	; 0x07
    1828:	10 82       	st	Z, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    182a:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	0e 94 43 01 	call	0x286	; 0x286 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    1832:	80 fd       	sbrc	r24, 0
    1834:	19 c2       	rjmp	.+1074   	; 0x1c68 <chk_mounted+0x4d8>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    1836:	11 23       	and	r17, r17
    1838:	11 f0       	breq	.+4      	; 0x183e <chk_mounted+0xae>
    183a:	82 fd       	sbrc	r24, 2
    183c:	17 c2       	rjmp	.+1070   	; 0x1c6c <chk_mounted+0x4dc>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	ba 01       	movw	r22, r20
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	9f 81       	ldd	r25, Y+7	; 0x07
    1848:	0e 94 08 03 	call	0x610	; 0x610 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	c1 f5       	brne	.+112    	; 0x18c0 <chk_mounted+0x130>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
    1850:	ee 81       	ldd	r30, Y+6	; 0x06
    1852:	ff 81       	ldd	r31, Y+7	; 0x07
    1854:	e0 51       	subi	r30, 0x10	; 16
    1856:	fe 4f       	sbci	r31, 0xFE	; 254
    1858:	80 81       	ld	r24, Z
    185a:	88 23       	and	r24, r24
    185c:	09 f4       	brne	.+2      	; 0x1860 <chk_mounted+0xd0>
    185e:	08 c2       	rjmp	.+1040   	; 0x1c70 <chk_mounted+0x4e0>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    1860:	ee 81       	ldd	r30, Y+6	; 0x06
    1862:	ff 81       	ldd	r31, Y+7	; 0x07
    1864:	e9 50       	subi	r30, 0x09	; 9
    1866:	fe 4f       	sbci	r31, 0xFE	; 254
    1868:	80 81       	ld	r24, Z
    186a:	ee 81       	ldd	r30, Y+6	; 0x06
    186c:	ff 81       	ldd	r31, Y+7	; 0x07
    186e:	ea 50       	subi	r30, 0x0A	; 10
    1870:	fe 4f       	sbci	r31, 0xFE	; 254
    1872:	c0 80       	ld	r12, Z
    1874:	d1 2c       	mov	r13, r1
    1876:	e1 2c       	mov	r14, r1
    1878:	f1 2c       	mov	r15, r1
    187a:	76 01       	movw	r14, r12
    187c:	dd 24       	eor	r13, r13
    187e:	cc 24       	eor	r12, r12
    1880:	f8 2a       	or	r15, r24
    1882:	ee 81       	ldd	r30, Y+6	; 0x06
    1884:	ff 81       	ldd	r31, Y+7	; 0x07
    1886:	ec 50       	subi	r30, 0x0C	; 12
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	80 81       	ld	r24, Z
    188c:	a7 01       	movw	r20, r14
    188e:	96 01       	movw	r18, r12
    1890:	28 2b       	or	r18, r24
    1892:	da 01       	movw	r26, r20
    1894:	c9 01       	movw	r24, r18
    1896:	ee 81       	ldd	r30, Y+6	; 0x06
    1898:	ff 81       	ldd	r31, Y+7	; 0x07
    189a:	eb 50       	subi	r30, 0x0B	; 11
    189c:	fe 4f       	sbci	r31, 0xFE	; 254
    189e:	c0 80       	ld	r12, Z
    18a0:	d1 2c       	mov	r13, r1
    18a2:	dc 2c       	mov	r13, r12
    18a4:	cc 24       	eor	r12, r12
    18a6:	e1 2c       	mov	r14, r1
    18a8:	f1 2c       	mov	r15, r1
    18aa:	c8 2a       	or	r12, r24
    18ac:	d9 2a       	or	r13, r25
    18ae:	ea 2a       	or	r14, r26
    18b0:	fb 2a       	or	r15, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    18b2:	b7 01       	movw	r22, r14
    18b4:	a6 01       	movw	r20, r12
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ba:	0e 94 08 03 	call	0x610	; 0x610 <check_fs>
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <chk_mounted+0x136>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    18c0:	c1 2c       	mov	r12, r1
    18c2:	d1 2c       	mov	r13, r1
    18c4:	76 01       	movw	r14, r12
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	09 f4       	brne	.+2      	; 0x18cc <chk_mounted+0x13c>
    18ca:	d4 c1       	rjmp	.+936    	; 0x1c74 <chk_mounted+0x4e4>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    18cc:	81 11       	cpse	r24, r1
    18ce:	d4 c1       	rjmp	.+936    	; 0x1c78 <chk_mounted+0x4e8>
    18d0:	ae 81       	ldd	r26, Y+6	; 0x06
    18d2:	bf 81       	ldd	r27, Y+7	; 0x07
    18d4:	da 96       	adiw	r26, 0x3a	; 58
    18d6:	8c 91       	ld	r24, X
    18d8:	da 97       	sbiw	r26, 0x3a	; 58
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	98 2f       	mov	r25, r24
    18de:	88 27       	eor	r24, r24
    18e0:	d9 96       	adiw	r26, 0x39	; 57
    18e2:	2c 91       	ld	r18, X
    18e4:	82 2b       	or	r24, r18
    18e6:	81 15       	cp	r24, r1
    18e8:	92 40       	sbci	r25, 0x02	; 2
    18ea:	09 f0       	breq	.+2      	; 0x18ee <chk_mounted+0x15e>
    18ec:	c7 c1       	rjmp	.+910    	; 0x1c7c <chk_mounted+0x4ec>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    18ee:	ee 81       	ldd	r30, Y+6	; 0x06
    18f0:	ff 81       	ldd	r31, Y+7	; 0x07
    18f2:	eb 5b       	subi	r30, 0xBB	; 187
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	20 81       	ld	r18, Z
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	32 2f       	mov	r19, r18
    18fc:	22 27       	eor	r18, r18
    18fe:	ee 81       	ldd	r30, Y+6	; 0x06
    1900:	ff 81       	ldd	r31, Y+7	; 0x07
    1902:	ec 5b       	subi	r30, 0xBC	; 188
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	28 2b       	or	r18, r24
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    190e:	21 15       	cp	r18, r1
    1910:	31 05       	cpc	r19, r1
    1912:	41 05       	cpc	r20, r1
    1914:	51 05       	cpc	r21, r1
    1916:	41 f5       	brne	.+80     	; 0x1968 <chk_mounted+0x1d8>
    1918:	ee 81       	ldd	r30, Y+6	; 0x06
    191a:	ff 81       	ldd	r31, Y+7	; 0x07
    191c:	eb 5a       	subi	r30, 0xAB	; 171
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	ee 81       	ldd	r30, Y+6	; 0x06
    1924:	ff 81       	ldd	r31, Y+7	; 0x07
    1926:	ec 5a       	subi	r30, 0xAC	; 172
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	20 81       	ld	r18, Z
    192c:	42 2f       	mov	r20, r18
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	ba 01       	movw	r22, r20
    1936:	55 27       	eor	r21, r21
    1938:	44 27       	eor	r20, r20
    193a:	78 2b       	or	r23, r24
    193c:	ee 81       	ldd	r30, Y+6	; 0x06
    193e:	ff 81       	ldd	r31, Y+7	; 0x07
    1940:	ee 5a       	subi	r30, 0xAE	; 174
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	48 2b       	or	r20, r24
    1948:	ee 81       	ldd	r30, Y+6	; 0x06
    194a:	ff 81       	ldd	r31, Y+7	; 0x07
    194c:	ed 5a       	subi	r30, 0xAD	; 173
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	98 2f       	mov	r25, r24
    1956:	88 27       	eor	r24, r24
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	9a 01       	movw	r18, r20
    195e:	ab 01       	movw	r20, r22
    1960:	28 2b       	or	r18, r24
    1962:	39 2b       	or	r19, r25
    1964:	4a 2b       	or	r20, r26
    1966:	5b 2b       	or	r21, r27
	fs->sects_fat = fsize;
    1968:	ee 81       	ldd	r30, Y+6	; 0x06
    196a:	ff 81       	ldd	r31, Y+7	; 0x07
    196c:	26 8b       	std	Z+22, r18	; 0x16
    196e:	37 8b       	std	Z+23, r19	; 0x17
    1970:	40 8f       	std	Z+24, r20	; 0x18
    1972:	51 8f       	std	Z+25, r21	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    1974:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1976:	a3 83       	std	Z+3, r26	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	0e 94 b1 1b 	call	0x3762	; 0x3762 <__muluhisi3>
    197e:	2b 01       	movw	r4, r22
    1980:	3c 01       	movw	r6, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    1982:	05 ad       	ldd	r16, Z+61	; 0x3d
    1984:	10 e0       	ldi	r17, 0x00	; 0
    1986:	10 2f       	mov	r17, r16
    1988:	00 27       	eor	r16, r16
    198a:	84 ad       	ldd	r24, Z+60	; 0x3c
    198c:	08 2b       	or	r16, r24
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	46 01       	movw	r8, r12
    1994:	57 01       	movw	r10, r14
    1996:	80 0e       	add	r8, r16
    1998:	91 1e       	adc	r9, r17
    199a:	a2 1e       	adc	r10, r18
    199c:	b3 1e       	adc	r11, r19
    199e:	86 8e       	std	Z+30, r8	; 0x1e
    19a0:	97 8e       	std	Z+31, r9	; 0x1f
    19a2:	a0 a2       	std	Z+32, r10	; 0x20
    19a4:	b1 a2       	std	Z+33, r11	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    19a6:	b3 ad       	ldd	r27, Z+59	; 0x3b
    19a8:	bd 83       	std	Y+5, r27	; 0x05
    19aa:	b2 83       	std	Z+2, r27	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    19ac:	e0 5c       	subi	r30, 0xC0	; 192
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 81       	ld	r24, Z
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	98 2f       	mov	r25, r24
    19b6:	88 27       	eor	r24, r24
    19b8:	ae 81       	ldd	r26, Y+6	; 0x06
    19ba:	bf 81       	ldd	r27, Y+7	; 0x07
    19bc:	df 96       	adiw	r26, 0x3f	; 63
    19be:	4c 91       	ld	r20, X
    19c0:	df 97       	sbiw	r26, 0x3f	; 63
    19c2:	1c 01       	movw	r2, r24
    19c4:	24 2a       	or	r2, r20
    19c6:	19 96       	adiw	r26, 0x09	; 9
    19c8:	3c 92       	st	X, r3
    19ca:	2e 92       	st	-X, r2
    19cc:	18 97       	sbiw	r26, 0x08	; 8
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    19ce:	fd 01       	movw	r30, r26
    19d0:	ee 5b       	subi	r30, 0xBE	; 190
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	58 2f       	mov	r21, r24
    19da:	44 27       	eor	r20, r20
    19dc:	31 97       	sbiw	r30, 0x01	; 1
    19de:	80 81       	ld	r24, Z
    19e0:	48 2b       	or	r20, r24
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	70 e0       	ldi	r23, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    19e6:	41 15       	cp	r20, r1
    19e8:	51 05       	cpc	r21, r1
    19ea:	61 05       	cpc	r22, r1
    19ec:	71 05       	cpc	r23, r1
    19ee:	f1 f4       	brne	.+60     	; 0x1a2c <chk_mounted+0x29c>
    19f0:	70 96       	adiw	r30, 0x10	; 16
    19f2:	90 81       	ld	r25, Z
    19f4:	31 97       	sbiw	r30, 0x01	; 1
    19f6:	40 81       	ld	r20, Z
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	ba 01       	movw	r22, r20
    1a00:	55 27       	eor	r21, r21
    1a02:	44 27       	eor	r20, r20
    1a04:	79 2b       	or	r23, r25
    1a06:	32 97       	sbiw	r30, 0x02	; 2
    1a08:	e0 81       	ld	r30, Z
    1a0a:	db 01       	movw	r26, r22
    1a0c:	ca 01       	movw	r24, r20
    1a0e:	8e 2b       	or	r24, r30
    1a10:	ee 81       	ldd	r30, Y+6	; 0x06
    1a12:	ff 81       	ldd	r31, Y+7	; 0x07
    1a14:	e1 5b       	subi	r30, 0xB1	; 177
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	40 81       	ld	r20, Z
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	54 2f       	mov	r21, r20
    1a1e:	44 27       	eor	r20, r20
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	48 2b       	or	r20, r24
    1a26:	59 2b       	or	r21, r25
    1a28:	6a 2b       	or	r22, r26
    1a2a:	7b 2b       	or	r23, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
    1a2c:	36 94       	lsr	r3
    1a2e:	27 94       	ror	r2
    1a30:	36 94       	lsr	r3
    1a32:	27 94       	ror	r2
    1a34:	36 94       	lsr	r3
    1a36:	27 94       	ror	r2
    1a38:	36 94       	lsr	r3
    1a3a:	27 94       	ror	r2
    1a3c:	c1 01       	movw	r24, r2
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	ab 83       	std	Y+3, r26	; 0x03
    1a48:	bc 83       	std	Y+4, r27	; 0x04
    1a4a:	db 01       	movw	r26, r22
    1a4c:	ca 01       	movw	r24, r20
    1a4e:	80 1b       	sub	r24, r16
    1a50:	91 0b       	sbc	r25, r17
    1a52:	a2 0b       	sbc	r26, r18
    1a54:	b3 0b       	sbc	r27, r19
    1a56:	84 19       	sub	r24, r4
    1a58:	95 09       	sbc	r25, r5
    1a5a:	a6 09       	sbc	r26, r6
    1a5c:	b7 09       	sbc	r27, r7
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	29 81       	ldd	r18, Y+1	; 0x01
    1a64:	3a 81       	ldd	r19, Y+2	; 0x02
    1a66:	4b 81       	ldd	r20, Y+3	; 0x03
    1a68:	5c 81       	ldd	r21, Y+4	; 0x04
    1a6a:	62 1b       	sub	r22, r18
    1a6c:	73 0b       	sbc	r23, r19
    1a6e:	84 0b       	sbc	r24, r20
    1a70:	95 0b       	sbc	r25, r21
		) / fs->csize + 2;
    1a72:	ad 81       	ldd	r26, Y+5	; 0x05
    1a74:	2a 2f       	mov	r18, r26
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	0e 94 80 1b 	call	0x3700	; 0x3700 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    1a80:	ba 01       	movw	r22, r20
    1a82:	a9 01       	movw	r20, r18
    1a84:	4e 5f       	subi	r20, 0xFE	; 254
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	6f 4f       	sbci	r22, 0xFF	; 255
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	ee 81       	ldd	r30, Y+6	; 0x06
    1a8e:	ff 81       	ldd	r31, Y+7	; 0x07
    1a90:	42 8f       	std	Z+26, r20	; 0x1a
    1a92:	53 8f       	std	Z+27, r21	; 0x1b
    1a94:	64 8f       	std	Z+28, r22	; 0x1c
    1a96:	75 8f       	std	Z+29, r23	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    1a98:	47 3f       	cpi	r20, 0xF7	; 247
    1a9a:	ff e0       	ldi	r31, 0x0F	; 15
    1a9c:	5f 07       	cpc	r21, r31
    1a9e:	61 05       	cpc	r22, r1
    1aa0:	71 05       	cpc	r23, r1
    1aa2:	08 f4       	brcc	.+2      	; 0x1aa6 <chk_mounted+0x316>
    1aa4:	17 c1       	rjmp	.+558    	; 0x1cd4 <chk_mounted+0x544>
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	16 c1       	rjmp	.+556    	; 0x1cd6 <chk_mounted+0x546>
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1aaa:	ee 81       	ldd	r30, Y+6	; 0x06
    1aac:	ff 81       	ldd	r31, Y+7	; 0x07
    1aae:	e3 5d       	subi	r30, 0xD3	; 211
    1ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab2:	80 81       	ld	r24, Z
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	88 27       	eor	r24, r24
    1aba:	ee 81       	ldd	r30, Y+6	; 0x06
    1abc:	ff 81       	ldd	r31, Y+7	; 0x07
    1abe:	e4 5d       	subi	r30, 0xD4	; 212
    1ac0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac2:	20 81       	ld	r18, Z
    1ac4:	82 2b       	or	r24, r18
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1ac6:	85 35       	cpi	r24, 0x55	; 85
    1ac8:	9a 4a       	sbci	r25, 0xAA	; 170
    1aca:	09 f0       	breq	.+2      	; 0x1ace <chk_mounted+0x33e>
    1acc:	ab c0       	rjmp	.+342    	; 0x1c24 <chk_mounted+0x494>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1ace:	ae 81       	ldd	r26, Y+6	; 0x06
    1ad0:	bf 81       	ldd	r27, Y+7	; 0x07
    1ad2:	d1 96       	adiw	r26, 0x31	; 49
    1ad4:	2c 91       	ld	r18, X
    1ad6:	d1 97       	sbiw	r26, 0x31	; 49
    1ad8:	d0 96       	adiw	r26, 0x30	; 48
    1ada:	8c 91       	ld	r24, X
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a0 e0       	ldi	r26, 0x00	; 0
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	99 27       	eor	r25, r25
    1ae6:	88 27       	eor	r24, r24
    1ae8:	b2 2b       	or	r27, r18
    1aea:	ee 81       	ldd	r30, Y+6	; 0x06
    1aec:	ff 81       	ldd	r31, Y+7	; 0x07
    1aee:	26 a5       	ldd	r18, Z+46	; 0x2e
    1af0:	ac 01       	movw	r20, r24
    1af2:	bd 01       	movw	r22, r26
    1af4:	42 2b       	or	r20, r18
    1af6:	27 a5       	ldd	r18, Z+47	; 0x2f
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	92 2f       	mov	r25, r18
    1afc:	88 27       	eor	r24, r24
    1afe:	a0 e0       	ldi	r26, 0x00	; 0
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	84 2b       	or	r24, r20
    1b04:	95 2b       	or	r25, r21
    1b06:	a6 2b       	or	r26, r22
    1b08:	b7 2b       	or	r27, r23
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1b0a:	82 35       	cpi	r24, 0x52	; 82
    1b0c:	92 45       	sbci	r25, 0x52	; 82
    1b0e:	a1 46       	sbci	r26, 0x61	; 97
    1b10:	b1 44       	sbci	r27, 0x41	; 65
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <chk_mounted+0x386>
    1b14:	89 c0       	rjmp	.+274    	; 0x1c28 <chk_mounted+0x498>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    1b16:	ee 81       	ldd	r30, Y+6	; 0x06
    1b18:	ff 81       	ldd	r31, Y+7	; 0x07
    1b1a:	eb 5e       	subi	r30, 0xEB	; 235
    1b1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b1e:	20 81       	ld	r18, Z
    1b20:	ee 81       	ldd	r30, Y+6	; 0x06
    1b22:	ff 81       	ldd	r31, Y+7	; 0x07
    1b24:	ec 5e       	subi	r30, 0xEC	; 236
    1b26:	fd 4f       	sbci	r31, 0xFD	; 253
    1b28:	80 81       	ld	r24, Z
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	dc 01       	movw	r26, r24
    1b32:	99 27       	eor	r25, r25
    1b34:	88 27       	eor	r24, r24
    1b36:	b2 2b       	or	r27, r18
    1b38:	ee 81       	ldd	r30, Y+6	; 0x06
    1b3a:	ff 81       	ldd	r31, Y+7	; 0x07
    1b3c:	ee 5e       	subi	r30, 0xEE	; 238
    1b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b40:	20 81       	ld	r18, Z
    1b42:	ac 01       	movw	r20, r24
    1b44:	bd 01       	movw	r22, r26
    1b46:	42 2b       	or	r20, r18
    1b48:	ee 81       	ldd	r30, Y+6	; 0x06
    1b4a:	ff 81       	ldd	r31, Y+7	; 0x07
    1b4c:	ed 5e       	subi	r30, 0xED	; 237
    1b4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b50:	20 81       	ld	r18, Z
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	92 2f       	mov	r25, r18
    1b56:	88 27       	eor	r24, r24
    1b58:	a0 e0       	ldi	r26, 0x00	; 0
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	84 2b       	or	r24, r20
    1b5e:	95 2b       	or	r25, r21
    1b60:	a6 2b       	or	r26, r22
    1b62:	b7 2b       	or	r27, r23
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1b64:	82 37       	cpi	r24, 0x72	; 114
    1b66:	92 47       	sbci	r25, 0x72	; 114
    1b68:	a1 44       	sbci	r26, 0x41	; 65
    1b6a:	b1 46       	sbci	r27, 0x61	; 97
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <chk_mounted+0x3e0>
    1b6e:	5e c0       	rjmp	.+188    	; 0x1c2c <chk_mounted+0x49c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1b70:	ee 81       	ldd	r30, Y+6	; 0x06
    1b72:	ff 81       	ldd	r31, Y+7	; 0x07
    1b74:	e3 5e       	subi	r30, 0xE3	; 227
    1b76:	fd 4f       	sbci	r31, 0xFD	; 253
    1b78:	20 81       	ld	r18, Z
    1b7a:	ee 81       	ldd	r30, Y+6	; 0x06
    1b7c:	ff 81       	ldd	r31, Y+7	; 0x07
    1b7e:	e4 5e       	subi	r30, 0xE4	; 228
    1b80:	fd 4f       	sbci	r31, 0xFD	; 253
    1b82:	80 81       	ld	r24, Z
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a0 e0       	ldi	r26, 0x00	; 0
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	99 27       	eor	r25, r25
    1b8e:	88 27       	eor	r24, r24
    1b90:	b2 2b       	or	r27, r18
    1b92:	ee 81       	ldd	r30, Y+6	; 0x06
    1b94:	ff 81       	ldd	r31, Y+7	; 0x07
    1b96:	e6 5e       	subi	r30, 0xE6	; 230
    1b98:	fd 4f       	sbci	r31, 0xFD	; 253
    1b9a:	20 81       	ld	r18, Z
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	bd 01       	movw	r22, r26
    1ba0:	42 2b       	or	r20, r18
    1ba2:	ee 81       	ldd	r30, Y+6	; 0x06
    1ba4:	ff 81       	ldd	r31, Y+7	; 0x07
    1ba6:	e5 5e       	subi	r30, 0xE5	; 229
    1ba8:	fd 4f       	sbci	r31, 0xFD	; 253
    1baa:	20 81       	ld	r18, Z
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	92 2f       	mov	r25, r18
    1bb0:	88 27       	eor	r24, r24
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	84 2b       	or	r24, r20
    1bb8:	95 2b       	or	r25, r21
    1bba:	a6 2b       	or	r26, r22
    1bbc:	b7 2b       	or	r27, r23
    1bbe:	ee 81       	ldd	r30, Y+6	; 0x06
    1bc0:	ff 81       	ldd	r31, Y+7	; 0x07
    1bc2:	82 87       	std	Z+10, r24	; 0x0a
    1bc4:	93 87       	std	Z+11, r25	; 0x0b
    1bc6:	a4 87       	std	Z+12, r26	; 0x0c
    1bc8:	b5 87       	std	Z+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    1bca:	e7 5e       	subi	r30, 0xE7	; 231
    1bcc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bce:	20 81       	ld	r18, Z
    1bd0:	ee 81       	ldd	r30, Y+6	; 0x06
    1bd2:	ff 81       	ldd	r31, Y+7	; 0x07
    1bd4:	e8 5e       	subi	r30, 0xE8	; 232
    1bd6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd8:	80 81       	ld	r24, Z
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e0       	ldi	r26, 0x00	; 0
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	dc 01       	movw	r26, r24
    1be2:	99 27       	eor	r25, r25
    1be4:	88 27       	eor	r24, r24
    1be6:	b2 2b       	or	r27, r18
    1be8:	ee 81       	ldd	r30, Y+6	; 0x06
    1bea:	ff 81       	ldd	r31, Y+7	; 0x07
    1bec:	ea 5e       	subi	r30, 0xEA	; 234
    1bee:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf0:	20 81       	ld	r18, Z
    1bf2:	ac 01       	movw	r20, r24
    1bf4:	bd 01       	movw	r22, r26
    1bf6:	42 2b       	or	r20, r18
    1bf8:	ee 81       	ldd	r30, Y+6	; 0x06
    1bfa:	ff 81       	ldd	r31, Y+7	; 0x07
    1bfc:	e9 5e       	subi	r30, 0xE9	; 233
    1bfe:	fd 4f       	sbci	r31, 0xFD	; 253
    1c00:	20 81       	ld	r18, Z
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	92 2f       	mov	r25, r18
    1c06:	88 27       	eor	r24, r24
    1c08:	a0 e0       	ldi	r26, 0x00	; 0
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	84 2b       	or	r24, r20
    1c0e:	95 2b       	or	r25, r21
    1c10:	a6 2b       	or	r26, r22
    1c12:	b7 2b       	or	r27, r23
    1c14:	ee 81       	ldd	r30, Y+6	; 0x06
    1c16:	ff 81       	ldd	r31, Y+7	; 0x07
    1c18:	86 87       	std	Z+14, r24	; 0x0e
    1c1a:	97 87       	std	Z+15, r25	; 0x0f
    1c1c:	a0 8b       	std	Z+16, r26	; 0x10
    1c1e:	b1 8b       	std	Z+17, r27	; 0x11
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	05 c0       	rjmp	.+10     	; 0x1c2e <chk_mounted+0x49e>
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <chk_mounted+0x49e>
    1c28:	83 e0       	ldi	r24, 0x03	; 3
    1c2a:	01 c0       	rjmp	.+2      	; 0x1c2e <chk_mounted+0x49e>
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    1c2e:	ae 81       	ldd	r26, Y+6	; 0x06
    1c30:	bf 81       	ldd	r27, Y+7	; 0x07
    1c32:	8c 93       	st	X, r24
	fs->winsect = 0;		/* Invalidate sector cache */
    1c34:	fd 01       	movw	r30, r26
    1c36:	12 a6       	std	Z+42, r1	; 0x2a
    1c38:	13 a6       	std	Z+43, r1	; 0x2b
    1c3a:	14 a6       	std	Z+44, r1	; 0x2c
    1c3c:	15 a6       	std	Z+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    1c3e:	80 91 b4 01 	lds	r24, 0x01B4
    1c42:	90 91 b5 01 	lds	r25, 0x01B5
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	90 93 b5 01 	sts	0x01B5, r25
    1c4c:	80 93 b4 01 	sts	0x01B4, r24
    1c50:	97 83       	std	Z+7, r25	; 0x07
    1c52:	86 83       	std	Z+6, r24	; 0x06

	return FR_OK;
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	b5 c0       	rjmp	.+362    	; 0x1dc2 <chk_mounted+0x632>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    1c58:	8b e0       	ldi	r24, 0x0B	; 11
    1c5a:	b3 c0       	rjmp	.+358    	; 0x1dc2 <chk_mounted+0x632>
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    1c5c:	8c e0       	ldi	r24, 0x0C	; 12
    1c5e:	b1 c0       	rjmp	.+354    	; 0x1dc2 <chk_mounted+0x632>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	af c0       	rjmp	.+350    	; 0x1dc2 <chk_mounted+0x632>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	ad c0       	rjmp	.+346    	; 0x1dc2 <chk_mounted+0x632>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
		return FR_NOT_READY;
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	ab c0       	rjmp	.+342    	; 0x1dc2 <chk_mounted+0x632>
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    1c6c:	8a e0       	ldi	r24, 0x0A	; 10
    1c6e:	a9 c0       	rjmp	.+338    	; 0x1dc2 <chk_mounted+0x632>
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
    1c70:	8d e0       	ldi	r24, 0x0D	; 13
    1c72:	a7 c0       	rjmp	.+334    	; 0x1dc2 <chk_mounted+0x632>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	a5 c0       	rjmp	.+330    	; 0x1dc2 <chk_mounted+0x632>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
    1c78:	8d e0       	ldi	r24, 0x0D	; 13
    1c7a:	a3 c0       	rjmp	.+326    	; 0x1dc2 <chk_mounted+0x632>
    1c7c:	8d e0       	ldi	r24, 0x0D	; 13
    1c7e:	a1 c0       	rjmp	.+322    	; 0x1dc2 <chk_mounted+0x632>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    1c80:	b3 01       	movw	r22, r6
    1c82:	a2 01       	movw	r20, r4
    1c84:	48 0d       	add	r20, r8
    1c86:	59 1d       	adc	r21, r9
    1c88:	6a 1d       	adc	r22, r10
    1c8a:	7b 1d       	adc	r23, r11
    1c8c:	ae 81       	ldd	r26, Y+6	; 0x06
    1c8e:	bf 81       	ldd	r27, Y+7	; 0x07
    1c90:	92 96       	adiw	r26, 0x22	; 34
    1c92:	4d 93       	st	X+, r20
    1c94:	5d 93       	st	X+, r21
    1c96:	6d 93       	st	X+, r22
    1c98:	7c 93       	st	X, r23
    1c9a:	95 97       	sbiw	r26, 0x25	; 37
    1c9c:	29 81       	ldd	r18, Y+1	; 0x01
    1c9e:	3a 81       	ldd	r19, Y+2	; 0x02
    1ca0:	4b 81       	ldd	r20, Y+3	; 0x03
    1ca2:	5c 81       	ldd	r21, Y+4	; 0x04
    1ca4:	82 0e       	add	r8, r18
    1ca6:	93 1e       	adc	r9, r19
    1ca8:	a4 1e       	adc	r10, r20
    1caa:	b5 1e       	adc	r11, r21
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    1cac:	48 0c       	add	r4, r8
    1cae:	59 1c       	adc	r5, r9
    1cb0:	6a 1c       	adc	r6, r10
    1cb2:	7b 1c       	adc	r7, r11
    1cb4:	96 96       	adiw	r26, 0x26	; 38
    1cb6:	4d 92       	st	X+, r4
    1cb8:	5d 92       	st	X+, r5
    1cba:	6d 92       	st	X+, r6
    1cbc:	7c 92       	st	X, r7
    1cbe:	99 97       	sbiw	r26, 0x29	; 41

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    1cc0:	4f ef       	ldi	r20, 0xFF	; 255
    1cc2:	5f ef       	ldi	r21, 0xFF	; 255
    1cc4:	ba 01       	movw	r22, r20
    1cc6:	fd 01       	movw	r30, r26
    1cc8:	46 87       	std	Z+14, r20	; 0x0e
    1cca:	57 87       	std	Z+15, r21	; 0x0f
    1ccc:	60 8b       	std	Z+16, r22	; 0x10
    1cce:	71 8b       	std	Z+17, r23	; 0x11
	fs->wflag = 0;
    1cd0:	14 82       	std	Z+4, r1	; 0x04
    1cd2:	ad cf       	rjmp	.-166    	; 0x1c2e <chk_mounted+0x49e>
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    1cd6:	47 3f       	cpi	r20, 0xF7	; 247
    1cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cda:	61 05       	cpc	r22, r1
    1cdc:	71 05       	cpc	r23, r1
    1cde:	80 f2       	brcs	.-96     	; 0x1c80 <chk_mounted+0x4f0>

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    1ce0:	ee 81       	ldd	r30, Y+6	; 0x06
    1ce2:	ff 81       	ldd	r31, Y+7	; 0x07
    1ce4:	e3 5a       	subi	r30, 0xA3	; 163
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 81       	ld	r24, Z
    1cea:	ee 81       	ldd	r30, Y+6	; 0x06
    1cec:	ff 81       	ldd	r31, Y+7	; 0x07
    1cee:	e4 5a       	subi	r30, 0xA4	; 164
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	40 81       	ld	r20, Z
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	ba 01       	movw	r22, r20
    1cfc:	55 27       	eor	r21, r21
    1cfe:	44 27       	eor	r20, r20
    1d00:	78 2b       	or	r23, r24
    1d02:	ee 81       	ldd	r30, Y+6	; 0x06
    1d04:	ff 81       	ldd	r31, Y+7	; 0x07
    1d06:	e6 5a       	subi	r30, 0xA6	; 166
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2b       	or	r20, r24
    1d0e:	ee 81       	ldd	r30, Y+6	; 0x06
    1d10:	ff 81       	ldd	r31, Y+7	; 0x07
    1d12:	e5 5a       	subi	r30, 0xA5	; 165
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	88 27       	eor	r24, r24
    1d1e:	a0 e0       	ldi	r26, 0x00	; 0
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	48 2b       	or	r20, r24
    1d24:	59 2b       	or	r21, r25
    1d26:	6a 2b       	or	r22, r26
    1d28:	7b 2b       	or	r23, r27
    1d2a:	ae 81       	ldd	r26, Y+6	; 0x06
    1d2c:	bf 81       	ldd	r27, Y+7	; 0x07
    1d2e:	92 96       	adiw	r26, 0x22	; 34
    1d30:	4d 93       	st	X+, r20
    1d32:	5d 93       	st	X+, r21
    1d34:	6d 93       	st	X+, r22
    1d36:	7c 93       	st	X, r23
    1d38:	95 97       	sbiw	r26, 0x25	; 37
    1d3a:	29 81       	ldd	r18, Y+1	; 0x01
    1d3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d3e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d40:	5c 81       	ldd	r21, Y+4	; 0x04
    1d42:	82 0e       	add	r8, r18
    1d44:	93 1e       	adc	r9, r19
    1d46:	a4 1e       	adc	r10, r20
    1d48:	b5 1e       	adc	r11, r21
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    1d4a:	48 0c       	add	r4, r8
    1d4c:	59 1c       	adc	r5, r9
    1d4e:	6a 1c       	adc	r6, r10
    1d50:	7b 1c       	adc	r7, r11
    1d52:	96 96       	adiw	r26, 0x26	; 38
    1d54:	4d 92       	st	X+, r4
    1d56:	5d 92       	st	X+, r5
    1d58:	6d 92       	st	X+, r6
    1d5a:	7c 92       	st	X, r7
    1d5c:	99 97       	sbiw	r26, 0x29	; 41

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	9f ef       	ldi	r25, 0xFF	; 255
    1d62:	dc 01       	movw	r26, r24
    1d64:	ee 81       	ldd	r30, Y+6	; 0x06
    1d66:	ff 81       	ldd	r31, Y+7	; 0x07
    1d68:	86 87       	std	Z+14, r24	; 0x0e
    1d6a:	97 87       	std	Z+15, r25	; 0x0f
    1d6c:	a0 8b       	std	Z+16, r26	; 0x10
    1d6e:	b1 8b       	std	Z+17, r27	; 0x11
	fs->wflag = 0;
    1d70:	14 82       	std	Z+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
    1d72:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1d74:	e1 5a       	subi	r30, 0xA1	; 161
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	98 2f       	mov	r25, r24
    1d7e:	88 27       	eor	r24, r24
    1d80:	ee 81       	ldd	r30, Y+6	; 0x06
    1d82:	ff 81       	ldd	r31, Y+7	; 0x07
    1d84:	e2 5a       	subi	r30, 0xA2	; 162
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	20 81       	ld	r18, Z
    1d8a:	82 2b       	or	r24, r18
    1d8c:	a7 01       	movw	r20, r14
    1d8e:	96 01       	movw	r18, r12
    1d90:	28 0f       	add	r18, r24
    1d92:	39 1f       	adc	r19, r25
    1d94:	41 1d       	adc	r20, r1
    1d96:	51 1d       	adc	r21, r1
    1d98:	ae 81       	ldd	r26, Y+6	; 0x06
    1d9a:	bf 81       	ldd	r27, Y+7	; 0x07
    1d9c:	52 96       	adiw	r26, 0x12	; 18
    1d9e:	2d 93       	st	X+, r18
    1da0:	3d 93       	st	X+, r19
    1da2:	4d 93       	st	X+, r20
    1da4:	5c 93       	st	X, r21
    1da6:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1da8:	01 e0       	ldi	r16, 0x01	; 1
    1daa:	bd 01       	movw	r22, r26
    1dac:	62 5d       	subi	r22, 0xD2	; 210
    1dae:	7f 4f       	sbci	r23, 0xFF	; 255
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	8c 91       	ld	r24, X
    1db4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <disk_read>
    1db8:	88 23       	and	r24, r24
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <chk_mounted+0x62e>
    1dbc:	76 ce       	rjmp	.-788    	; 0x1aaa <chk_mounted+0x31a>
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    1dbe:	83 e0       	ldi	r24, 0x03	; 3
    1dc0:	36 cf       	rjmp	.-404    	; 0x1c2e <chk_mounted+0x49e>
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */

	return FR_OK;
}
    1dc2:	27 96       	adiw	r28, 0x07	; 7
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	bf 90       	pop	r11
    1de0:	af 90       	pop	r10
    1de2:	9f 90       	pop	r9
    1de4:	8f 90       	pop	r8
    1de6:	7f 90       	pop	r7
    1de8:	6f 90       	pop	r6
    1dea:	5f 90       	pop	r5
    1dec:	4f 90       	pop	r4
    1dee:	3f 90       	pop	r3
    1df0:	2f 90       	pop	r2
    1df2:	08 95       	ret

00001df4 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    1df4:	81 11       	cpse	r24, r1
    1df6:	12 c0       	rjmp	.+36     	; 0x1e1c <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    1df8:	e0 91 b6 01 	lds	r30, 0x01B6
    1dfc:	f0 91 b7 01 	lds	r31, 0x01B7

	if (rfs) {
    1e00:	30 97       	sbiw	r30, 0x00	; 0
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <f_mount+0x12>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    1e04:	10 82       	st	Z, r1
	}

	if (fs) {
    1e06:	61 15       	cp	r22, r1
    1e08:	71 05       	cpc	r23, r1
    1e0a:	11 f0       	breq	.+4      	; 0x1e10 <f_mount+0x1c>
		fs->fs_type = 0;			/* Clear new fs object */
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	10 82       	st	Z, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    1e10:	70 93 b7 01 	sts	0x01B7, r23
    1e14:	60 93 b6 01 	sts	0x01B6, r22

	return FR_OK;
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    1e1c:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
    1e1e:	08 95       	ret

00001e20 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1e20:	4f 92       	push	r4
    1e22:	5f 92       	push	r5
    1e24:	6f 92       	push	r6
    1e26:	7f 92       	push	r7
    1e28:	8f 92       	push	r8
    1e2a:	9f 92       	push	r9
    1e2c:	af 92       	push	r10
    1e2e:	bf 92       	push	r11
    1e30:	cf 92       	push	r12
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	a4 97       	sbiw	r28, 0x24	; 36
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	7c 01       	movw	r14, r24
    1e52:	7c a3       	std	Y+36, r23	; 0x24
    1e54:	6b a3       	std	Y+35, r22	; 0x23
    1e56:	14 2f       	mov	r17, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    1e58:	dc 01       	movw	r26, r24
    1e5a:	1d 92       	st	X+, r1
    1e5c:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    1e5e:	4e 71       	andi	r20, 0x1E	; 30
    1e60:	be 01       	movw	r22, r28
    1e62:	6f 5f       	subi	r22, 0xFF	; 255
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	ce 01       	movw	r24, r28
    1e68:	83 96       	adiw	r24, 0x23	; 35
    1e6a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1e6e:	81 11       	cpse	r24, r1
    1e70:	26 c1       	rjmp	.+588    	; 0x20be <f_open+0x29e>
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    1e72:	01 2f       	mov	r16, r17
    1e74:	0f 71       	andi	r16, 0x1F	; 31
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	INITBUF(dj, sfn, lfn);
    1e76:	ce 01       	movw	r24, r28
    1e78:	47 96       	adiw	r24, 0x17	; 23
    1e7a:	9e 8b       	std	Y+22, r25	; 0x16
    1e7c:	8d 8b       	std	Y+21, r24	; 0x15
	res = follow_path(&dj, path);	/* Follow the file path */
    1e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e80:	7c a1       	ldd	r23, Y+36	; 0x24
    1e82:	46 97       	sbiw	r24, 0x16	; 22
    1e84:	0e 94 b2 09 	call	0x1364	; 0x1364 <follow_path>
    1e88:	98 2f       	mov	r25, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1e8a:	81 2f       	mov	r24, r17
    1e8c:	8c 71       	andi	r24, 0x1C	; 28
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <f_open+0x72>
    1e90:	76 c0       	rjmp	.+236    	; 0x1f7e <f_open+0x15e>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    1e92:	99 23       	and	r25, r25
    1e94:	69 f0       	breq	.+26     	; 0x1eb0 <f_open+0x90>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    1e96:	94 30       	cpi	r25, 0x04	; 4
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <f_open+0x7c>
    1e9a:	02 c1       	rjmp	.+516    	; 0x20a0 <f_open+0x280>
				res = dir_register(&dj);
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <dir_register>
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	0b c1       	rjmp	.+534    	; 0x20be <f_open+0x29e>
			mode |= FA_CREATE_ALWAYS;
    1ea8:	08 60       	ori	r16, 0x08	; 8
			dir = dj.dir;			/* Created entry (SFN entry) */
    1eaa:	cb 88       	ldd	r12, Y+19	; 0x13
    1eac:	dc 88       	ldd	r13, Y+20	; 0x14
    1eae:	55 c0       	rjmp	.+170    	; 0x1f5a <f_open+0x13a>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    1eb0:	12 fd       	sbrc	r17, 2
    1eb2:	f8 c0       	rjmp	.+496    	; 0x20a4 <f_open+0x284>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    1eb4:	cb 88       	ldd	r12, Y+19	; 0x13
    1eb6:	dc 88       	ldd	r13, Y+20	; 0x14
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    1eb8:	c1 14       	cp	r12, r1
    1eba:	d1 04       	cpc	r13, r1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <f_open+0xa0>
    1ebe:	f4 c0       	rjmp	.+488    	; 0x20a8 <f_open+0x288>
    1ec0:	f6 01       	movw	r30, r12
    1ec2:	83 85       	ldd	r24, Z+11	; 0x0b
    1ec4:	81 71       	andi	r24, 0x11	; 17
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <f_open+0xaa>
    1ec8:	f1 c0       	rjmp	.+482    	; 0x20ac <f_open+0x28c>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    1eca:	13 ff       	sbrs	r17, 3
    1ecc:	46 c0       	rjmp	.+140    	; 0x1f5a <f_open+0x13a>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    1ece:	85 88       	ldd	r8, Z+21	; 0x15
    1ed0:	91 2c       	mov	r9, r1
    1ed2:	98 2c       	mov	r9, r8
    1ed4:	88 24       	eor	r8, r8
    1ed6:	84 89       	ldd	r24, Z+20	; 0x14
    1ed8:	88 2a       	or	r8, r24
    1eda:	a1 2c       	mov	r10, r1
    1edc:	b1 2c       	mov	r11, r1
    1ede:	d4 01       	movw	r26, r8
    1ee0:	99 27       	eor	r25, r25
    1ee2:	88 27       	eor	r24, r24
    1ee4:	83 8c       	ldd	r8, Z+27	; 0x1b
    1ee6:	91 2c       	mov	r9, r1
    1ee8:	98 2c       	mov	r9, r8
    1eea:	88 24       	eor	r8, r8
    1eec:	22 8d       	ldd	r18, Z+26	; 0x1a
    1eee:	82 2a       	or	r8, r18
    1ef0:	a1 2c       	mov	r10, r1
    1ef2:	b1 2c       	mov	r11, r1
    1ef4:	88 2a       	or	r8, r24
    1ef6:	99 2a       	or	r9, r25
    1ef8:	aa 2a       	or	r10, r26
    1efa:	bb 2a       	or	r11, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    1efc:	14 8a       	std	Z+20, r1	; 0x14
    1efe:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    1f00:	12 8e       	std	Z+26, r1	; 0x1a
    1f02:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    1f04:	14 8e       	std	Z+28, r1	; 0x1c
    1f06:	15 8e       	std	Z+29, r1	; 0x1d
    1f08:	16 8e       	std	Z+30, r1	; 0x1e
    1f0a:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    1f0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    1f14:	42 a4       	ldd	r4, Z+42	; 0x2a
    1f16:	53 a4       	ldd	r5, Z+43	; 0x2b
    1f18:	64 a4       	ldd	r6, Z+44	; 0x2c
    1f1a:	75 a4       	ldd	r7, Z+45	; 0x2d
				if (cl) {
    1f1c:	81 14       	cp	r8, r1
    1f1e:	91 04       	cpc	r9, r1
    1f20:	a1 04       	cpc	r10, r1
    1f22:	b1 04       	cpc	r11, r1
    1f24:	91 f0       	breq	.+36     	; 0x1f4a <f_open+0x12a>
					res = remove_chain(dj.fs, cl);
    1f26:	b5 01       	movw	r22, r10
    1f28:	a4 01       	movw	r20, r8
    1f2a:	cf 01       	movw	r24, r30
    1f2c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <remove_chain>
					if (res) LEAVE_FF(dj.fs, res);
    1f30:	81 11       	cpse	r24, r1
    1f32:	c5 c0       	rjmp	.+394    	; 0x20be <f_open+0x29e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	88 1a       	sub	r8, r24
    1f3c:	91 08       	sbc	r9, r1
    1f3e:	a1 08       	sbc	r10, r1
    1f40:	b1 08       	sbc	r11, r1
    1f42:	82 86       	std	Z+10, r8	; 0x0a
    1f44:	93 86       	std	Z+11, r9	; 0x0b
    1f46:	a4 86       	std	Z+12, r10	; 0x0c
    1f48:	b5 86       	std	Z+13, r11	; 0x0d
				}
				res = move_window(dj.fs, ps);
    1f4a:	b3 01       	movw	r22, r6
    1f4c:	a2 01       	movw	r20, r4
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1f56:	81 11       	cpse	r24, r1
    1f58:	b2 c0       	rjmp	.+356    	; 0x20be <f_open+0x29e>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    1f5a:	03 ff       	sbrs	r16, 3
    1f5c:	21 c0       	rjmp	.+66     	; 0x1fa0 <f_open+0x180>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    1f5e:	d6 01       	movw	r26, r12
    1f60:	1b 96       	adiw	r26, 0x0b	; 11
    1f62:	1c 92       	st	X, r1
			ps = get_fattime();
    1f64:	0e 94 cd 01 	call	0x39a	; 0x39a <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    1f68:	f6 01       	movw	r30, r12
    1f6a:	66 87       	std	Z+14, r22	; 0x0e
    1f6c:	77 87       	std	Z+15, r23	; 0x0f
    1f6e:	80 8b       	std	Z+16, r24	; 0x10
    1f70:	91 8b       	std	Z+17, r25	; 0x11
			dj.fs->wflag = 1;
    1f72:	e9 81       	ldd	r30, Y+1	; 0x01
    1f74:	fa 81       	ldd	r31, Y+2	; 0x02
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    1f7a:	00 62       	ori	r16, 0x20	; 32
    1f7c:	11 c0       	rjmp	.+34     	; 0x1fa0 <f_open+0x180>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    1f7e:	91 11       	cpse	r25, r1
    1f80:	97 c0       	rjmp	.+302    	; 0x20b0 <f_open+0x290>
		dir = dj.dir;
    1f82:	cb 88       	ldd	r12, Y+19	; 0x13
    1f84:	dc 88       	ldd	r13, Y+20	; 0x14
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1f86:	c1 14       	cp	r12, r1
    1f88:	d1 04       	cpc	r13, r1
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <f_open+0x16e>
    1f8c:	93 c0       	rjmp	.+294    	; 0x20b4 <f_open+0x294>
    1f8e:	d6 01       	movw	r26, r12
    1f90:	1b 96       	adiw	r26, 0x0b	; 11
    1f92:	8c 91       	ld	r24, X
    1f94:	84 fd       	sbrc	r24, 4
    1f96:	90 c0       	rjmp	.+288    	; 0x20b8 <f_open+0x298>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1f98:	11 ff       	sbrs	r17, 1
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <f_open+0x180>
    1f9c:	80 fd       	sbrc	r24, 0
    1f9e:	8e c0       	rjmp	.+284    	; 0x20bc <f_open+0x29c>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	42 a5       	ldd	r20, Z+42	; 0x2a
    1fa6:	53 a5       	ldd	r21, Z+43	; 0x2b
    1fa8:	64 a5       	ldd	r22, Z+44	; 0x2c
    1faa:	75 a5       	ldd	r23, Z+45	; 0x2d
    1fac:	d7 01       	movw	r26, r14
    1fae:	5a 96       	adiw	r26, 0x1a	; 26
    1fb0:	4d 93       	st	X+, r20
    1fb2:	5d 93       	st	X+, r21
    1fb4:	6d 93       	st	X+, r22
    1fb6:	7c 93       	st	X, r23
    1fb8:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    1fba:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbe:	5f 96       	adiw	r26, 0x1f	; 31
    1fc0:	9c 93       	st	X, r25
    1fc2:	8e 93       	st	-X, r24
    1fc4:	5e 97       	sbiw	r26, 0x1e	; 30
#endif
	fp->flag = mode;					/* File access mode */
    1fc6:	14 96       	adiw	r26, 0x04	; 4
    1fc8:	0c 93       	st	X, r16
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1fca:	d6 01       	movw	r26, r12
    1fcc:	55 96       	adiw	r26, 0x15	; 21
    1fce:	8c 91       	ld	r24, X
    1fd0:	55 97       	sbiw	r26, 0x15	; 21
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	88 27       	eor	r24, r24
    1fd8:	54 96       	adiw	r26, 0x14	; 20
    1fda:	2c 91       	ld	r18, X
    1fdc:	82 2b       	or	r24, r18
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	5c 01       	movw	r10, r24
    1fe4:	99 24       	eor	r9, r9
    1fe6:	88 24       	eor	r8, r8
    1fe8:	d6 01       	movw	r26, r12
    1fea:	5b 96       	adiw	r26, 0x1b	; 27
    1fec:	4c 91       	ld	r20, X
    1fee:	5b 97       	sbiw	r26, 0x1b	; 27
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	54 2f       	mov	r21, r20
    1ff4:	44 27       	eor	r20, r20
    1ff6:	5a 96       	adiw	r26, 0x1a	; 26
    1ff8:	2c 91       	ld	r18, X
    1ffa:	42 2b       	or	r20, r18
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	48 29       	or	r20, r8
    2002:	59 29       	or	r21, r9
    2004:	6a 29       	or	r22, r10
    2006:	7b 29       	or	r23, r11
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
    2008:	d7 01       	movw	r26, r14
    200a:	1e 96       	adiw	r26, 0x0e	; 14
    200c:	4d 93       	st	X+, r20
    200e:	5d 93       	st	X+, r21
    2010:	6d 93       	st	X+, r22
    2012:	7c 93       	st	X, r23
    2014:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2016:	d6 01       	movw	r26, r12
    2018:	5f 96       	adiw	r26, 0x1f	; 31
    201a:	2c 91       	ld	r18, X
    201c:	5f 97       	sbiw	r26, 0x1f	; 31
    201e:	5e 96       	adiw	r26, 0x1e	; 30
    2020:	8c 91       	ld	r24, X
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e0       	ldi	r26, 0x00	; 0
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	dc 01       	movw	r26, r24
    202a:	99 27       	eor	r25, r25
    202c:	88 27       	eor	r24, r24
    202e:	ac 01       	movw	r20, r24
    2030:	bd 01       	movw	r22, r26
    2032:	72 2b       	or	r23, r18
    2034:	d6 01       	movw	r26, r12
    2036:	5c 96       	adiw	r26, 0x1c	; 28
    2038:	2c 91       	ld	r18, X
    203a:	db 01       	movw	r26, r22
    203c:	ca 01       	movw	r24, r20
    203e:	82 2b       	or	r24, r18
    2040:	8c 01       	movw	r16, r24
    2042:	9d 01       	movw	r18, r26
    2044:	d6 01       	movw	r26, r12
    2046:	5d 96       	adiw	r26, 0x1d	; 29
    2048:	4c 91       	ld	r20, X
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	54 2f       	mov	r21, r20
    204e:	44 27       	eor	r20, r20
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	40 2b       	or	r20, r16
    2056:	51 2b       	or	r21, r17
    2058:	62 2b       	or	r22, r18
    205a:	73 2b       	or	r23, r19
    205c:	d7 01       	movw	r26, r14
    205e:	1a 96       	adiw	r26, 0x0a	; 10
    2060:	4d 93       	st	X+, r20
    2062:	5d 93       	st	X+, r21
    2064:	6d 93       	st	X+, r22
    2066:	7c 93       	st	X, r23
    2068:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    206a:	16 96       	adiw	r26, 0x06	; 6
    206c:	1d 92       	st	X+, r1
    206e:	1d 92       	st	X+, r1
    2070:	1d 92       	st	X+, r1
    2072:	1c 92       	st	X, r1
    2074:	19 97       	sbiw	r26, 0x09	; 9
    2076:	8f ef       	ldi	r24, 0xFF	; 255
    2078:	15 96       	adiw	r26, 0x05	; 5
    207a:	8c 93       	st	X, r24
    207c:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    207e:	56 96       	adiw	r26, 0x16	; 22
    2080:	1d 92       	st	X+, r1
    2082:	1d 92       	st	X+, r1
    2084:	1d 92       	st	X+, r1
    2086:	1c 92       	st	X, r1
    2088:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    208a:	11 96       	adiw	r26, 0x01	; 1
    208c:	fc 93       	st	X, r31
    208e:	ee 93       	st	-X, r30
    2090:	86 81       	ldd	r24, Z+6	; 0x06
    2092:	97 81       	ldd	r25, Z+7	; 0x07
    2094:	13 96       	adiw	r26, 0x03	; 3
    2096:	9c 93       	st	X, r25
    2098:	8e 93       	st	-X, r24
    209a:	12 97       	sbiw	r26, 0x02	; 2

	LEAVE_FF(dj.fs, FR_OK);
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	0f c0       	rjmp	.+30     	; 0x20be <f_open+0x29e>
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	INITBUF(dj, sfn, lfn);
	res = follow_path(&dj, path);	/* Follow the file path */
    20a0:	89 2f       	mov	r24, r25
    20a2:	0d c0       	rjmp	.+26     	; 0x20be <f_open+0x29e>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;			/* Created entry (SFN entry) */
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
    20a4:	88 e0       	ldi	r24, 0x08	; 8
    20a6:	0b c0       	rjmp	.+22     	; 0x20be <f_open+0x29e>
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
    20a8:	87 e0       	ldi	r24, 0x07	; 7
    20aa:	09 c0       	rjmp	.+18     	; 0x20be <f_open+0x29e>
    20ac:	87 e0       	ldi	r24, 0x07	; 7
    20ae:	07 c0       	rjmp	.+14     	; 0x20be <f_open+0x29e>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    20b0:	89 2f       	mov	r24, r25
    20b2:	05 c0       	rjmp	.+10     	; 0x20be <f_open+0x29e>
		dir = dj.dir;
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
			LEAVE_FF(dj.fs, FR_NO_FILE);
    20b4:	84 e0       	ldi	r24, 0x04	; 4
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <f_open+0x29e>
    20b8:	84 e0       	ldi	r24, 0x04	; 4
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <f_open+0x29e>
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
    20bc:	87 e0       	ldi	r24, 0x07	; 7
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
}
    20be:	a4 96       	adiw	r28, 0x24	; 36
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	df 90       	pop	r13
    20d8:	cf 90       	pop	r12
    20da:	bf 90       	pop	r11
    20dc:	af 90       	pop	r10
    20de:	9f 90       	pop	r9
    20e0:	8f 90       	pop	r8
    20e2:	7f 90       	pop	r7
    20e4:	6f 90       	pop	r6
    20e6:	5f 90       	pop	r5
    20e8:	4f 90       	pop	r4
    20ea:	08 95       	ret

000020ec <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    20ec:	2f 92       	push	r2
    20ee:	3f 92       	push	r3
    20f0:	4f 92       	push	r4
    20f2:	5f 92       	push	r5
    20f4:	6f 92       	push	r6
    20f6:	7f 92       	push	r7
    20f8:	8f 92       	push	r8
    20fa:	9f 92       	push	r9
    20fc:	af 92       	push	r10
    20fe:	bf 92       	push	r11
    2100:	cf 92       	push	r12
    2102:	df 92       	push	r13
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	00 d0       	rcall	.+0      	; 0x2110 <f_write+0x24>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <f_write+0x26>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
    211a:	4b 01       	movw	r8, r22
    211c:	6a 01       	movw	r12, r20
    211e:	59 01       	movw	r10, r18
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    2120:	d9 01       	movw	r26, r18
    2122:	1d 92       	st	X+, r1
    2124:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    2126:	fc 01       	movw	r30, r24
    2128:	62 81       	ldd	r22, Z+2	; 0x02
    212a:	73 81       	ldd	r23, Z+3	; 0x03
    212c:	80 81       	ld	r24, Z
    212e:	91 81       	ldd	r25, Z+1	; 0x01
    2130:	0e 94 71 03 	call	0x6e2	; 0x6e2 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2134:	81 11       	cpse	r24, r1
    2136:	cf c1       	rjmp	.+926    	; 0x24d6 <f_write+0x3ea>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    2138:	ab 81       	ldd	r26, Y+3	; 0x03
    213a:	bc 81       	ldd	r27, Y+4	; 0x04
    213c:	14 96       	adiw	r26, 0x04	; 4
    213e:	8c 91       	ld	r24, X
    2140:	14 97       	sbiw	r26, 0x04	; 4
    2142:	88 23       	and	r24, r24
    2144:	0c f4       	brge	.+2      	; 0x2148 <f_write+0x5c>
    2146:	c4 c1       	rjmp	.+904    	; 0x24d0 <f_write+0x3e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    2148:	81 ff       	sbrs	r24, 1
    214a:	c4 c1       	rjmp	.+904    	; 0x24d4 <f_write+0x3e8>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    214c:	1a 96       	adiw	r26, 0x0a	; 10
    214e:	8d 91       	ld	r24, X+
    2150:	9d 91       	ld	r25, X+
    2152:	0d 90       	ld	r0, X+
    2154:	bc 91       	ld	r27, X
    2156:	a0 2d       	mov	r26, r0
    2158:	ac 01       	movw	r20, r24
    215a:	bd 01       	movw	r22, r26
    215c:	4c 0d       	add	r20, r12
    215e:	5d 1d       	adc	r21, r13
    2160:	61 1d       	adc	r22, r1
    2162:	71 1d       	adc	r23, r1
    2164:	48 17       	cp	r20, r24
    2166:	59 07       	cpc	r21, r25
    2168:	6a 07       	cpc	r22, r26
    216a:	7b 07       	cpc	r23, r27
    216c:	08 f4       	brcc	.+2      	; 0x2170 <f_write+0x84>
    216e:	93 c1       	rjmp	.+806    	; 0x2496 <f_write+0x3aa>

	for ( ;  btw;									/* Repeat until all data transferred */
    2170:	c1 14       	cp	r12, r1
    2172:	d1 04       	cpc	r13, r1
    2174:	09 f4       	brne	.+2      	; 0x2178 <f_write+0x8c>
    2176:	8f c1       	rjmp	.+798    	; 0x2496 <f_write+0x3aa>
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    2178:	eb 81       	ldd	r30, Y+3	; 0x03
    217a:	fc 81       	ldd	r31, Y+4	; 0x04
    217c:	b0 96       	adiw	r30, 0x20	; 32
    217e:	fa 83       	std	Y+2, r31	; 0x02
    2180:	e9 83       	std	Y+1, r30	; 0x01
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    2182:	ab 81       	ldd	r26, Y+3	; 0x03
    2184:	bc 81       	ldd	r27, Y+4	; 0x04
    2186:	16 96       	adiw	r26, 0x06	; 6
    2188:	4d 91       	ld	r20, X+
    218a:	5d 91       	ld	r21, X+
    218c:	6d 91       	ld	r22, X+
    218e:	7c 91       	ld	r23, X
    2190:	19 97       	sbiw	r26, 0x09	; 9
    2192:	db 01       	movw	r26, r22
    2194:	ca 01       	movw	r24, r20
    2196:	91 70       	andi	r25, 0x01	; 1
    2198:	aa 27       	eor	r26, r26
    219a:	bb 27       	eor	r27, r27
    219c:	89 2b       	or	r24, r25
    219e:	8a 2b       	or	r24, r26
    21a0:	8b 2b       	or	r24, r27
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <f_write+0xba>
    21a4:	37 c1       	rjmp	.+622    	; 0x2414 <f_write+0x328>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    21a6:	ab 81       	ldd	r26, Y+3	; 0x03
    21a8:	bc 81       	ldd	r27, Y+4	; 0x04
    21aa:	ed 91       	ld	r30, X+
    21ac:	fc 91       	ld	r31, X
    21ae:	11 97       	sbiw	r26, 0x01	; 1
    21b0:	15 96       	adiw	r26, 0x05	; 5
    21b2:	9c 91       	ld	r25, X
    21b4:	15 97       	sbiw	r26, 0x05	; 5
    21b6:	82 81       	ldd	r24, Z+2	; 0x02
    21b8:	98 17       	cp	r25, r24
    21ba:	08 f4       	brcc	.+2      	; 0x21be <f_write+0xd2>
    21bc:	50 c0       	rjmp	.+160    	; 0x225e <f_write+0x172>
				if (fp->fptr == 0) {				/* On the top of the file? */
    21be:	45 2b       	or	r20, r21
    21c0:	46 2b       	or	r20, r22
    21c2:	47 2b       	or	r20, r23
    21c4:	c1 f4       	brne	.+48     	; 0x21f6 <f_write+0x10a>
					clst = fp->org_clust;			/* Follow from the origin */
    21c6:	1e 96       	adiw	r26, 0x0e	; 14
    21c8:	6d 91       	ld	r22, X+
    21ca:	7d 91       	ld	r23, X+
    21cc:	8d 91       	ld	r24, X+
    21ce:	9c 91       	ld	r25, X
    21d0:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    21d2:	61 15       	cp	r22, r1
    21d4:	71 05       	cpc	r23, r1
    21d6:	81 05       	cpc	r24, r1
    21d8:	91 05       	cpc	r25, r1
    21da:	f1 f4       	brne	.+60     	; 0x2218 <f_write+0x12c>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	ba 01       	movw	r22, r20
    21e2:	cf 01       	movw	r24, r30
    21e4:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <create_chain>
    21e8:	eb 81       	ldd	r30, Y+3	; 0x03
    21ea:	fc 81       	ldd	r31, Y+4	; 0x04
    21ec:	66 87       	std	Z+14, r22	; 0x0e
    21ee:	77 87       	std	Z+15, r23	; 0x0f
    21f0:	80 8b       	std	Z+16, r24	; 0x10
    21f2:	91 8b       	std	Z+17, r25	; 0x11
    21f4:	0b c0       	rjmp	.+22     	; 0x220c <f_write+0x120>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    21f6:	ab 81       	ldd	r26, Y+3	; 0x03
    21f8:	bc 81       	ldd	r27, Y+4	; 0x04
    21fa:	52 96       	adiw	r26, 0x12	; 18
    21fc:	4d 91       	ld	r20, X+
    21fe:	5d 91       	ld	r21, X+
    2200:	6d 91       	ld	r22, X+
    2202:	7c 91       	ld	r23, X
    2204:	55 97       	sbiw	r26, 0x15	; 21
    2206:	cf 01       	movw	r24, r30
    2208:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    220c:	61 15       	cp	r22, r1
    220e:	71 05       	cpc	r23, r1
    2210:	81 05       	cpc	r24, r1
    2212:	91 05       	cpc	r25, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <f_write+0x12c>
    2216:	3f c1       	rjmp	.+638    	; 0x2496 <f_write+0x3aa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2218:	61 30       	cpi	r22, 0x01	; 1
    221a:	71 05       	cpc	r23, r1
    221c:	81 05       	cpc	r24, r1
    221e:	91 05       	cpc	r25, r1
    2220:	39 f4       	brne	.+14     	; 0x2230 <f_write+0x144>
    2222:	eb 81       	ldd	r30, Y+3	; 0x03
    2224:	fc 81       	ldd	r31, Y+4	; 0x04
    2226:	84 81       	ldd	r24, Z+4	; 0x04
    2228:	80 68       	ori	r24, 0x80	; 128
    222a:	84 83       	std	Z+4, r24	; 0x04
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	53 c1       	rjmp	.+678    	; 0x24d6 <f_write+0x3ea>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2230:	6f 3f       	cpi	r22, 0xFF	; 255
    2232:	ff ef       	ldi	r31, 0xFF	; 255
    2234:	7f 07       	cpc	r23, r31
    2236:	8f 07       	cpc	r24, r31
    2238:	9f 07       	cpc	r25, r31
    223a:	51 f4       	brne	.+20     	; 0x2250 <f_write+0x164>
    223c:	ab 81       	ldd	r26, Y+3	; 0x03
    223e:	bc 81       	ldd	r27, Y+4	; 0x04
    2240:	14 96       	adiw	r26, 0x04	; 4
    2242:	8c 91       	ld	r24, X
    2244:	14 97       	sbiw	r26, 0x04	; 4
    2246:	80 68       	ori	r24, 0x80	; 128
    2248:	14 96       	adiw	r26, 0x04	; 4
    224a:	8c 93       	st	X, r24
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	43 c1       	rjmp	.+646    	; 0x24d6 <f_write+0x3ea>
				fp->curr_clust = clst;				/* Update current cluster */
    2250:	eb 81       	ldd	r30, Y+3	; 0x03
    2252:	fc 81       	ldd	r31, Y+4	; 0x04
    2254:	62 8b       	std	Z+18, r22	; 0x12
    2256:	73 8b       	std	Z+19, r23	; 0x13
    2258:	84 8b       	std	Z+20, r24	; 0x14
    225a:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    225c:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    225e:	ab 81       	ldd	r26, Y+3	; 0x03
    2260:	bc 81       	ldd	r27, Y+4	; 0x04
    2262:	14 96       	adiw	r26, 0x04	; 4
    2264:	8c 91       	ld	r24, X
    2266:	14 97       	sbiw	r26, 0x04	; 4
    2268:	86 ff       	sbrs	r24, 6
    226a:	1f c0       	rjmp	.+62     	; 0x22aa <f_write+0x1be>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    226c:	56 96       	adiw	r26, 0x16	; 22
    226e:	2d 91       	ld	r18, X+
    2270:	3d 91       	ld	r19, X+
    2272:	4d 91       	ld	r20, X+
    2274:	5c 91       	ld	r21, X
    2276:	59 97       	sbiw	r26, 0x19	; 25
    2278:	ed 91       	ld	r30, X+
    227a:	fc 91       	ld	r31, X
    227c:	01 e0       	ldi	r16, 0x01	; 1
    227e:	69 81       	ldd	r22, Y+1	; 0x01
    2280:	7a 81       	ldd	r23, Y+2	; 0x02
    2282:	81 81       	ldd	r24, Z+1	; 0x01
    2284:	0e 94 87 01 	call	0x30e	; 0x30e <disk_write>
    2288:	88 23       	and	r24, r24
    228a:	39 f0       	breq	.+14     	; 0x229a <f_write+0x1ae>
					ABORT(fp->fs, FR_DISK_ERR);
    228c:	eb 81       	ldd	r30, Y+3	; 0x03
    228e:	fc 81       	ldd	r31, Y+4	; 0x04
    2290:	84 81       	ldd	r24, Z+4	; 0x04
    2292:	80 68       	ori	r24, 0x80	; 128
    2294:	84 83       	std	Z+4, r24	; 0x04
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	1e c1       	rjmp	.+572    	; 0x24d6 <f_write+0x3ea>
				fp->flag &= ~FA__DIRTY;
    229a:	ab 81       	ldd	r26, Y+3	; 0x03
    229c:	bc 81       	ldd	r27, Y+4	; 0x04
    229e:	14 96       	adiw	r26, 0x04	; 4
    22a0:	8c 91       	ld	r24, X
    22a2:	14 97       	sbiw	r26, 0x04	; 4
    22a4:	8f 7b       	andi	r24, 0xBF	; 191
    22a6:	14 96       	adiw	r26, 0x04	; 4
    22a8:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    22aa:	eb 81       	ldd	r30, Y+3	; 0x03
    22ac:	fc 81       	ldd	r31, Y+4	; 0x04
    22ae:	20 80       	ld	r2, Z
    22b0:	31 80       	ldd	r3, Z+1	; 0x01
    22b2:	42 89       	ldd	r20, Z+18	; 0x12
    22b4:	53 89       	ldd	r21, Z+19	; 0x13
    22b6:	64 89       	ldd	r22, Z+20	; 0x14
    22b8:	75 89       	ldd	r23, Z+21	; 0x15
    22ba:	c1 01       	movw	r24, r2
    22bc:	0e 94 87 07 	call	0xf0e	; 0xf0e <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    22c0:	61 15       	cp	r22, r1
    22c2:	71 05       	cpc	r23, r1
    22c4:	81 05       	cpc	r24, r1
    22c6:	91 05       	cpc	r25, r1
    22c8:	51 f4       	brne	.+20     	; 0x22de <f_write+0x1f2>
    22ca:	ab 81       	ldd	r26, Y+3	; 0x03
    22cc:	bc 81       	ldd	r27, Y+4	; 0x04
    22ce:	14 96       	adiw	r26, 0x04	; 4
    22d0:	8c 91       	ld	r24, X
    22d2:	14 97       	sbiw	r26, 0x04	; 4
    22d4:	80 68       	ori	r24, 0x80	; 128
    22d6:	14 96       	adiw	r26, 0x04	; 4
    22d8:	8c 93       	st	X, r24
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	fc c0       	rjmp	.+504    	; 0x24d6 <f_write+0x3ea>
			sect += fp->csect;
    22de:	eb 81       	ldd	r30, Y+3	; 0x03
    22e0:	fc 81       	ldd	r31, Y+4	; 0x04
    22e2:	45 81       	ldd	r20, Z+5	; 0x05
    22e4:	2b 01       	movw	r4, r22
    22e6:	3c 01       	movw	r6, r24
    22e8:	44 0e       	add	r4, r20
    22ea:	51 1c       	adc	r5, r1
    22ec:	61 1c       	adc	r6, r1
    22ee:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    22f0:	76 01       	movw	r14, r12
    22f2:	ef 2c       	mov	r14, r15
    22f4:	ff 24       	eor	r15, r15
    22f6:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    22f8:	e1 14       	cp	r14, r1
    22fa:	f1 04       	cpc	r15, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <f_write+0x214>
    22fe:	51 c0       	rjmp	.+162    	; 0x23a2 <f_write+0x2b6>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2300:	d1 01       	movw	r26, r2
    2302:	12 96       	adiw	r26, 0x02	; 2
    2304:	5c 91       	ld	r21, X
    2306:	25 2f       	mov	r18, r21
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	c7 01       	movw	r24, r14
    230c:	84 0f       	add	r24, r20
    230e:	91 1d       	adc	r25, r1
    2310:	28 17       	cp	r18, r24
    2312:	39 07       	cpc	r19, r25
    2314:	18 f4       	brcc	.+6      	; 0x231c <f_write+0x230>
					cc = fp->fs->csize - fp->csect;
    2316:	79 01       	movw	r14, r18
    2318:	e4 1a       	sub	r14, r20
    231a:	f1 08       	sbc	r15, r1
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    231c:	0e 2d       	mov	r16, r14
    231e:	a3 01       	movw	r20, r6
    2320:	92 01       	movw	r18, r4
    2322:	b4 01       	movw	r22, r8
    2324:	f1 01       	movw	r30, r2
    2326:	81 81       	ldd	r24, Z+1	; 0x01
    2328:	0e 94 87 01 	call	0x30e	; 0x30e <disk_write>
    232c:	88 23       	and	r24, r24
    232e:	51 f0       	breq	.+20     	; 0x2344 <f_write+0x258>
					ABORT(fp->fs, FR_DISK_ERR);
    2330:	ab 81       	ldd	r26, Y+3	; 0x03
    2332:	bc 81       	ldd	r27, Y+4	; 0x04
    2334:	14 96       	adiw	r26, 0x04	; 4
    2336:	8c 91       	ld	r24, X
    2338:	14 97       	sbiw	r26, 0x04	; 4
    233a:	80 68       	ori	r24, 0x80	; 128
    233c:	14 96       	adiw	r26, 0x04	; 4
    233e:	8c 93       	st	X, r24
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	c9 c0       	rjmp	.+402    	; 0x24d6 <f_write+0x3ea>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    2344:	eb 81       	ldd	r30, Y+3	; 0x03
    2346:	fc 81       	ldd	r31, Y+4	; 0x04
    2348:	86 89       	ldd	r24, Z+22	; 0x16
    234a:	97 89       	ldd	r25, Z+23	; 0x17
    234c:	a0 8d       	ldd	r26, Z+24	; 0x18
    234e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2350:	84 19       	sub	r24, r4
    2352:	95 09       	sbc	r25, r5
    2354:	a6 09       	sbc	r26, r6
    2356:	b7 09       	sbc	r27, r7
    2358:	a7 01       	movw	r20, r14
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	84 17       	cp	r24, r20
    2360:	95 07       	cpc	r25, r21
    2362:	a6 07       	cpc	r26, r22
    2364:	b7 07       	cpc	r27, r23
    2366:	a0 f4       	brcc	.+40     	; 0x2390 <f_write+0x2a4>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    2368:	98 2f       	mov	r25, r24
    236a:	88 27       	eor	r24, r24
    236c:	99 0f       	add	r25, r25
    236e:	b4 01       	movw	r22, r8
    2370:	68 0f       	add	r22, r24
    2372:	79 1f       	adc	r23, r25
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	52 e0       	ldi	r21, 0x02	; 2
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    2380:	ab 81       	ldd	r26, Y+3	; 0x03
    2382:	bc 81       	ldd	r27, Y+4	; 0x04
    2384:	14 96       	adiw	r26, 0x04	; 4
    2386:	8c 91       	ld	r24, X
    2388:	14 97       	sbiw	r26, 0x04	; 4
    238a:	8f 7b       	andi	r24, 0xBF	; 191
    238c:	14 96       	adiw	r26, 0x04	; 4
    238e:	8c 93       	st	X, r24
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    2390:	eb 81       	ldd	r30, Y+3	; 0x03
    2392:	fc 81       	ldd	r31, Y+4	; 0x04
    2394:	85 81       	ldd	r24, Z+5	; 0x05
    2396:	8e 0d       	add	r24, r14
    2398:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    239a:	fe 2c       	mov	r15, r14
    239c:	ee 24       	eor	r14, r14
    239e:	ff 0c       	add	r15, r15
				continue;
    23a0:	5e c0       	rjmp	.+188    	; 0x245e <f_write+0x372>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    23a2:	eb 81       	ldd	r30, Y+3	; 0x03
    23a4:	fc 81       	ldd	r31, Y+4	; 0x04
    23a6:	86 89       	ldd	r24, Z+22	; 0x16
    23a8:	97 89       	ldd	r25, Z+23	; 0x17
    23aa:	a0 8d       	ldd	r26, Z+24	; 0x18
    23ac:	b1 8d       	ldd	r27, Z+25	; 0x19
    23ae:	84 15       	cp	r24, r4
    23b0:	95 05       	cpc	r25, r5
    23b2:	a6 05       	cpc	r26, r6
    23b4:	b7 05       	cpc	r27, r7
    23b6:	01 f1       	breq	.+64     	; 0x23f8 <f_write+0x30c>
				if (fp->fptr < fp->fsize &&
    23b8:	46 81       	ldd	r20, Z+6	; 0x06
    23ba:	57 81       	ldd	r21, Z+7	; 0x07
    23bc:	60 85       	ldd	r22, Z+8	; 0x08
    23be:	71 85       	ldd	r23, Z+9	; 0x09
    23c0:	82 85       	ldd	r24, Z+10	; 0x0a
    23c2:	93 85       	ldd	r25, Z+11	; 0x0b
    23c4:	a4 85       	ldd	r26, Z+12	; 0x0c
    23c6:	b5 85       	ldd	r27, Z+13	; 0x0d
    23c8:	48 17       	cp	r20, r24
    23ca:	59 07       	cpc	r21, r25
    23cc:	6a 07       	cpc	r22, r26
    23ce:	7b 07       	cpc	r23, r27
    23d0:	98 f4       	brcc	.+38     	; 0x23f8 <f_write+0x30c>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    23d2:	01 e0       	ldi	r16, 0x01	; 1
    23d4:	a3 01       	movw	r20, r6
    23d6:	92 01       	movw	r18, r4
    23d8:	69 81       	ldd	r22, Y+1	; 0x01
    23da:	7a 81       	ldd	r23, Y+2	; 0x02
    23dc:	d1 01       	movw	r26, r2
    23de:	11 96       	adiw	r26, 0x01	; 1
    23e0:	8c 91       	ld	r24, X
    23e2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (fp->fptr < fp->fsize &&
    23e6:	88 23       	and	r24, r24
    23e8:	39 f0       	breq	.+14     	; 0x23f8 <f_write+0x30c>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    23ea:	eb 81       	ldd	r30, Y+3	; 0x03
    23ec:	fc 81       	ldd	r31, Y+4	; 0x04
    23ee:	84 81       	ldd	r24, Z+4	; 0x04
    23f0:	80 68       	ori	r24, 0x80	; 128
    23f2:	84 83       	std	Z+4, r24	; 0x04
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	6f c0       	rjmp	.+222    	; 0x24d6 <f_write+0x3ea>
			}
#endif
			fp->dsect = sect;
    23f8:	ab 81       	ldd	r26, Y+3	; 0x03
    23fa:	bc 81       	ldd	r27, Y+4	; 0x04
    23fc:	56 96       	adiw	r26, 0x16	; 22
    23fe:	4d 92       	st	X+, r4
    2400:	5d 92       	st	X+, r5
    2402:	6d 92       	st	X+, r6
    2404:	7c 92       	st	X, r7
    2406:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    2408:	15 96       	adiw	r26, 0x05	; 5
    240a:	8c 91       	ld	r24, X
    240c:	15 97       	sbiw	r26, 0x05	; 5
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	15 96       	adiw	r26, 0x05	; 5
    2412:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    2414:	eb 81       	ldd	r30, Y+3	; 0x03
    2416:	fc 81       	ldd	r31, Y+4	; 0x04
    2418:	86 81       	ldd	r24, Z+6	; 0x06
    241a:	97 81       	ldd	r25, Z+7	; 0x07
    241c:	a0 85       	ldd	r26, Z+8	; 0x08
    241e:	b1 85       	ldd	r27, Z+9	; 0x09
    2420:	ac 01       	movw	r20, r24
    2422:	51 70       	andi	r21, 0x01	; 1
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	32 e0       	ldi	r19, 0x02	; 2
    2428:	24 1b       	sub	r18, r20
    242a:	35 0b       	sbc	r19, r21
    242c:	76 01       	movw	r14, r12
    242e:	2c 15       	cp	r18, r12
    2430:	3d 05       	cpc	r19, r13
    2432:	08 f4       	brcc	.+2      	; 0x2436 <f_write+0x34a>
    2434:	79 01       	movw	r14, r18
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2436:	91 70       	andi	r25, 0x01	; 1
    2438:	aa 27       	eor	r26, r26
    243a:	bb 27       	eor	r27, r27
    243c:	80 96       	adiw	r24, 0x20	; 32
    243e:	a7 01       	movw	r20, r14
    2440:	b4 01       	movw	r22, r8
    2442:	2b 81       	ldd	r18, Y+3	; 0x03
    2444:	3c 81       	ldd	r19, Y+4	; 0x04
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
		fp->flag |= FA__DIRTY;
    244e:	ab 81       	ldd	r26, Y+3	; 0x03
    2450:	bc 81       	ldd	r27, Y+4	; 0x04
    2452:	14 96       	adiw	r26, 0x04	; 4
    2454:	8c 91       	ld	r24, X
    2456:	14 97       	sbiw	r26, 0x04	; 4
    2458:	80 64       	ori	r24, 0x40	; 64
    245a:	14 96       	adiw	r26, 0x04	; 4
    245c:	8c 93       	st	X, r24
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    245e:	8e 0c       	add	r8, r14
    2460:	9f 1c       	adc	r9, r15
    2462:	eb 81       	ldd	r30, Y+3	; 0x03
    2464:	fc 81       	ldd	r31, Y+4	; 0x04
    2466:	86 81       	ldd	r24, Z+6	; 0x06
    2468:	97 81       	ldd	r25, Z+7	; 0x07
    246a:	a0 85       	ldd	r26, Z+8	; 0x08
    246c:	b1 85       	ldd	r27, Z+9	; 0x09
    246e:	8e 0d       	add	r24, r14
    2470:	9f 1d       	adc	r25, r15
    2472:	a1 1d       	adc	r26, r1
    2474:	b1 1d       	adc	r27, r1
    2476:	86 83       	std	Z+6, r24	; 0x06
    2478:	97 83       	std	Z+7, r25	; 0x07
    247a:	a0 87       	std	Z+8, r26	; 0x08
    247c:	b1 87       	std	Z+9, r27	; 0x09
    247e:	d5 01       	movw	r26, r10
    2480:	8d 91       	ld	r24, X+
    2482:	9c 91       	ld	r25, X
    2484:	11 97       	sbiw	r26, 0x01	; 1
    2486:	8e 0d       	add	r24, r14
    2488:	9f 1d       	adc	r25, r15
    248a:	8d 93       	st	X+, r24
    248c:	9c 93       	st	X, r25
    248e:	ce 18       	sub	r12, r14
    2490:	df 08       	sbc	r13, r15
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    2492:	09 f0       	breq	.+2      	; 0x2496 <f_write+0x3aa>
    2494:	76 ce       	rjmp	.-788    	; 0x2182 <f_write+0x96>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2496:	eb 81       	ldd	r30, Y+3	; 0x03
    2498:	fc 81       	ldd	r31, Y+4	; 0x04
    249a:	86 81       	ldd	r24, Z+6	; 0x06
    249c:	97 81       	ldd	r25, Z+7	; 0x07
    249e:	a0 85       	ldd	r26, Z+8	; 0x08
    24a0:	b1 85       	ldd	r27, Z+9	; 0x09
    24a2:	42 85       	ldd	r20, Z+10	; 0x0a
    24a4:	53 85       	ldd	r21, Z+11	; 0x0b
    24a6:	64 85       	ldd	r22, Z+12	; 0x0c
    24a8:	75 85       	ldd	r23, Z+13	; 0x0d
    24aa:	48 17       	cp	r20, r24
    24ac:	59 07       	cpc	r21, r25
    24ae:	6a 07       	cpc	r22, r26
    24b0:	7b 07       	cpc	r23, r27
    24b2:	20 f4       	brcc	.+8      	; 0x24bc <f_write+0x3d0>
    24b4:	82 87       	std	Z+10, r24	; 0x0a
    24b6:	93 87       	std	Z+11, r25	; 0x0b
    24b8:	a4 87       	std	Z+12, r26	; 0x0c
    24ba:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    24bc:	ab 81       	ldd	r26, Y+3	; 0x03
    24be:	bc 81       	ldd	r27, Y+4	; 0x04
    24c0:	14 96       	adiw	r26, 0x04	; 4
    24c2:	8c 91       	ld	r24, X
    24c4:	14 97       	sbiw	r26, 0x04	; 4
    24c6:	80 62       	ori	r24, 0x20	; 32
    24c8:	14 96       	adiw	r26, 0x04	; 4
    24ca:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <f_write+0x3ea>
	*bw = 0;	/* Initialize bytes written */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <f_write+0x3ea>
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    24d4:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	bf 90       	pop	r11
    24ee:	af 90       	pop	r10
    24f0:	9f 90       	pop	r9
    24f2:	8f 90       	pop	r8
    24f4:	7f 90       	pop	r7
    24f6:	6f 90       	pop	r6
    24f8:	5f 90       	pop	r5
    24fa:	4f 90       	pop	r4
    24fc:	3f 90       	pop	r3
    24fe:	2f 90       	pop	r2
    2500:	08 95       	ret

00002502 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    250c:	6a 81       	ldd	r22, Y+2	; 0x02
    250e:	7b 81       	ldd	r23, Y+3	; 0x03
    2510:	88 81       	ld	r24, Y
    2512:	99 81       	ldd	r25, Y+1	; 0x01
    2514:	0e 94 71 03 	call	0x6e2	; 0x6e2 <validate>
	if (res == FR_OK) {
    2518:	81 11       	cpse	r24, r1
    251a:	4d c0       	rjmp	.+154    	; 0x25b6 <f_sync+0xb4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	85 ff       	sbrs	r24, 5
    2520:	47 c0       	rjmp	.+142    	; 0x25b0 <f_sync+0xae>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    2522:	86 ff       	sbrs	r24, 6
    2524:	12 c0       	rjmp	.+36     	; 0x254a <f_sync+0x48>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    2526:	2e 89       	ldd	r18, Y+22	; 0x16
    2528:	3f 89       	ldd	r19, Y+23	; 0x17
    252a:	48 8d       	ldd	r20, Y+24	; 0x18
    252c:	59 8d       	ldd	r21, Y+25	; 0x19
    252e:	e8 81       	ld	r30, Y
    2530:	f9 81       	ldd	r31, Y+1	; 0x01
    2532:	01 e0       	ldi	r16, 0x01	; 1
    2534:	be 01       	movw	r22, r28
    2536:	60 5e       	subi	r22, 0xE0	; 224
    2538:	7f 4f       	sbci	r23, 0xFF	; 255
    253a:	81 81       	ldd	r24, Z+1	; 0x01
    253c:	0e 94 87 01 	call	0x30e	; 0x30e <disk_write>
    2540:	81 11       	cpse	r24, r1
    2542:	38 c0       	rjmp	.+112    	; 0x25b4 <f_sync+0xb2>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	8f 7b       	andi	r24, 0xBF	; 191
    2548:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    254a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    254c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    254e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2550:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2552:	88 81       	ld	r24, Y
    2554:	99 81       	ldd	r25, Y+1	; 0x01
    2556:	0e 94 8a 02 	call	0x514	; 0x514 <move_window>
			if (res == FR_OK) {
    255a:	81 11       	cpse	r24, r1
    255c:	2c c0       	rjmp	.+88     	; 0x25b6 <f_sync+0xb4>
				dir = fp->dir_ptr;
    255e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2560:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2562:	f8 01       	movw	r30, r16
    2564:	83 85       	ldd	r24, Z+11	; 0x0b
    2566:	80 62       	ori	r24, 0x20	; 32
    2568:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    256a:	8a 85       	ldd	r24, Y+10	; 0x0a
    256c:	84 8f       	std	Z+28, r24	; 0x1c
    256e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2570:	85 8f       	std	Z+29, r24	; 0x1d
    2572:	8c 85       	ldd	r24, Y+12	; 0x0c
    2574:	86 8f       	std	Z+30, r24	; 0x1e
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    257a:	8e 85       	ldd	r24, Y+14	; 0x0e
    257c:	82 8f       	std	Z+26, r24	; 0x1a
    257e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2580:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    2582:	88 89       	ldd	r24, Y+16	; 0x10
    2584:	84 8b       	std	Z+20, r24	; 0x14
    2586:	89 89       	ldd	r24, Y+17	; 0x11
    2588:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
    258a:	0e 94 cd 01 	call	0x39a	; 0x39a <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    258e:	f8 01       	movw	r30, r16
    2590:	66 8b       	std	Z+22, r22	; 0x16
    2592:	77 8b       	std	Z+23, r23	; 0x17
    2594:	80 8f       	std	Z+24, r24	; 0x18
    2596:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	8f 7d       	andi	r24, 0xDF	; 223
    259c:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    259e:	e8 81       	ld	r30, Y
    25a0:	f9 81       	ldd	r31, Y+1	; 0x01
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    25a6:	88 81       	ld	r24, Y
    25a8:	99 81       	ldd	r25, Y+1	; 0x01
    25aa:	0e 94 8b 03 	call	0x716	; 0x716 <sync>
    25ae:	03 c0       	rjmp	.+6      	; 0x25b6 <f_sync+0xb4>
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <f_sync+0xb4>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    25b4:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	08 95       	ret

000025c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    25c6:	0e 94 81 12 	call	0x2502	; 0x2502 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    25ca:	81 11       	cpse	r24, r1
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <f_close+0x12>
    25ce:	19 82       	std	Y+1, r1	; 0x01
    25d0:	18 82       	st	Y, r1
	return res;
#endif
}
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	08 95       	ret

000025d8 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    25d8:	2f 92       	push	r2
    25da:	3f 92       	push	r3
    25dc:	4f 92       	push	r4
    25de:	5f 92       	push	r5
    25e0:	6f 92       	push	r6
    25e2:	7f 92       	push	r7
    25e4:	8f 92       	push	r8
    25e6:	9f 92       	push	r9
    25e8:	af 92       	push	r10
    25ea:	bf 92       	push	r11
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <f_lseek+0x26>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <f_lseek+0x28>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	1c 01       	movw	r2, r24
    2606:	6a 01       	movw	r12, r20
    2608:	7b 01       	movw	r14, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    260a:	dc 01       	movw	r26, r24
    260c:	12 96       	adiw	r26, 0x02	; 2
    260e:	6d 91       	ld	r22, X+
    2610:	7c 91       	ld	r23, X
    2612:	13 97       	sbiw	r26, 0x03	; 3
    2614:	8d 91       	ld	r24, X+
    2616:	9c 91       	ld	r25, X
    2618:	0e 94 71 03 	call	0x6e2	; 0x6e2 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    261c:	81 11       	cpse	r24, r1
    261e:	d0 c1       	rjmp	.+928    	; 0x29c0 <f_lseek+0x3e8>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2620:	f1 01       	movw	r30, r2
    2622:	84 81       	ldd	r24, Z+4	; 0x04
    2624:	88 23       	and	r24, r24
    2626:	0c f4       	brge	.+2      	; 0x262a <f_lseek+0x52>
    2628:	c8 c1       	rjmp	.+912    	; 0x29ba <f_lseek+0x3e2>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    262a:	42 85       	ldd	r20, Z+10	; 0x0a
    262c:	53 85       	ldd	r21, Z+11	; 0x0b
    262e:	64 85       	ldd	r22, Z+12	; 0x0c
    2630:	75 85       	ldd	r23, Z+13	; 0x0d
    2632:	4c 15       	cp	r20, r12
    2634:	5d 05       	cpc	r21, r13
    2636:	6e 05       	cpc	r22, r14
    2638:	7f 05       	cpc	r23, r15
    263a:	20 f4       	brcc	.+8      	; 0x2644 <f_lseek+0x6c>
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
    263c:	81 fd       	sbrc	r24, 1
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <f_lseek+0x6c>
#endif
		) ofs = fp->fsize;
    2640:	6a 01       	movw	r12, r20
    2642:	7b 01       	movw	r14, r22

	ifptr = fp->fptr;
    2644:	d1 01       	movw	r26, r2
    2646:	16 96       	adiw	r26, 0x06	; 6
    2648:	4d 90       	ld	r4, X+
    264a:	5d 90       	ld	r5, X+
    264c:	6d 90       	ld	r6, X+
    264e:	7c 90       	ld	r7, X
    2650:	19 97       	sbiw	r26, 0x09	; 9
	fp->fptr = nsect = 0; fp->csect = 255;
    2652:	f1 01       	movw	r30, r2
    2654:	16 82       	std	Z+6, r1	; 0x06
    2656:	17 82       	std	Z+7, r1	; 0x07
    2658:	10 86       	std	Z+8, r1	; 0x08
    265a:	11 86       	std	Z+9, r1	; 0x09
    265c:	8f ef       	ldi	r24, 0xFF	; 255
    265e:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    2660:	c1 14       	cp	r12, r1
    2662:	d1 04       	cpc	r13, r1
    2664:	e1 04       	cpc	r14, r1
    2666:	f1 04       	cpc	r15, r1
    2668:	09 f4       	brne	.+2      	; 0x266c <f_lseek+0x94>
    266a:	38 c1       	rjmp	.+624    	; 0x28dc <f_lseek+0x304>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    266c:	00 81       	ld	r16, Z
    266e:	11 81       	ldd	r17, Z+1	; 0x01
    2670:	d8 01       	movw	r26, r16
    2672:	12 96       	adiw	r26, 0x02	; 2
    2674:	8c 90       	ld	r8, X
    2676:	91 2c       	mov	r9, r1
    2678:	a1 2c       	mov	r10, r1
    267a:	b1 2c       	mov	r11, r1
    267c:	07 2e       	mov	r0, r23
    267e:	79 e0       	ldi	r23, 0x09	; 9
    2680:	88 0c       	add	r8, r8
    2682:	99 1c       	adc	r9, r9
    2684:	aa 1c       	adc	r10, r10
    2686:	bb 1c       	adc	r11, r11
    2688:	7a 95       	dec	r23
    268a:	d1 f7       	brne	.-12     	; 0x2680 <f_lseek+0xa8>
    268c:	70 2d       	mov	r23, r0
		if (ifptr > 0 &&
    268e:	41 14       	cp	r4, r1
    2690:	51 04       	cpc	r5, r1
    2692:	61 04       	cpc	r6, r1
    2694:	71 04       	cpc	r7, r1
    2696:	09 f4       	brne	.+2      	; 0x269a <f_lseek+0xc2>
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <f_lseek+0x140>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    269a:	b1 e0       	ldi	r27, 0x01	; 1
    269c:	4b 1a       	sub	r4, r27
    269e:	51 08       	sbc	r5, r1
    26a0:	61 08       	sbc	r6, r1
    26a2:	71 08       	sbc	r7, r1
    26a4:	c7 01       	movw	r24, r14
    26a6:	b6 01       	movw	r22, r12
    26a8:	61 50       	subi	r22, 0x01	; 1
    26aa:	71 09       	sbc	r23, r1
    26ac:	81 09       	sbc	r24, r1
    26ae:	91 09       	sbc	r25, r1
    26b0:	a5 01       	movw	r20, r10
    26b2:	94 01       	movw	r18, r8
    26b4:	0e 94 80 1b 	call	0x3700	; 0x3700 <__udivmodsi4>
    26b8:	29 83       	std	Y+1, r18	; 0x01
    26ba:	3a 83       	std	Y+2, r19	; 0x02
    26bc:	4b 83       	std	Y+3, r20	; 0x03
    26be:	5c 83       	std	Y+4, r21	; 0x04
    26c0:	c3 01       	movw	r24, r6
    26c2:	b2 01       	movw	r22, r4
    26c4:	a5 01       	movw	r20, r10
    26c6:	94 01       	movw	r18, r8
    26c8:	0e 94 80 1b 	call	0x3700	; 0x3700 <__udivmodsi4>

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
	if (ofs > 0) {
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
		if (ifptr > 0 &&
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	ab 81       	ldd	r26, Y+3	; 0x03
    26d2:	bc 81       	ldd	r27, Y+4	; 0x04
    26d4:	82 17       	cp	r24, r18
    26d6:	93 07       	cpc	r25, r19
    26d8:	a4 07       	cpc	r26, r20
    26da:	b5 07       	cpc	r27, r21
    26dc:	e8 f0       	brcs	.+58     	; 0x2718 <f_lseek+0x140>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    26de:	88 27       	eor	r24, r24
    26e0:	99 27       	eor	r25, r25
    26e2:	dc 01       	movw	r26, r24
    26e4:	88 19       	sub	r24, r8
    26e6:	99 09       	sbc	r25, r9
    26e8:	aa 09       	sbc	r26, r10
    26ea:	bb 09       	sbc	r27, r11
    26ec:	48 22       	and	r4, r24
    26ee:	59 22       	and	r5, r25
    26f0:	6a 22       	and	r6, r26
    26f2:	7b 22       	and	r7, r27
    26f4:	d1 01       	movw	r26, r2
    26f6:	16 96       	adiw	r26, 0x06	; 6
    26f8:	4d 92       	st	X+, r4
    26fa:	5d 92       	st	X+, r5
    26fc:	6d 92       	st	X+, r6
    26fe:	7c 92       	st	X, r7
    2700:	19 97       	sbiw	r26, 0x09	; 9
			ofs -= fp->fptr;
    2702:	c4 18       	sub	r12, r4
    2704:	d5 08       	sbc	r13, r5
    2706:	e6 08       	sbc	r14, r6
    2708:	f7 08       	sbc	r15, r7
			clst = fp->curr_clust;
    270a:	52 96       	adiw	r26, 0x12	; 18
    270c:	4d 91       	ld	r20, X+
    270e:	5d 91       	ld	r21, X+
    2710:	6d 91       	ld	r22, X+
    2712:	7c 91       	ld	r23, X
    2714:	55 97       	sbiw	r26, 0x15	; 21
    2716:	38 c0       	rjmp	.+112    	; 0x2788 <f_lseek+0x1b0>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    2718:	f1 01       	movw	r30, r2
    271a:	46 85       	ldd	r20, Z+14	; 0x0e
    271c:	57 85       	ldd	r21, Z+15	; 0x0f
    271e:	60 89       	ldd	r22, Z+16	; 0x10
    2720:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    2722:	41 15       	cp	r20, r1
    2724:	51 05       	cpc	r21, r1
    2726:	61 05       	cpc	r22, r1
    2728:	71 05       	cpc	r23, r1
    272a:	49 f5       	brne	.+82     	; 0x277e <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	ba 01       	movw	r22, r20
    2732:	c8 01       	movw	r24, r16
    2734:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <create_chain>
    2738:	ab 01       	movw	r20, r22
    273a:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    273c:	41 30       	cpi	r20, 0x01	; 1
    273e:	51 05       	cpc	r21, r1
    2740:	61 05       	cpc	r22, r1
    2742:	71 05       	cpc	r23, r1
    2744:	49 f4       	brne	.+18     	; 0x2758 <f_lseek+0x180>
    2746:	d1 01       	movw	r26, r2
    2748:	14 96       	adiw	r26, 0x04	; 4
    274a:	8c 91       	ld	r24, X
    274c:	14 97       	sbiw	r26, 0x04	; 4
    274e:	80 68       	ori	r24, 0x80	; 128
    2750:	14 96       	adiw	r26, 0x04	; 4
    2752:	8c 93       	st	X, r24
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	34 c1       	rjmp	.+616    	; 0x29c0 <f_lseek+0x3e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2758:	4f 3f       	cpi	r20, 0xFF	; 255
    275a:	bf ef       	ldi	r27, 0xFF	; 255
    275c:	5b 07       	cpc	r21, r27
    275e:	6b 07       	cpc	r22, r27
    2760:	7b 07       	cpc	r23, r27
    2762:	31 f4       	brne	.+12     	; 0x2770 <f_lseek+0x198>
    2764:	f1 01       	movw	r30, r2
    2766:	84 81       	ldd	r24, Z+4	; 0x04
    2768:	80 68       	ori	r24, 0x80	; 128
    276a:	84 83       	std	Z+4, r24	; 0x04
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	28 c1       	rjmp	.+592    	; 0x29c0 <f_lseek+0x3e8>
				fp->org_clust = clst;
    2770:	d1 01       	movw	r26, r2
    2772:	1e 96       	adiw	r26, 0x0e	; 14
    2774:	4d 93       	st	X+, r20
    2776:	5d 93       	st	X+, r21
    2778:	6d 93       	st	X+, r22
    277a:	7c 93       	st	X, r23
    277c:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    277e:	f1 01       	movw	r30, r2
    2780:	42 8b       	std	Z+18, r20	; 0x12
    2782:	53 8b       	std	Z+19, r21	; 0x13
    2784:	64 8b       	std	Z+20, r22	; 0x14
    2786:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    2788:	41 15       	cp	r20, r1
    278a:	51 05       	cpc	r21, r1
    278c:	61 05       	cpc	r22, r1
    278e:	71 05       	cpc	r23, r1
    2790:	09 f4       	brne	.+2      	; 0x2794 <f_lseek+0x1bc>
    2792:	a8 c0       	rjmp	.+336    	; 0x28e4 <f_lseek+0x30c>
			while (ofs > bcs) {						/* Cluster following loop */
    2794:	8c 14       	cp	r8, r12
    2796:	9d 04       	cpc	r9, r13
    2798:	ae 04       	cpc	r10, r14
    279a:	bf 04       	cpc	r11, r15
    279c:	08 f0       	brcs	.+2      	; 0x27a0 <f_lseek+0x1c8>
    279e:	62 c0       	rjmp	.+196    	; 0x2864 <f_lseek+0x28c>
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    27a0:	d1 01       	movw	r26, r2
    27a2:	14 96       	adiw	r26, 0x04	; 4
    27a4:	8c 91       	ld	r24, X
    27a6:	14 97       	sbiw	r26, 0x04	; 4
    27a8:	81 ff       	sbrs	r24, 1
    27aa:	0c c0       	rjmp	.+24     	; 0x27c4 <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    27ac:	8d 91       	ld	r24, X+
    27ae:	9c 91       	ld	r25, X
    27b0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <create_chain>
    27b4:	ab 01       	movw	r20, r22
    27b6:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    27b8:	41 15       	cp	r20, r1
    27ba:	51 05       	cpc	r21, r1
    27bc:	61 05       	cpc	r22, r1
    27be:	71 05       	cpc	r23, r1
    27c0:	41 f4       	brne	.+16     	; 0x27d2 <f_lseek+0x1fa>
    27c2:	4e c0       	rjmp	.+156    	; 0x2860 <f_lseek+0x288>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    27c4:	f1 01       	movw	r30, r2
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	0e 94 f6 03 	call	0x7ec	; 0x7ec <get_fat>
    27ce:	ab 01       	movw	r20, r22
    27d0:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    27d2:	4f 3f       	cpi	r20, 0xFF	; 255
    27d4:	ff ef       	ldi	r31, 0xFF	; 255
    27d6:	5f 07       	cpc	r21, r31
    27d8:	6f 07       	cpc	r22, r31
    27da:	7f 07       	cpc	r23, r31
    27dc:	49 f4       	brne	.+18     	; 0x27f0 <f_lseek+0x218>
    27de:	d1 01       	movw	r26, r2
    27e0:	14 96       	adiw	r26, 0x04	; 4
    27e2:	8c 91       	ld	r24, X
    27e4:	14 97       	sbiw	r26, 0x04	; 4
    27e6:	80 68       	ori	r24, 0x80	; 128
    27e8:	14 96       	adiw	r26, 0x04	; 4
    27ea:	8c 93       	st	X, r24
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	e8 c0       	rjmp	.+464    	; 0x29c0 <f_lseek+0x3e8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    27f0:	42 30       	cpi	r20, 0x02	; 2
    27f2:	51 05       	cpc	r21, r1
    27f4:	61 05       	cpc	r22, r1
    27f6:	71 05       	cpc	r23, r1
    27f8:	60 f0       	brcs	.+24     	; 0x2812 <f_lseek+0x23a>
    27fa:	d1 01       	movw	r26, r2
    27fc:	ed 91       	ld	r30, X+
    27fe:	fc 91       	ld	r31, X
    2800:	82 8d       	ldd	r24, Z+26	; 0x1a
    2802:	93 8d       	ldd	r25, Z+27	; 0x1b
    2804:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2806:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2808:	48 17       	cp	r20, r24
    280a:	59 07       	cpc	r21, r25
    280c:	6a 07       	cpc	r22, r26
    280e:	7b 07       	cpc	r23, r27
    2810:	30 f0       	brcs	.+12     	; 0x281e <f_lseek+0x246>
    2812:	f1 01       	movw	r30, r2
    2814:	84 81       	ldd	r24, Z+4	; 0x04
    2816:	80 68       	ori	r24, 0x80	; 128
    2818:	84 83       	std	Z+4, r24	; 0x04
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	d1 c0       	rjmp	.+418    	; 0x29c0 <f_lseek+0x3e8>
				fp->curr_clust = clst;
    281e:	d1 01       	movw	r26, r2
    2820:	52 96       	adiw	r26, 0x12	; 18
    2822:	4d 93       	st	X+, r20
    2824:	5d 93       	st	X+, r21
    2826:	6d 93       	st	X+, r22
    2828:	7c 93       	st	X, r23
    282a:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    282c:	16 96       	adiw	r26, 0x06	; 6
    282e:	8d 91       	ld	r24, X+
    2830:	9d 91       	ld	r25, X+
    2832:	0d 90       	ld	r0, X+
    2834:	bc 91       	ld	r27, X
    2836:	a0 2d       	mov	r26, r0
    2838:	88 0d       	add	r24, r8
    283a:	99 1d       	adc	r25, r9
    283c:	aa 1d       	adc	r26, r10
    283e:	bb 1d       	adc	r27, r11
    2840:	f1 01       	movw	r30, r2
    2842:	86 83       	std	Z+6, r24	; 0x06
    2844:	97 83       	std	Z+7, r25	; 0x07
    2846:	a0 87       	std	Z+8, r26	; 0x08
    2848:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    284a:	c8 18       	sub	r12, r8
    284c:	d9 08       	sbc	r13, r9
    284e:	ea 08       	sbc	r14, r10
    2850:	fb 08       	sbc	r15, r11
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    2852:	8c 14       	cp	r8, r12
    2854:	9d 04       	cpc	r9, r13
    2856:	ae 04       	cpc	r10, r14
    2858:	bf 04       	cpc	r11, r15
    285a:	08 f4       	brcc	.+2      	; 0x285e <f_lseek+0x286>
    285c:	a1 cf       	rjmp	.-190    	; 0x27a0 <f_lseek+0x1c8>
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <f_lseek+0x28c>
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
					if (clst == 0) {				/* When disk gets full, clip file size */
						ofs = bcs; break;
    2860:	75 01       	movw	r14, r10
    2862:	64 01       	movw	r12, r8
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    2864:	f1 01       	movw	r30, r2
    2866:	86 81       	ldd	r24, Z+6	; 0x06
    2868:	97 81       	ldd	r25, Z+7	; 0x07
    286a:	a0 85       	ldd	r26, Z+8	; 0x08
    286c:	b1 85       	ldd	r27, Z+9	; 0x09
    286e:	8c 0d       	add	r24, r12
    2870:	9d 1d       	adc	r25, r13
    2872:	ae 1d       	adc	r26, r14
    2874:	bf 1d       	adc	r27, r15
    2876:	86 83       	std	Z+6, r24	; 0x06
    2878:	97 83       	std	Z+7, r25	; 0x07
    287a:	a0 87       	std	Z+8, r26	; 0x08
    287c:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    287e:	46 01       	movw	r8, r12
    2880:	57 01       	movw	r10, r14
    2882:	07 2e       	mov	r0, r23
    2884:	79 e0       	ldi	r23, 0x09	; 9
    2886:	b6 94       	lsr	r11
    2888:	a7 94       	ror	r10
    288a:	97 94       	ror	r9
    288c:	87 94       	ror	r8
    288e:	7a 95       	dec	r23
    2890:	d1 f7       	brne	.-12     	; 0x2886 <f_lseek+0x2ae>
    2892:	70 2d       	mov	r23, r0
    2894:	85 82       	std	Z+5, r8	; 0x05
			if (ofs % SS(fp->fs)) {
    2896:	f1 e0       	ldi	r31, 0x01	; 1
    2898:	df 22       	and	r13, r31
    289a:	ee 24       	eor	r14, r14
    289c:	ff 24       	eor	r15, r15
    289e:	cd 28       	or	r12, r13
    28a0:	ce 28       	or	r12, r14
    28a2:	cf 28       	or	r12, r15
    28a4:	19 f1       	breq	.+70     	; 0x28ec <f_lseek+0x314>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    28a6:	d1 01       	movw	r26, r2
    28a8:	8d 91       	ld	r24, X+
    28aa:	9c 91       	ld	r25, X
    28ac:	0e 94 87 07 	call	0xf0e	; 0xf0e <clust2sect>
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    28b0:	61 15       	cp	r22, r1
    28b2:	71 05       	cpc	r23, r1
    28b4:	81 05       	cpc	r24, r1
    28b6:	91 05       	cpc	r25, r1
    28b8:	31 f4       	brne	.+12     	; 0x28c6 <f_lseek+0x2ee>
    28ba:	f1 01       	movw	r30, r2
    28bc:	84 81       	ldd	r24, Z+4	; 0x04
    28be:	80 68       	ori	r24, 0x80	; 128
    28c0:	84 83       	std	Z+4, r24	; 0x04
    28c2:	82 e0       	ldi	r24, 0x02	; 2
    28c4:	7d c0       	rjmp	.+250    	; 0x29c0 <f_lseek+0x3e8>
				nsect += fp->csect;
    28c6:	6b 01       	movw	r12, r22
    28c8:	7c 01       	movw	r14, r24
    28ca:	c8 0c       	add	r12, r8
    28cc:	d1 1c       	adc	r13, r1
    28ce:	e1 1c       	adc	r14, r1
    28d0:	f1 1c       	adc	r15, r1
				fp->csect++;
    28d2:	83 94       	inc	r8
    28d4:	d1 01       	movw	r26, r2
    28d6:	15 96       	adiw	r26, 0x05	; 5
    28d8:	8c 92       	st	X, r8
    28da:	0b c0       	rjmp	.+22     	; 0x28f2 <f_lseek+0x31a>
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
    28dc:	c1 2c       	mov	r12, r1
    28de:	d1 2c       	mov	r13, r1
    28e0:	76 01       	movw	r14, r12
    28e2:	07 c0       	rjmp	.+14     	; 0x28f2 <f_lseek+0x31a>
    28e4:	c1 2c       	mov	r12, r1
    28e6:	d1 2c       	mov	r13, r1
    28e8:	76 01       	movw	r14, r12
    28ea:	03 c0       	rjmp	.+6      	; 0x28f2 <f_lseek+0x31a>
    28ec:	c1 2c       	mov	r12, r1
    28ee:	d1 2c       	mov	r13, r1
    28f0:	76 01       	movw	r14, r12
				nsect += fp->csect;
				fp->csect++;
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    28f2:	f1 01       	movw	r30, r2
    28f4:	86 81       	ldd	r24, Z+6	; 0x06
    28f6:	97 81       	ldd	r25, Z+7	; 0x07
    28f8:	a0 85       	ldd	r26, Z+8	; 0x08
    28fa:	b1 85       	ldd	r27, Z+9	; 0x09
    28fc:	91 70       	andi	r25, 0x01	; 1
    28fe:	aa 27       	eor	r26, r26
    2900:	bb 27       	eor	r27, r27
    2902:	89 2b       	or	r24, r25
    2904:	8a 2b       	or	r24, r26
    2906:	8b 2b       	or	r24, r27
    2908:	09 f4       	brne	.+2      	; 0x290c <f_lseek+0x334>
    290a:	40 c0       	rjmp	.+128    	; 0x298c <f_lseek+0x3b4>
    290c:	26 89       	ldd	r18, Z+22	; 0x16
    290e:	37 89       	ldd	r19, Z+23	; 0x17
    2910:	40 8d       	ldd	r20, Z+24	; 0x18
    2912:	51 8d       	ldd	r21, Z+25	; 0x19
    2914:	2c 15       	cp	r18, r12
    2916:	3d 05       	cpc	r19, r13
    2918:	4e 05       	cpc	r20, r14
    291a:	5f 05       	cpc	r21, r15
    291c:	b9 f1       	breq	.+110    	; 0x298c <f_lseek+0x3b4>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    291e:	84 81       	ldd	r24, Z+4	; 0x04
    2920:	86 ff       	sbrs	r24, 6
    2922:	19 c0       	rjmp	.+50     	; 0x2956 <f_lseek+0x37e>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    2924:	01 90       	ld	r0, Z+
    2926:	f0 81       	ld	r31, Z
    2928:	e0 2d       	mov	r30, r0
    292a:	01 e0       	ldi	r16, 0x01	; 1
    292c:	b1 01       	movw	r22, r2
    292e:	60 5e       	subi	r22, 0xE0	; 224
    2930:	7f 4f       	sbci	r23, 0xFF	; 255
    2932:	81 81       	ldd	r24, Z+1	; 0x01
    2934:	0e 94 87 01 	call	0x30e	; 0x30e <disk_write>
    2938:	88 23       	and	r24, r24
    293a:	49 f0       	breq	.+18     	; 0x294e <f_lseek+0x376>
				ABORT(fp->fs, FR_DISK_ERR);
    293c:	d1 01       	movw	r26, r2
    293e:	14 96       	adiw	r26, 0x04	; 4
    2940:	8c 91       	ld	r24, X
    2942:	14 97       	sbiw	r26, 0x04	; 4
    2944:	80 68       	ori	r24, 0x80	; 128
    2946:	14 96       	adiw	r26, 0x04	; 4
    2948:	8c 93       	st	X, r24
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	39 c0       	rjmp	.+114    	; 0x29c0 <f_lseek+0x3e8>
			fp->flag &= ~FA__DIRTY;
    294e:	f1 01       	movw	r30, r2
    2950:	84 81       	ldd	r24, Z+4	; 0x04
    2952:	8f 7b       	andi	r24, 0xBF	; 191
    2954:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    2956:	d1 01       	movw	r26, r2
    2958:	ed 91       	ld	r30, X+
    295a:	fc 91       	ld	r31, X
    295c:	01 e0       	ldi	r16, 0x01	; 1
    295e:	a7 01       	movw	r20, r14
    2960:	96 01       	movw	r18, r12
    2962:	b1 01       	movw	r22, r2
    2964:	60 5e       	subi	r22, 0xE0	; 224
    2966:	7f 4f       	sbci	r23, 0xFF	; 255
    2968:	81 81       	ldd	r24, Z+1	; 0x01
    296a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <disk_read>
    296e:	88 23       	and	r24, r24
    2970:	31 f0       	breq	.+12     	; 0x297e <f_lseek+0x3a6>
			ABORT(fp->fs, FR_DISK_ERR);
    2972:	f1 01       	movw	r30, r2
    2974:	84 81       	ldd	r24, Z+4	; 0x04
    2976:	80 68       	ori	r24, 0x80	; 128
    2978:	84 83       	std	Z+4, r24	; 0x04
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	21 c0       	rjmp	.+66     	; 0x29c0 <f_lseek+0x3e8>
#endif
		fp->dsect = nsect;
    297e:	d1 01       	movw	r26, r2
    2980:	56 96       	adiw	r26, 0x16	; 22
    2982:	cd 92       	st	X+, r12
    2984:	dd 92       	st	X+, r13
    2986:	ed 92       	st	X+, r14
    2988:	fc 92       	st	X, r15
    298a:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    298c:	f1 01       	movw	r30, r2
    298e:	86 81       	ldd	r24, Z+6	; 0x06
    2990:	97 81       	ldd	r25, Z+7	; 0x07
    2992:	a0 85       	ldd	r26, Z+8	; 0x08
    2994:	b1 85       	ldd	r27, Z+9	; 0x09
    2996:	42 85       	ldd	r20, Z+10	; 0x0a
    2998:	53 85       	ldd	r21, Z+11	; 0x0b
    299a:	64 85       	ldd	r22, Z+12	; 0x0c
    299c:	75 85       	ldd	r23, Z+13	; 0x0d
    299e:	48 17       	cp	r20, r24
    29a0:	59 07       	cpc	r21, r25
    29a2:	6a 07       	cpc	r22, r26
    29a4:	7b 07       	cpc	r23, r27
    29a6:	58 f4       	brcc	.+22     	; 0x29be <f_lseek+0x3e6>
		fp->fsize = fp->fptr;
    29a8:	82 87       	std	Z+10, r24	; 0x0a
    29aa:	93 87       	std	Z+11, r25	; 0x0b
    29ac:	a4 87       	std	Z+12, r26	; 0x0c
    29ae:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA__WRITTEN;
    29b0:	84 81       	ldd	r24, Z+4	; 0x04
    29b2:	80 62       	ori	r24, 0x20	; 32
    29b4:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	03 c0       	rjmp	.+6      	; 0x29c0 <f_lseek+0x3e8>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	01 c0       	rjmp	.+2      	; 0x29c0 <f_lseek+0x3e8>
		fp->fsize = fp->fptr;
		fp->flag |= FA__WRITTEN;
	}
#endif

	LEAVE_FF(fp->fs, res);
    29be:	80 e0       	ldi	r24, 0x00	; 0
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	ff 90       	pop	r15
    29d2:	ef 90       	pop	r14
    29d4:	df 90       	pop	r13
    29d6:	cf 90       	pop	r12
    29d8:	bf 90       	pop	r11
    29da:	af 90       	pop	r10
    29dc:	9f 90       	pop	r9
    29de:	8f 90       	pop	r8
    29e0:	7f 90       	pop	r7
    29e2:	6f 90       	pop	r6
    29e4:	5f 90       	pop	r5
    29e6:	4f 90       	pop	r4
    29e8:	3f 90       	pop	r3
    29ea:	2f 90       	pop	r2
    29ec:	08 95       	ret

000029ee <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	1f 93       	push	r17
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	a4 97       	sbiw	r28, 0x24	; 36
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	9c a3       	std	Y+36, r25	; 0x24
    2a0a:	8b a3       	std	Y+35, r24	; 0x23
    2a0c:	7b 01       	movw	r14, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	be 01       	movw	r22, r28
    2a12:	6f 5f       	subi	r22, 0xFF	; 255
    2a14:	7f 4f       	sbci	r23, 0xFF	; 255
    2a16:	ce 01       	movw	r24, r28
    2a18:	83 96       	adiw	r24, 0x23	; 35
    2a1a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <chk_mounted>
    2a1e:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2a20:	81 11       	cpse	r24, r1
    2a22:	17 c0       	rjmp	.+46     	; 0x2a52 <f_stat+0x64>
		INITBUF(dj, sfn, lfn);
    2a24:	ce 01       	movw	r24, r28
    2a26:	47 96       	adiw	r24, 0x17	; 23
    2a28:	9e 8b       	std	Y+22, r25	; 0x16
    2a2a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    2a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a30:	46 97       	sbiw	r24, 0x16	; 22
    2a32:	0e 94 b2 09 	call	0x1364	; 0x1364 <follow_path>
    2a36:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    2a38:	81 11       	cpse	r24, r1
    2a3a:	0b c0       	rjmp	.+22     	; 0x2a52 <f_stat+0x64>
			if (dj.dir)	/* Found an object */
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a40:	89 2b       	or	r24, r25
    2a42:	31 f0       	breq	.+12     	; 0x2a50 <f_stat+0x62>
				get_fileinfo(&dj, fno);
    2a44:	b7 01       	movw	r22, r14
    2a46:	ce 01       	movw	r24, r28
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <get_fileinfo>
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <f_stat+0x64>
			else		/* It is root dir */
				res = FR_INVALID_NAME;
    2a50:	16 e0       	ldi	r17, 0x06	; 6
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2a52:	81 2f       	mov	r24, r17
    2a54:	a4 96       	adiw	r28, 0x24	; 36
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	1f 91       	pop	r17
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	08 95       	ret

00002a6c <I2C_Start>:



void I2C_Start(void)
{
	SDA_OUT;
    2a6c:	57 9a       	sbi	0x0a, 7	; 10
	SDA_H;
    2a6e:	5f 9a       	sbi	0x0b, 7	; 11
	SCL_H;
    2a70:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a72:	85 e0       	ldi	r24, 0x05	; 5
    2a74:	8a 95       	dec	r24
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <I2C_Start+0x8>
    2a78:	00 00       	nop
	I2C_DELAY;	
	SDA_L;
    2a7a:	5f 98       	cbi	0x0b, 7	; 11
    2a7c:	85 e0       	ldi	r24, 0x05	; 5
    2a7e:	8a 95       	dec	r24
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <I2C_Start+0x12>
    2a82:	00 00       	nop
    2a84:	08 95       	ret

00002a86 <I2C_Stop>:
	I2C_DELAY;
}

void I2C_Stop(void)
{
	SCL_L;
    2a86:	5e 98       	cbi	0x0b, 6	; 11
    2a88:	85 e0       	ldi	r24, 0x05	; 5
    2a8a:	8a 95       	dec	r24
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <I2C_Stop+0x4>
    2a8e:	00 00       	nop
	I2C_DELAY;
	SDA_L;
    2a90:	5f 98       	cbi	0x0b, 7	; 11
    2a92:	85 e0       	ldi	r24, 0x05	; 5
    2a94:	8a 95       	dec	r24
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <I2C_Stop+0xe>
    2a98:	00 00       	nop
	I2C_DELAY;
	SCL_H;
    2a9a:	5e 9a       	sbi	0x0b, 6	; 11
    2a9c:	85 e0       	ldi	r24, 0x05	; 5
    2a9e:	8a 95       	dec	r24
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <I2C_Stop+0x18>
    2aa2:	00 00       	nop
	I2C_DELAY;
	SDA_H;
    2aa4:	5f 9a       	sbi	0x0b, 7	; 11
    2aa6:	85 e0       	ldi	r24, 0x05	; 5
    2aa8:	8a 95       	dec	r24
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <I2C_Stop+0x22>
    2aac:	00 00       	nop
    2aae:	08 95       	ret

00002ab0 <I2C_Ack>:
	I2C_DELAY;
}

void I2C_Ack(void)
{
	SCL_L;
    2ab0:	5e 98       	cbi	0x0b, 6	; 11
    2ab2:	85 e0       	ldi	r24, 0x05	; 5
    2ab4:	8a 95       	dec	r24
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <I2C_Ack+0x4>
    2ab8:	00 00       	nop
	I2C_DELAY;
	SDA_L;
    2aba:	5f 98       	cbi	0x0b, 7	; 11
    2abc:	85 e0       	ldi	r24, 0x05	; 5
    2abe:	8a 95       	dec	r24
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <I2C_Ack+0xe>
    2ac2:	00 00       	nop
	I2C_DELAY;
	SCL_H;
    2ac4:	5e 9a       	sbi	0x0b, 6	; 11
    2ac6:	85 e0       	ldi	r24, 0x05	; 5
    2ac8:	8a 95       	dec	r24
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <I2C_Ack+0x18>
    2acc:	00 00       	nop
	I2C_DELAY;
	SCL_L;
    2ace:	5e 98       	cbi	0x0b, 6	; 11
    2ad0:	85 e0       	ldi	r24, 0x05	; 5
    2ad2:	8a 95       	dec	r24
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <I2C_Ack+0x22>
    2ad6:	00 00       	nop
	I2C_DELAY;
	SDA_H;
    2ad8:	5f 9a       	sbi	0x0b, 7	; 11
    2ada:	08 95       	ret

00002adc <I2C_NoAck>:
}

void I2C_NoAck(void)
{
	SCL_L;
    2adc:	5e 98       	cbi	0x0b, 6	; 11
    2ade:	85 e0       	ldi	r24, 0x05	; 5
    2ae0:	8a 95       	dec	r24
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <I2C_NoAck+0x4>
    2ae4:	00 00       	nop
	I2C_DELAY;
	SDA_H;
    2ae6:	5f 9a       	sbi	0x0b, 7	; 11
    2ae8:	85 e0       	ldi	r24, 0x05	; 5
    2aea:	8a 95       	dec	r24
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <I2C_NoAck+0xe>
    2aee:	00 00       	nop
	I2C_DELAY;
	SCL_H;
    2af0:	5e 9a       	sbi	0x0b, 6	; 11
    2af2:	85 e0       	ldi	r24, 0x05	; 5
    2af4:	8a 95       	dec	r24
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <I2C_NoAck+0x18>
    2af8:	00 00       	nop
	I2C_DELAY;
	SCL_L;
    2afa:	5e 98       	cbi	0x0b, 6	; 11
    2afc:	85 e0       	ldi	r24, 0x05	; 5
    2afe:	8a 95       	dec	r24
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <I2C_NoAck+0x22>
    2b02:	00 00       	nop
	I2C_DELAY;
	SDA_H;
    2b04:	5f 9a       	sbi	0x0b, 7	; 11
    2b06:	08 95       	ret

00002b08 <I2C_SendByte>:

//数据从高位到低位
void I2C_SendByte(unsigned char SendByte)
{
	unsigned char i=0;
	SDA_OUT;
    2b08:	57 9a       	sbi	0x0a, 7	; 10
	SCL_L;
    2b0a:	5e 98       	cbi	0x0b, 6	; 11
    2b0c:	98 e0       	ldi	r25, 0x08	; 8
	for (i=0;i<8;i++)
	{
		if(SendByte & 0x80)
    2b0e:	88 23       	and	r24, r24
    2b10:	14 f4       	brge	.+4      	; 0x2b16 <I2C_SendByte+0xe>
		{
			SDA_H;
    2b12:	5f 9a       	sbi	0x0b, 7	; 11
    2b14:	01 c0       	rjmp	.+2      	; 0x2b18 <I2C_SendByte+0x10>
		}
		else
		{
			SDA_L;
    2b16:	5f 98       	cbi	0x0b, 7	; 11
		}	
		SCL_H;
    2b18:	5e 9a       	sbi	0x0b, 6	; 11
    2b1a:	25 e0       	ldi	r18, 0x05	; 5
    2b1c:	2a 95       	dec	r18
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <I2C_SendByte+0x14>
    2b20:	00 00       	nop
		I2C_DELAY;
		SendByte <<= 1;
    2b22:	88 0f       	add	r24, r24
		SCL_L;
    2b24:	5e 98       	cbi	0x0b, 6	; 11
    2b26:	91 50       	subi	r25, 0x01	; 1
void I2C_SendByte(unsigned char SendByte)
{
	unsigned char i=0;
	SDA_OUT;
	SCL_L;
	for (i=0;i<8;i++)
    2b28:	91 f7       	brne	.-28     	; 0x2b0e <I2C_SendByte+0x6>
		SCL_H;
		I2C_DELAY;
		SendByte <<= 1;
		SCL_L;
	}
	SDA_H;
    2b2a:	5f 9a       	sbi	0x0b, 7	; 11
	SCL_H;
    2b2c:	5e 9a       	sbi	0x0b, 6	; 11
    2b2e:	85 e0       	ldi	r24, 0x05	; 5
    2b30:	8a 95       	dec	r24
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <I2C_SendByte+0x28>
    2b34:	00 00       	nop
	I2C_DELAY;
	SCL_L;
    2b36:	5e 98       	cbi	0x0b, 6	; 11
    2b38:	25 e0       	ldi	r18, 0x05	; 5
    2b3a:	2a 95       	dec	r18
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <I2C_SendByte+0x32>
    2b3e:	00 00       	nop
    2b40:	08 95       	ret

00002b42 <I2C_ReceiveByte>:
//数据从高位到低位
unsigned char I2C_ReceiveByte(void)
{
	unsigned char i=0;
	unsigned char ReceiveByte=0;
	SDA_H;
    2b42:	5f 9a       	sbi	0x0b, 7	; 11
	SDA_IN;
    2b44:	57 98       	cbi	0x0a, 7	; 10
	SDA_H;
    2b46:	5f 9a       	sbi	0x0b, 7	; 11
    2b48:	98 e0       	ldi	r25, 0x08	; 8

//数据从高位到低位
unsigned char I2C_ReceiveByte(void)
{
	unsigned char i=0;
	unsigned char ReceiveByte=0;
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
	SDA_H;
	SDA_IN;
	SDA_H;
	for (i=0;i<8;i++)
	{			
		ReceiveByte <<= 1;	
    2b4c:	88 0f       	add	r24, r24
		SCL_H;
    2b4e:	5e 9a       	sbi	0x0b, 6	; 11
		if (SDA_READ)
    2b50:	4f 99       	sbic	0x09, 7	; 9
		{
			ReceiveByte	|=1;
    2b52:	81 60       	ori	r24, 0x01	; 1
		}
		SCL_L;
    2b54:	5e 98       	cbi	0x0b, 6	; 11
    2b56:	25 e0       	ldi	r18, 0x05	; 5
    2b58:	2a 95       	dec	r18
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <I2C_ReceiveByte+0x16>
    2b5c:	00 00       	nop
    2b5e:	91 50       	subi	r25, 0x01	; 1
	unsigned char i=0;
	unsigned char ReceiveByte=0;
	SDA_H;
	SDA_IN;
	SDA_H;
	for (i=0;i<8;i++)
    2b60:	a9 f7       	brne	.-22     	; 0x2b4c <I2C_ReceiveByte+0xa>
			ReceiveByte	|=1;
		}
		SCL_L;
		I2C_DELAY;
	}
	SDA_OUT;
    2b62:	57 9a       	sbi	0x0a, 7	; 10
	return ReceiveByte;
}
    2b64:	08 95       	ret

00002b66 <HEX_BCD>:


unsigned char HEX_BCD(unsigned char val)		//B码转换为BCD码
{
	unsigned char k;
	k = (val/10)<<4 | (val%10);
    2b66:	9d ec       	ldi	r25, 0xCD	; 205
    2b68:	89 9f       	mul	r24, r25
    2b6a:	91 2d       	mov	r25, r1
    2b6c:	11 24       	eor	r1, r1
    2b6e:	96 95       	lsr	r25
    2b70:	96 95       	lsr	r25
    2b72:	96 95       	lsr	r25
    2b74:	20 e1       	ldi	r18, 0x10	; 16
    2b76:	92 9f       	mul	r25, r18
    2b78:	a0 01       	movw	r20, r0
    2b7a:	11 24       	eor	r1, r1
    2b7c:	99 0f       	add	r25, r25
    2b7e:	29 2f       	mov	r18, r25
    2b80:	22 0f       	add	r18, r18
    2b82:	22 0f       	add	r18, r18
    2b84:	92 0f       	add	r25, r18
    2b86:	89 1b       	sub	r24, r25
	return k;
}
    2b88:	84 2b       	or	r24, r20
    2b8a:	08 95       	ret

00002b8c <Initialize_DS3231>:
	I2C_SendByte(Time.week);
	I2C_SendByte(Time.date);
	I2C_SendByte(Time.month);
	I2C_SendByte(Time.year);	
	I2C_Stop();	*/
	I2C_Start();
    2b8c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <I2C_Start>
	I2C_SendByte(DS3231_ADDR);
    2b90:	80 ed       	ldi	r24, 0xD0	; 208
    2b92:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_SendByte(0x0E);
    2b96:	8e e0       	ldi	r24, 0x0E	; 14
    2b98:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_SendByte(0x00);
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_SendByte(0x0F);
    2ba2:	8f e0       	ldi	r24, 0x0F	; 15
    2ba4:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_SendByte(0x08);
    2ba8:	88 e0       	ldi	r24, 0x08	; 8
    2baa:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_Stop();
    2bae:	0e 94 43 15 	call	0x2a86	; 0x2a86 <I2C_Stop>
    2bb2:	08 95       	ret

00002bb4 <ReadTime_DS3231>:
	I2C_Stop();
}


void ReadTime_DS3231(void)
{
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
	I2C_Start();
    2bb8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <I2C_Start>
	I2C_SendByte(DS3231_ADDR);
    2bbc:	80 ed       	ldi	r24, 0xD0	; 208
    2bbe:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_SendByte(0x00);			//从秒的地址开始读，地址指针自动++
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_Start();
    2bc8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <I2C_Start>
	//在写入读地址
	I2C_SendByte(DS3231_ADDR | 1);
    2bcc:	81 ed       	ldi	r24, 0xD1	; 209
    2bce:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	//读出时间
	Time.second =	I2C_ReceiveByte();
    2bd2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2bd6:	c3 e2       	ldi	r28, 0x23	; 35
    2bd8:	d1 e0       	ldi	r29, 0x01	; 1
    2bda:	8e 83       	std	Y+6, r24	; 0x06
	I2C_Ack();	
    2bdc:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <I2C_Ack>
	Time.minute =	I2C_ReceiveByte();
    2be0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2be4:	8d 83       	std	Y+5, r24	; 0x05
	I2C_Ack();
    2be6:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <I2C_Ack>
	Time.hour   =	I2C_ReceiveByte();
    2bea:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2bee:	8c 83       	std	Y+4, r24	; 0x04
	I2C_Ack();
    2bf0:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <I2C_Ack>
	Time.week   =	I2C_ReceiveByte();
    2bf4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2bf8:	8b 83       	std	Y+3, r24	; 0x03
	I2C_Ack();
    2bfa:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <I2C_Ack>
	Time.date   =	I2C_ReceiveByte();
    2bfe:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2c02:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Ack();
    2c04:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <I2C_Ack>
	Time.month  =	I2C_ReceiveByte();
    2c08:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2c0c:	89 83       	std	Y+1, r24	; 0x01
	I2C_Ack();
    2c0e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <I2C_Ack>
	Time.year   =	I2C_ReceiveByte();
    2c12:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2c16:	88 83       	st	Y, r24
	I2C_NoAck();
    2c18:	0e 94 6e 15 	call	0x2adc	; 0x2adc <I2C_NoAck>
	I2C_Stop();
    2c1c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <I2C_Stop>
}
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	08 95       	ret

00002c26 <ReadTemp_DS3231>:

void ReadTemp_DS3231(void)
{
	I2C_Start();
    2c26:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <I2C_Start>
	I2C_SendByte(DS3231_ADDR);
    2c2a:	80 ed       	ldi	r24, 0xD0	; 208
    2c2c:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_SendByte(CMD_TEMPERATUREH);			//直接读温度高字节寄存器
    2c30:	81 e1       	ldi	r24, 0x11	; 17
    2c32:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	I2C_Start();
    2c36:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <I2C_Start>
	//在写入读地址
	I2C_SendByte(DS3231_ADDR | 1);
    2c3a:	81 ed       	ldi	r24, 0xD1	; 209
    2c3c:	0e 94 84 15 	call	0x2b08	; 0x2b08 <I2C_SendByte>
	//读出温度
	Temperature_Integer=I2C_ReceiveByte();
    2c40:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2c44:	80 93 ea 03 	sts	0x03EA, r24
	I2C_Ack();
    2c48:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <I2C_Ack>
	Temperature_Decimals=I2C_ReceiveByte()>>6;
    2c4c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <I2C_ReceiveByte>
    2c50:	82 95       	swap	r24
    2c52:	86 95       	lsr	r24
    2c54:	86 95       	lsr	r24
    2c56:	83 70       	andi	r24, 0x03	; 3
    2c58:	80 93 e9 03 	sts	0x03E9, r24
	I2C_NoAck();
    2c5c:	0e 94 6e 15 	call	0x2adc	; 0x2adc <I2C_NoAck>
	I2C_Stop();
    2c60:	0e 94 43 15 	call	0x2a86	; 0x2a86 <I2C_Stop>
    2c64:	08 95       	ret

00002c66 <Time_DisplayString>:
}

void Time_DisplayString()
{	
	ReadTime_DS3231();
    2c66:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <ReadTime_DS3231>
	DS3231_Date[2]	=	(Time.year>>4)+0x30;
    2c6a:	a3 e2       	ldi	r26, 0x23	; 35
    2c6c:	b1 e0       	ldi	r27, 0x01	; 1
    2c6e:	8c 91       	ld	r24, X
    2c70:	e4 e1       	ldi	r30, 0x14	; 20
    2c72:	f1 e0       	ldi	r31, 0x01	; 1
    2c74:	98 2f       	mov	r25, r24
    2c76:	92 95       	swap	r25
    2c78:	9f 70       	andi	r25, 0x0F	; 15
    2c7a:	90 5d       	subi	r25, 0xD0	; 208
    2c7c:	92 83       	std	Z+2, r25	; 0x02
	DS3231_Date[3]	=	(Time.year&0x0F)+0x30;
    2c7e:	8f 70       	andi	r24, 0x0F	; 15
    2c80:	80 5d       	subi	r24, 0xD0	; 208
    2c82:	83 83       	std	Z+3, r24	; 0x03
	DS3231_Date[6]	=	(Time.month>>4)+0x30;
    2c84:	11 96       	adiw	r26, 0x01	; 1
    2c86:	8c 91       	ld	r24, X
    2c88:	11 97       	sbiw	r26, 0x01	; 1
    2c8a:	98 2f       	mov	r25, r24
    2c8c:	92 95       	swap	r25
    2c8e:	9f 70       	andi	r25, 0x0F	; 15
    2c90:	90 5d       	subi	r25, 0xD0	; 208
    2c92:	96 83       	std	Z+6, r25	; 0x06
	DS3231_Date[7]	=	(Time.month&0x0F)+0x30;
    2c94:	8f 70       	andi	r24, 0x0F	; 15
    2c96:	80 5d       	subi	r24, 0xD0	; 208
    2c98:	87 83       	std	Z+7, r24	; 0x07
	DS3231_Date[10]	=	(Time.date>>4)+0x30;
    2c9a:	12 96       	adiw	r26, 0x02	; 2
    2c9c:	8c 91       	ld	r24, X
    2c9e:	12 97       	sbiw	r26, 0x02	; 2
    2ca0:	98 2f       	mov	r25, r24
    2ca2:	92 95       	swap	r25
    2ca4:	9f 70       	andi	r25, 0x0F	; 15
    2ca6:	90 5d       	subi	r25, 0xD0	; 208
    2ca8:	92 87       	std	Z+10, r25	; 0x0a
	DS3231_Date[11]	=	(Time.date&0x0F)+0x30;
    2caa:	8f 70       	andi	r24, 0x0F	; 15
    2cac:	80 5d       	subi	r24, 0xD0	; 208
    2cae:	83 87       	std	Z+11, r24	; 0x0b
	DS3231_Time[0]	=	(Time.hour>>4)+0x30;
    2cb0:	14 96       	adiw	r26, 0x04	; 4
    2cb2:	8c 91       	ld	r24, X
    2cb4:	14 97       	sbiw	r26, 0x04	; 4
    2cb6:	eb e0       	ldi	r30, 0x0B	; 11
    2cb8:	f1 e0       	ldi	r31, 0x01	; 1
    2cba:	98 2f       	mov	r25, r24
    2cbc:	92 95       	swap	r25
    2cbe:	9f 70       	andi	r25, 0x0F	; 15
    2cc0:	90 5d       	subi	r25, 0xD0	; 208
    2cc2:	90 83       	st	Z, r25
	DS3231_Time[1]	=	(Time.hour&0x0F)+0x30;
    2cc4:	8f 70       	andi	r24, 0x0F	; 15
    2cc6:	80 5d       	subi	r24, 0xD0	; 208
    2cc8:	81 83       	std	Z+1, r24	; 0x01
	DS3231_Time[3]	=	(Time.minute>>4)+0x30;
    2cca:	15 96       	adiw	r26, 0x05	; 5
    2ccc:	8c 91       	ld	r24, X
    2cce:	15 97       	sbiw	r26, 0x05	; 5
    2cd0:	98 2f       	mov	r25, r24
    2cd2:	92 95       	swap	r25
    2cd4:	9f 70       	andi	r25, 0x0F	; 15
    2cd6:	90 5d       	subi	r25, 0xD0	; 208
    2cd8:	93 83       	std	Z+3, r25	; 0x03
	DS3231_Time[4]	=	(Time.minute&0x0F)+0x30;
    2cda:	8f 70       	andi	r24, 0x0F	; 15
    2cdc:	80 5d       	subi	r24, 0xD0	; 208
    2cde:	84 83       	std	Z+4, r24	; 0x04
	DS3231_Time[6]	=	(Time.second>>4)+0x30;
    2ce0:	16 96       	adiw	r26, 0x06	; 6
    2ce2:	8c 91       	ld	r24, X
    2ce4:	98 2f       	mov	r25, r24
    2ce6:	92 95       	swap	r25
    2ce8:	9f 70       	andi	r25, 0x0F	; 15
    2cea:	90 5d       	subi	r25, 0xD0	; 208
    2cec:	96 83       	std	Z+6, r25	; 0x06
	DS3231_Time[7]	=	(Time.second&0x0F)+0x30;
    2cee:	8f 70       	andi	r24, 0x0F	; 15
    2cf0:	80 5d       	subi	r24, 0xD0	; 208
    2cf2:	87 83       	std	Z+7, r24	; 0x07
	//strcpy(DS3231_Week,weeks[Time.week-1]);	
	ReadTemp_DS3231();
    2cf4:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ReadTemp_DS3231>
	DS3231_Temperature[0]=(HEX_BCD(Temperature_Integer)>>4)+0x30;
    2cf8:	80 91 ea 03 	lds	r24, 0x03EA
    2cfc:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <HEX_BCD>
    2d00:	e0 e0       	ldi	r30, 0x00	; 0
    2d02:	f1 e0       	ldi	r31, 0x01	; 1
    2d04:	98 2f       	mov	r25, r24
    2d06:	92 95       	swap	r25
    2d08:	9f 70       	andi	r25, 0x0F	; 15
    2d0a:	90 5d       	subi	r25, 0xD0	; 208
    2d0c:	90 83       	st	Z, r25
	DS3231_Temperature[1]=(HEX_BCD(Temperature_Integer)&0x0F)+0x30;
    2d0e:	8f 70       	andi	r24, 0x0F	; 15
    2d10:	80 5d       	subi	r24, 0xD0	; 208
    2d12:	81 83       	std	Z+1, r24	; 0x01
    2d14:	08 95       	ret

00002d16 <shiftout>:

/*-----------------------------------------------------------------------
shiftout: 以SPI方式串行输出1字节
输入参数：data    ：要串行发送的字节
-----------------------------------------------------------------------*/
void shiftout(uchar data){
    2d16:	98 e0       	ldi	r25, 0x08	; 8
	uchar i=0;
	for (i=0;i<8;i++)
	{
		CLR_LCD_SCK;
    2d18:	44 98       	cbi	0x08, 4	; 8
		if (data&0x80)
    2d1a:	88 23       	and	r24, r24
    2d1c:	14 f4       	brge	.+4      	; 0x2d22 <shiftout+0xc>
		{
			SET_LCD_SDI;
    2d1e:	41 9a       	sbi	0x08, 1	; 8
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <shiftout+0xe>
		}
		else
		{
			CLR_LCD_SDI;
    2d22:	41 98       	cbi	0x08, 1	; 8
		}
		SET_LCD_SCK;
    2d24:	44 9a       	sbi	0x08, 4	; 8
		data=data<<1;
    2d26:	88 0f       	add	r24, r24
    2d28:	91 50       	subi	r25, 0x01	; 1
shiftout: 以SPI方式串行输出1字节
输入参数：data    ：要串行发送的字节
-----------------------------------------------------------------------*/
void shiftout(uchar data){
	uchar i=0;
	for (i=0;i<8;i++)
    2d2a:	b1 f7       	brne	.-20     	; 0x2d18 <shiftout+0x2>
			CLR_LCD_SDI;
		}
		SET_LCD_SCK;
		data=data<<1;
	}
}
    2d2c:	08 95       	ret

00002d2e <send_cmd>:
输入参数：	cmd		：要发送的命令类型；
			data    ：要发送的命令数据
-----------------------------------------------------------------------*/
void send_cmd(uchar cmd,uchar data)
{
	CLR_LCD_CS;
    2d2e:	43 98       	cbi	0x08, 3	; 8
	CLR_LCD_DC;
    2d30:	42 98       	cbi	0x08, 2	; 8
	shiftout(cmd|data);
    2d32:	86 2b       	or	r24, r22
    2d34:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <shiftout>
	SET_LCD_CS;	
    2d38:	43 9a       	sbi	0x08, 3	; 8
    2d3a:	08 95       	ret

00002d3c <send_dat>:
send_dat: 发送数据
输入参数：data    ：要发送的数据；
-----------------------------------------------------------------------*/ 
void send_dat(uchar data)
{
	CLR_LCD_CS;
    2d3c:	43 98       	cbi	0x08, 3	; 8
	SET_LCD_DC;
    2d3e:	42 9a       	sbi	0x08, 2	; 8
	shiftout(data);
    2d40:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <shiftout>
	SET_LCD_CS;
    2d44:	43 9a       	sbi	0x08, 3	; 8
    2d46:	08 95       	ret

00002d48 <cls>:
}

/* 清屏 */
void cls(void)
{
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
	int i;
	send_cmd(Set_X_Address, 0);
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	80 e8       	ldi	r24, 0x80	; 128
    2d50:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	send_cmd(Set_Y_Address, 0);
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	80 e4       	ldi	r24, 0x40	; 64
    2d58:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
    2d5c:	c0 ec       	ldi	r28, 0xC0	; 192
    2d5e:	d3 e0       	ldi	r29, 0x03	; 3
	for(i=0;i<960;i++)
	send_dat(0x00);
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <send_dat>
    2d66:	21 97       	sbiw	r28, 0x01	; 1
void cls(void)
{
	int i;
	send_cmd(Set_X_Address, 0);
	send_cmd(Set_Y_Address, 0);
	for(i=0;i<960;i++)
    2d68:	d9 f7       	brne	.-10     	; 0x2d60 <cls+0x18>
	send_dat(0x00);
	send_cmd(Set_X_Address, 0);
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	80 e8       	ldi	r24, 0x80	; 128
    2d6e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	send_cmd(Set_Y_Address, 0);
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	80 e4       	ldi	r24, 0x40	; 64
    2d76:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
}
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	08 95       	ret

00002d80 <LCDInit>:
/* 初始化LCD */
void LCDInit(void)
{
	CLR_LCD_RST;
    2d80:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d82:	8f e3       	ldi	r24, 0x3F	; 63
    2d84:	9c e9       	ldi	r25, 0x9C	; 156
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <LCDInit+0x6>
    2d8a:	00 c0       	rjmp	.+0      	; 0x2d8c <LCDInit+0xc>
    2d8c:	00 00       	nop
	_delay_ms(10);
	SET_LCD_RST;
    2d8e:	45 9a       	sbi	0x08, 5	; 8
    2d90:	8f e3       	ldi	r24, 0x3F	; 63
    2d92:	9c e9       	ldi	r25, 0x9C	; 156
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <LCDInit+0x14>
    2d98:	00 c0       	rjmp	.+0      	; 0x2d9a <LCDInit+0x1a>
    2d9a:	00 00       	nop
	_delay_ms(10);
	send_cmd(Function_Set,0x01);
    2d9c:	61 e0       	ldi	r22, 0x01	; 1
    2d9e:	80 e2       	ldi	r24, 0x20	; 32
    2da0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	send_cmd(Set_V0,0b00000);			//对比度
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	80 e8       	ldi	r24, 0x80	; 128
    2da8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	send_cmd(Set_Test_Mode,0x02);
    2dac:	62 e0       	ldi	r22, 0x02	; 2
    2dae:	80 e3       	ldi	r24, 0x30	; 48
    2db0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	send_cmd(Function_Set,0x00);
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	80 e2       	ldi	r24, 0x20	; 32
    2db8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	send_cmd(Display_Control,0x04);
    2dbc:	64 e0       	ldi	r22, 0x04	; 4
    2dbe:	88 e0       	ldi	r24, 0x08	; 8
    2dc0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	cls();
    2dc4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <cls>
    2dc8:	08 95       	ret

00002dca <putch>:
putch: 在LCD上显示单个字符
输入参数：X、Y    ：显示字符的起始X、Y坐标；
          ch      ：要显示的字符
-----------------------------------------------------------------------*/ 
void putch(uchar x,uchar y, unsigned int ch)
{
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	c6 2f       	mov	r28, r22
    2dd4:	8a 01       	movw	r16, r20
	unsigned char i;
	unsigned int temp=0;
	send_cmd(Set_X_Address,x);
    2dd6:	68 2f       	mov	r22, r24
    2dd8:	80 e8       	ldi	r24, 0x80	; 128
    2dda:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	send_cmd(Set_Y_Address,y);
    2dde:	6c 2f       	mov	r22, r28
    2de0:	80 e4       	ldi	r24, 0x40	; 64
    2de2:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <send_cmd>
	temp=(ch-0x20)*5;
    2de6:	c8 01       	movw	r24, r16
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	88 0f       	add	r24, r24
    2dee:	99 1f       	adc	r25, r25
    2df0:	08 0f       	add	r16, r24
    2df2:	19 1f       	adc	r17, r25
    2df4:	e8 01       	movw	r28, r16
    2df6:	c8 53       	subi	r28, 0x38	; 56
    2df8:	d0 40       	sbci	r29, 0x00	; 0
    2dfa:	03 53       	subi	r16, 0x33	; 51
    2dfc:	10 40       	sbci	r17, 0x00	; 0
	for(i=0;i<5;i++)
	{
		send_dat(pgm_read_byte(FONT+temp+i));
    2dfe:	fe 01       	movw	r30, r28
    2e00:	84 91       	lpm	r24, Z
    2e02:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <send_dat>
    2e06:	21 96       	adiw	r28, 0x01	; 1
	unsigned char i;
	unsigned int temp=0;
	send_cmd(Set_X_Address,x);
	send_cmd(Set_Y_Address,y);
	temp=(ch-0x20)*5;
	for(i=0;i<5;i++)
    2e08:	c0 17       	cp	r28, r16
    2e0a:	d1 07       	cpc	r29, r17
    2e0c:	c1 f7       	brne	.-16     	; 0x2dfe <putch+0x34>
	{
		send_dat(pgm_read_byte(FONT+temp+i));
	}	
}
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <putstr>:
putstr: 在LCD上显示字符串
输入参数：X、Y    ：显示字符的起始X、Y坐标；
          *str    ：要显示的字符串
-----------------------------------------------------------------------*/ 
void putstr(uchar x, uchar y, char *str)
{
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	c8 2f       	mov	r28, r24
    2e22:	d6 2f       	mov	r29, r22
	while(*str!=0)
    2e24:	fa 01       	movw	r30, r20
    2e26:	90 81       	ld	r25, Z
    2e28:	99 23       	and	r25, r25
    2e2a:	79 f0       	breq	.+30     	; 0x2e4a <putstr+0x32>
    2e2c:	8a 01       	movw	r16, r20
    2e2e:	0f 5f       	subi	r16, 0xFF	; 255
    2e30:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		putch(x,y,*str++);
    2e32:	49 2f       	mov	r20, r25
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	6d 2f       	mov	r22, r29
    2e38:	8c 2f       	mov	r24, r28
    2e3a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <putch>
		x=x+6;
    2e3e:	ca 5f       	subi	r28, 0xFA	; 250
输入参数：X、Y    ：显示字符的起始X、Y坐标；
          *str    ：要显示的字符串
-----------------------------------------------------------------------*/ 
void putstr(uchar x, uchar y, char *str)
{
	while(*str!=0)
    2e40:	f8 01       	movw	r30, r16
    2e42:	91 91       	ld	r25, Z+
    2e44:	8f 01       	movw	r16, r30
    2e46:	91 11       	cpse	r25, r1
    2e48:	f4 cf       	rjmp	.-24     	; 0x2e32 <putstr+0x1a>
	{
		putch(x,y,*str++);
		x=x+6;
	}
}
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	08 95       	ret

00002e54 <main>:
FRESULT scan_files (char* path);
FRESULT get_file_size();
FRESULT read();
FRESULT write();
int main(void)
{
    2e54:	2f 92       	push	r2
    2e56:	3f 92       	push	r3
    2e58:	4f 92       	push	r4
    2e5a:	5f 92       	push	r5
    2e5c:	6f 92       	push	r6
    2e5e:	7f 92       	push	r7
    2e60:	8f 92       	push	r8
    2e62:	9f 92       	push	r9
    2e64:	af 92       	push	r10
    2e66:	bf 92       	push	r11
    2e68:	cf 92       	push	r12
    2e6a:	df 92       	push	r13
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	c4 55       	subi	r28, 0x54	; 84
    2e7e:	d2 40       	sbci	r29, 0x02	; 2
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
	DDRD|=(1<<PORTD6);
    2e8a:	56 9a       	sbi	0x0a, 6	; 10
	DDRC=0xff;
    2e8c:	8f ef       	ldi	r24, 0xFF	; 255
    2e8e:	87 b9       	out	0x07, r24	; 7
	LCDInit();	
    2e90:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDInit>
	unsigned char temp1=0,temp2=0,i=0;
    2e94:	19 82       	std	Y+1, r1	; 0x01
    Serial_Init(57600);
    2e96:	60 e0       	ldi	r22, 0x00	; 0
    2e98:	71 ee       	ldi	r23, 0xE1	; 225
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 55 1b 	call	0x36aa	; 0x36aa <Serial_Init>
	Initialize_DS3231();
    2ea2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <Initialize_DS3231>
    2ea6:	2f ef       	ldi	r18, 0xFF	; 255
    2ea8:	83 ed       	ldi	r24, 0xD3	; 211
    2eaa:	90 e3       	ldi	r25, 0x30	; 48
    2eac:	21 50       	subi	r18, 0x01	; 1
    2eae:	80 40       	sbci	r24, 0x00	; 0
    2eb0:	90 40       	sbci	r25, 0x00	; 0
    2eb2:	e1 f7       	brne	.-8      	; 0x2eac <main+0x58>
    2eb4:	00 c0       	rjmp	.+0      	; 0x2eb6 <main+0x62>
    2eb6:	00 00       	nop
	//WriteTime_DS3231();
	_delay_ms(1000);
	Serial_SendString("Ready!\r\n");
    2eb8:	86 e4       	ldi	r24, 0x46	; 70
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <Serial_SendString>
	char line[29]; 
	FIL fil;   	
	FRESULT fr;   
	FILINFO fileinfo;
	fr=f_mount(0,&FatFs);
    2ec0:	6a eb       	ldi	r22, 0xBA	; 186
    2ec2:	71 e0       	ldi	r23, 0x01	; 1
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <f_mount>
	for (i=0;i<5;i++)
    2eca:	19 82       	std	Y+1, r1	; 0x01
	{
		fr=f_open(&fil,"/test1.txt",FA_CREATE_ALWAYS|FA_WRITE);
    2ecc:	4a e0       	ldi	r20, 0x0A	; 10
    2ece:	6f e4       	ldi	r22, 0x4F	; 79
    2ed0:	71 e0       	ldi	r23, 0x01	; 1
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	4f 96       	adiw	r24, 0x1f	; 31
    2ed6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <f_open>
		if (!fr) break;
    2eda:	88 23       	and	r24, r24
    2edc:	29 f0       	breq	.+10     	; 0x2ee8 <main+0x94>
	char line[29]; 
	FIL fil;   	
	FRESULT fr;   
	FILINFO fileinfo;
	fr=f_mount(0,&FatFs);
	for (i=0;i<5;i++)
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	8f 5f       	subi	r24, 0xFF	; 255
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	85 30       	cpi	r24, 0x05	; 5
    2ee6:	90 f3       	brcs	.-28     	; 0x2ecc <main+0x78>
	{
		fr=f_open(&fil,"/test1.txt",FA_CREATE_ALWAYS|FA_WRITE);
		if (!fr) break;
	}
	if (i==5)
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	85 30       	cpi	r24, 0x05	; 5
    2eec:	29 f4       	brne	.+10     	; 0x2ef8 <main+0xa4>
	{	
		Serial_SendString("mount error!");
    2eee:	8a e5       	ldi	r24, 0x5A	; 90
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <Serial_SendString>
		return 0;
    2ef6:	bc c0       	rjmp	.+376    	; 0x3070 <main+0x21c>
	}
	f_close(&fil);
    2ef8:	ce 01       	movw	r24, r28
    2efa:	4f 96       	adiw	r24, 0x1f	; 31
    2efc:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <f_close>
	f_mount(0, NULL);
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <f_mount>
int main(void)
{
	DDRD|=(1<<PORTD6);
	DDRC=0xff;
	LCDInit();	
	unsigned char temp1=0,temp2=0,i=0;
    2f0a:	51 2c       	mov	r5, r1
	f_close(&fil);
	f_mount(0, NULL);
    while(1)
	{
		Time_DisplayString();
		temp1=Time.second;
    2f0c:	0f 2e       	mov	r0, r31
    2f0e:	f3 e2       	ldi	r31, 0x23	; 35
    2f10:	8f 2e       	mov	r8, r31
    2f12:	f1 e0       	ldi	r31, 0x01	; 1
    2f14:	9f 2e       	mov	r9, r31
    2f16:	f0 2d       	mov	r31, r0
    2f18:	7e 01       	movw	r14, r28
    2f1a:	e1 e1       	ldi	r30, 0x11	; 17
    2f1c:	ee 0e       	add	r14, r30
    2f1e:	f1 1c       	adc	r15, r1
    2f20:	0f 2e       	mov	r0, r31
    2f22:	fb e0       	ldi	r31, 0x0B	; 11
    2f24:	6f 2e       	mov	r6, r31
    2f26:	f1 e0       	ldi	r31, 0x01	; 1
    2f28:	7f 2e       	mov	r7, r31
    2f2a:	f0 2d       	mov	r31, r0
    2f2c:	6e 01       	movw	r12, r28
    2f2e:	f9 e1       	ldi	r31, 0x19	; 25
    2f30:	cf 0e       	add	r12, r31
    2f32:	d1 1c       	adc	r13, r1
			line[28]='\0';
			Serial_SendString(line);
			for (i=0;i<5;i++)
			{	
				fr=f_mount(0,&FatFs);
				f_stat("test1.txt",&fileinfo);
    2f34:	8e 01       	movw	r16, r28
    2f36:	01 5c       	subi	r16, 0xC1	; 193
    2f38:	1d 4f       	sbci	r17, 0xFD	; 253
    2f3a:	30 2e       	mov	r3, r16
    2f3c:	41 2e       	mov	r4, r17
    2f3e:	5e 01       	movw	r10, r28
    2f40:	2e e1       	ldi	r18, 0x1E	; 30
    2f42:	a2 0e       	add	r10, r18
    2f44:	b1 1c       	adc	r11, r1
	}
	f_close(&fil);
	f_mount(0, NULL);
    while(1)
	{
		Time_DisplayString();
    2f46:	0e 94 33 16 	call	0x2c66	; 0x2c66 <Time_DisplayString>
		temp1=Time.second;
    2f4a:	f4 01       	movw	r30, r8
    2f4c:	26 80       	ldd	r2, Z+6	; 0x06
		if (temp1!=temp2)
    2f4e:	25 14       	cp	r2, r5
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <main+0x100>
    2f52:	84 c0       	rjmp	.+264    	; 0x305c <main+0x208>
		{	
			line[0]=32;
    2f54:	80 e2       	ldi	r24, 0x20	; 32
    2f56:	8a 83       	std	Y+2, r24	; 0x02
    2f58:	a4 e1       	ldi	r26, 0x14	; 20
    2f5a:	b1 e0       	ldi	r27, 0x01	; 1
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	33 96       	adiw	r30, 0x03	; 3
			for(i=0;i<14;i++)
			{
				line[i+1]=DS3231_Date[i];
    2f60:	8d 91       	ld	r24, X+
    2f62:	81 93       	st	Z+, r24
		Time_DisplayString();
		temp1=Time.second;
		if (temp1!=temp2)
		{	
			line[0]=32;
			for(i=0;i<14;i++)
    2f64:	ee 15       	cp	r30, r14
    2f66:	ff 05       	cpc	r31, r15
    2f68:	d9 f7       	brne	.-10     	; 0x2f60 <main+0x10c>
    2f6a:	d3 01       	movw	r26, r6
    2f6c:	f7 01       	movw	r30, r14
			{
				line[i+1]=DS3231_Date[i];
			}
			for(i=0;i<8;i++)
			{
				line[i+15]=DS3231_Time[i];
    2f6e:	8d 91       	ld	r24, X+
    2f70:	81 93       	st	Z+, r24
			line[0]=32;
			for(i=0;i<14;i++)
			{
				line[i+1]=DS3231_Date[i];
			}
			for(i=0;i<8;i++)
    2f72:	ec 15       	cp	r30, r12
    2f74:	fd 05       	cpc	r31, r13
    2f76:	d9 f7       	brne	.-10     	; 0x2f6e <main+0x11a>
    2f78:	88 e0       	ldi	r24, 0x08	; 8
    2f7a:	89 83       	std	Y+1, r24	; 0x01
			{
				line[i+15]=DS3231_Time[i];
			}
			line[23]=32;
    2f7c:	80 e2       	ldi	r24, 0x20	; 32
    2f7e:	89 8f       	std	Y+25, r24	; 0x19
			line[24]=DS3231_Temperature[0];
    2f80:	e0 e0       	ldi	r30, 0x00	; 0
    2f82:	f1 e0       	ldi	r31, 0x01	; 1
    2f84:	80 81       	ld	r24, Z
    2f86:	8a 8f       	std	Y+26, r24	; 0x1a
			line[25]=DS3231_Temperature[1];
    2f88:	81 81       	ldd	r24, Z+1	; 0x01
    2f8a:	8b 8f       	std	Y+27, r24	; 0x1b
			line[26]='\r';
    2f8c:	8d e0       	ldi	r24, 0x0D	; 13
    2f8e:	8c 8f       	std	Y+28, r24	; 0x1c
			line[27]='\n';
    2f90:	8a e0       	ldi	r24, 0x0A	; 10
    2f92:	8d 8f       	std	Y+29, r24	; 0x1d
			line[28]='\0';
    2f94:	1e 8e       	std	Y+30, r1	; 0x1e
			Serial_SendString(line);
    2f96:	ce 01       	movw	r24, r28
    2f98:	02 96       	adiw	r24, 0x02	; 2
    2f9a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <Serial_SendString>
			for (i=0;i<5;i++)
    2f9e:	19 82       	std	Y+1, r1	; 0x01
			{	
				fr=f_mount(0,&FatFs);
    2fa0:	6a eb       	ldi	r22, 0xBA	; 186
    2fa2:	71 e0       	ldi	r23, 0x01	; 1
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <f_mount>
				f_stat("test1.txt",&fileinfo);
    2faa:	63 2d       	mov	r22, r3
    2fac:	74 2d       	mov	r23, r4
    2fae:	80 e5       	ldi	r24, 0x50	; 80
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	0e 94 f7 14 	call	0x29ee	; 0x29ee <f_stat>
				fr=f_open(&fil,"/test1.txt",FA_WRITE);				
    2fb6:	42 e0       	ldi	r20, 0x02	; 2
    2fb8:	6f e4       	ldi	r22, 0x4F	; 79
    2fba:	71 e0       	ldi	r23, 0x01	; 1
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	4f 96       	adiw	r24, 0x1f	; 31
    2fc0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <f_open>
    2fc4:	58 2e       	mov	r5, r24
				f_lseek(&fil,fileinfo.fsize);
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	40 81       	ld	r20, Z
    2fca:	51 81       	ldd	r21, Z+1	; 0x01
    2fcc:	62 81       	ldd	r22, Z+2	; 0x02
    2fce:	73 81       	ldd	r23, Z+3	; 0x03
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	4f 96       	adiw	r24, 0x1f	; 31
    2fd4:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <f_lseek>
				if (!fr)
    2fd8:	51 10       	cpse	r5, r1
    2fda:	29 c0       	rjmp	.+82     	; 0x302e <main+0x1da>
				{
					fr=f_write(&fil,line,27,&i);
    2fdc:	9e 01       	movw	r18, r28
    2fde:	2f 5f       	subi	r18, 0xFF	; 255
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	4b e1       	ldi	r20, 0x1B	; 27
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	be 01       	movw	r22, r28
    2fe8:	6e 5f       	subi	r22, 0xFE	; 254
    2fea:	7f 4f       	sbci	r23, 0xFF	; 255
    2fec:	ce 01       	movw	r24, r28
    2fee:	4f 96       	adiw	r24, 0x1f	; 31
    2ff0:	0e 94 76 10 	call	0x20ec	; 0x20ec <f_write>
					if (!fr)
    2ff4:	81 11       	cpse	r24, r1
    2ff6:	06 c0       	rjmp	.+12     	; 0x3004 <main+0x1b0>
					{
						putstr(20,7,"Write OK!");
    2ff8:	47 e6       	ldi	r20, 0x67	; 103
    2ffa:	51 e0       	ldi	r21, 0x01	; 1
    2ffc:	67 e0       	ldi	r22, 0x07	; 7
    2ffe:	84 e1       	ldi	r24, 0x14	; 20
    3000:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <putstr>
					}
					f_close(&fil);
    3004:	ce 01       	movw	r24, r28
    3006:	4f 96       	adiw	r24, 0x1f	; 31
    3008:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <f_close>
					f_mount(0, NULL);
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <f_mount>
					putstr(20,4,DS3231_Time);
    3016:	a3 01       	movw	r20, r6
    3018:	64 e0       	ldi	r22, 0x04	; 4
    301a:	84 e1       	ldi	r24, 0x14	; 20
    301c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <putstr>
					putstr(40,2,DS3231_Temperature);
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	51 e0       	ldi	r21, 0x01	; 1
    3024:	62 e0       	ldi	r22, 0x02	; 2
    3026:	88 e2       	ldi	r24, 0x28	; 40
    3028:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <putstr>
					break;
    302c:	06 c0       	rjmp	.+12     	; 0x303a <main+0x1e6>
			line[25]=DS3231_Temperature[1];
			line[26]='\r';
			line[27]='\n';
			line[28]='\0';
			Serial_SendString(line);
			for (i=0;i<5;i++)
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	8f 5f       	subi	r24, 0xFF	; 255
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	85 30       	cpi	r24, 0x05	; 5
    3036:	08 f4       	brcc	.+2      	; 0x303a <main+0x1e6>
    3038:	b3 cf       	rjmp	.-154    	; 0x2fa0 <main+0x14c>
					putstr(20,4,DS3231_Time);
					putstr(40,2,DS3231_Temperature);
					break;
				}
			}
			if (i==5)
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	85 30       	cpi	r24, 0x05	; 5
    303e:	29 f4       	brne	.+10     	; 0x304a <main+0x1f6>
			{
				Serial_SendString("mount error!");
    3040:	8a e5       	ldi	r24, 0x5A	; 90
    3042:	91 e0       	ldi	r25, 0x01	; 1
    3044:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <Serial_SendString>
				return 0;
    3048:	13 c0       	rjmp	.+38     	; 0x3070 <main+0x21c>
    304a:	fe 01       	movw	r30, r28
    304c:	32 96       	adiw	r30, 0x02	; 2
			}							
			for (i=0;i<28;i++)
			{
				line[i]=0;
    304e:	11 92       	st	Z+, r1
			if (i==5)
			{
				Serial_SendString("mount error!");
				return 0;
			}							
			for (i=0;i<28;i++)
    3050:	ea 15       	cp	r30, r10
    3052:	fb 05       	cpc	r31, r11
    3054:	e1 f7       	brne	.-8      	; 0x304e <main+0x1fa>
    3056:	8c e1       	ldi	r24, 0x1C	; 28
    3058:	89 83       	std	Y+1, r24	; 0x01
			{
				line[i]=0;
			}						
			temp2=temp1;
    305a:	52 2c       	mov	r5, r2
    305c:	ff ef       	ldi	r31, 0xFF	; 255
    305e:	23 ec       	ldi	r18, 0xC3	; 195
    3060:	89 e0       	ldi	r24, 0x09	; 9
    3062:	f1 50       	subi	r31, 0x01	; 1
    3064:	20 40       	sbci	r18, 0x00	; 0
    3066:	80 40       	sbci	r24, 0x00	; 0
    3068:	e1 f7       	brne	.-8      	; 0x3062 <main+0x20e>
    306a:	00 c0       	rjmp	.+0      	; 0x306c <main+0x218>
    306c:	00 00       	nop
    306e:	6b cf       	rjmp	.-298    	; 0x2f46 <main+0xf2>
		_delay_ms(200);
	}
	f_close(&fil);
	f_mount(0, NULL);
	return 0;
}
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	cc 5a       	subi	r28, 0xAC	; 172
    3076:	dd 4f       	sbci	r29, 0xFD	; 253
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	ff 90       	pop	r15
    308c:	ef 90       	pop	r14
    308e:	df 90       	pop	r13
    3090:	cf 90       	pop	r12
    3092:	bf 90       	pop	r11
    3094:	af 90       	pop	r10
    3096:	9f 90       	pop	r9
    3098:	8f 90       	pop	r8
    309a:	7f 90       	pop	r7
    309c:	6f 90       	pop	r6
    309e:	5f 90       	pop	r5
    30a0:	4f 90       	pop	r4
    30a2:	3f 90       	pop	r3
    30a4:	2f 90       	pop	r2
    30a6:	08 95       	ret

000030a8 <SPI_Low>:

unsigned char SD_Type=0 ;

void SPI_Low(void)		
{//SPI低速模式
	SPCR = 0;
    30a8:	1c bc       	out	0x2c, r1	; 44
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1);
    30aa:	83 e5       	ldi	r24, 0x53	; 83
    30ac:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1 << SPI2X);
    30ae:	8d b5       	in	r24, 0x2d	; 45
    30b0:	8e 7f       	andi	r24, 0xFE	; 254
    30b2:	8d bd       	out	0x2d, r24	; 45
    30b4:	08 95       	ret

000030b6 <SPI_High>:
	//使能SPI,主机方式,MSB在前,模式0,128分频
}

void SPI_High(void)
{//SPI高速模式
	SPCR = 0;
    30b6:	1c bc       	out	0x2c, r1	; 44
	SPCR = (1 << SPE) | (1 << MSTR);
    30b8:	80 e5       	ldi	r24, 0x50	; 80
    30ba:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
    30bc:	8d b5       	in	r24, 0x2d	; 45
    30be:	81 60       	ori	r24, 0x01	; 1
    30c0:	8d bd       	out	0x2d, r24	; 45
    30c2:	08 95       	ret

000030c4 <SPI_Init>:
}


void SPI_Init(void)
{//SPI初始化
	PORT_SPI |= (1 << SPI_SS) | (1 << SPI_MISO);		//将SS置位输出拉高,MISO输入带上拉
    30c4:	85 b1       	in	r24, 0x05	; 5
    30c6:	84 61       	ori	r24, 0x14	; 20
    30c8:	85 b9       	out	0x05, r24	; 5
	DDR_SPI &= ~((1 << SPI_SS) | (1 << SPI_MOSI) | (1 << SPI_MISO)| (1 << SPI_SCK));
    30ca:	84 b1       	in	r24, 0x04	; 4
    30cc:	83 7c       	andi	r24, 0xC3	; 195
    30ce:	84 b9       	out	0x04, r24	; 4
	DDR_SPI |= (1 << SPI_SS) | (1 << SPI_MOSI) | (1 << SPI_SCK);
    30d0:	84 b1       	in	r24, 0x04	; 4
    30d2:	8c 62       	ori	r24, 0x2C	; 44
    30d4:	84 b9       	out	0x04, r24	; 4
    30d6:	08 95       	ret

000030d8 <SPI_RW>:
}


unsigned char SPI_RW(unsigned char dat)
{
	SPDR = dat;
    30d8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)))
    30da:	0d b4       	in	r0, 0x2d	; 45
    30dc:	07 fe       	sbrs	r0, 7
    30de:	fd cf       	rjmp	.-6      	; 0x30da <SPI_RW+0x2>
		;
	return (SPDR);
    30e0:	8e b5       	in	r24, 0x2e	; 46
}
    30e2:	08 95       	ret

000030e4 <SD_Write_Command>:
//****************************************************************************
//Send a Command to MMC/SD-Card
//Return: the second byte of response register of MMC/SD-Card
//****************************************************************************
unsigned char SD_Write_Command(unsigned char cmd,unsigned long arg)
{
    30e4:	ff 92       	push	r15
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	f8 2e       	mov	r15, r24
    30f0:	c4 2f       	mov	r28, r20
    30f2:	d5 2f       	mov	r29, r21
    30f4:	16 2f       	mov	r17, r22
    30f6:	07 2f       	mov	r16, r23
	unsigned char tmp;
	unsigned char retry=0;
	
	SD_CS_H;   //关闭SD卡
    30f8:	2a 9a       	sbi	0x05, 2	; 5
	SPI_RW(0xff);
    30fa:	8f ef       	ldi	r24, 0xFF	; 255
    30fc:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
	SD_CS_L;
    3100:	2a 98       	cbi	0x05, 2	; 5
	SPI_RW(cmd|0x40);   //送头命令
    3102:	8f 2d       	mov	r24, r15
    3104:	80 64       	ori	r24, 0x40	; 64
    3106:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
	SPI_RW(arg>>24);  //最高的8位
    310a:	80 2f       	mov	r24, r16
    310c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
	SPI_RW(arg>>16);   //send 6 Byte Command to MMC/SD-Card
    3110:	81 2f       	mov	r24, r17
    3112:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
	SPI_RW(arg>>8);
    3116:	8d 2f       	mov	r24, r29
    3118:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
	SPI_RW(arg&0xff);
    311c:	8c 2f       	mov	r24, r28
    311e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
	SPI_RW(0x95);      //仅仅对RESET有效的CRC效验码
    3122:	85 e9       	ldi	r24, 0x95	; 149
    3124:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    3128:	c4 e6       	ldi	r28, 0x64	; 100
		//get 8 bit response 

	do
	{
		tmp = SPI_RW(0XFF);
    312a:	8f ef       	ldi	r24, 0xFF	; 255
    312c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
		retry++;
	}while((tmp==0xff)&&(retry<100));
    3130:	8f 3f       	cpi	r24, 0xFF	; 255
    3132:	11 f4       	brne	.+4      	; 0x3138 <SD_Write_Command+0x54>
    3134:	c1 50       	subi	r28, 0x01	; 1
    3136:	c9 f7       	brne	.-14     	; 0x312a <SD_Write_Command+0x46>

	if(reading==0) SD_CS_H;
    3138:	90 91 b9 01 	lds	r25, 0x01B9
    313c:	91 11       	cpse	r25, r1
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <SD_Write_Command+0x60>
    3140:	2a 9a       	sbi	0x05, 2	; 5
    3142:	01 c0       	rjmp	.+2      	; 0x3146 <SD_Write_Command+0x62>
	else
	SD_CS_L;
    3144:	2a 98       	cbi	0x05, 2	; 5
	return(tmp);

		
}
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	0f 91       	pop	r16
    314e:	ff 90       	pop	r15
    3150:	08 95       	ret

00003152 <SD_Init>:

//****************************************************************************
//SD卡初始化(SPI-MODE)
//****************************************************************************
unsigned char SD_Init(void)
{
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28

	unsigned char i,temp;
    unsigned int retry; 
	

	SPI_Init();
    3158:	0e 94 62 18 	call	0x30c4	; 0x30c4 <SPI_Init>
	SPI_Low();
    315c:	0e 94 54 18 	call	0x30a8	; 0x30a8 <SPI_Low>

	SD_CS_L;
    3160:	2a 98       	cbi	0x05, 2	; 5
    3162:	8f e9       	ldi	r24, 0x9F	; 159
    3164:	9f e0       	ldi	r25, 0x0F	; 15
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <SD_Init+0x14>
    316a:	00 c0       	rjmp	.+0      	; 0x316c <SD_Init+0x1a>
    316c:	00 00       	nop
    316e:	cf ef       	ldi	r28, 0xFF	; 255
	_delay_ms(1);       //Wait MMC/SD ready...

	for(i=0;i<0xff;i++)
	{
		SPI_RW(0xff);   //send 74 clock at least!!!
    3170:	8f ef       	ldi	r24, 0xFF	; 255
    3172:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    3176:	c1 50       	subi	r28, 0x01	; 1
	SPI_Low();

	SD_CS_L;
	_delay_ms(1);       //Wait MMC/SD ready...

	for(i=0;i<0xff;i++)
    3178:	d9 f7       	brne	.-10     	; 0x3170 <SD_Init+0x1e>
    317a:	2d c0       	rjmp	.+90     	; 0x31d6 <SD_Init+0x84>

	retry = 0;

	do
	{
		temp=SD_Write_Command(0,0);//retry 200 times to send CMD0 command 
    317c:	40 e0       	ldi	r20, 0x00	; 0
    317e:	50 e0       	ldi	r21, 0x00	; 0
    3180:	ba 01       	movw	r22, r20
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	0e 94 72 18 	call	0x30e4	; 0x30e4 <SD_Write_Command>
    3188:	01 50       	subi	r16, 0x01	; 1
    318a:	11 09       	sbc	r17, r1
		retry++;
		if(retry==2000) return 0xff;//CMD0 Error! 
    318c:	b9 f0       	breq	.+46     	; 0x31bc <SD_Init+0x6a>

	}while(temp!=1);      //temp=0x01即说明SD卡进入空闲状态复位成功
    318e:	81 30       	cpi	r24, 0x01	; 1
    3190:	a9 f7       	brne	.-22     	; 0x317c <SD_Init+0x2a>
    3192:	18 c0       	rjmp	.+48     	; 0x31c4 <SD_Init+0x72>

	retry = 0;
	do
	{
		temp=SD_Write_Command(1,0);
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	ba 01       	movw	r22, r20
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	0e 94 72 18 	call	0x30e4	; 0x30e4 <SD_Write_Command>
    31a0:	01 50       	subi	r16, 0x01	; 1
    31a2:	11 09       	sbc	r17, r1
		retry++;
		if(retry >= 2000) return 0xff;  //retry 100 times to send CMD1 command 
    31a4:	69 f0       	breq	.+26     	; 0x31c0 <SD_Init+0x6e>
	}while(temp!=0);    //temp=0说明SD可以进行操作 激活成功
    31a6:	81 11       	cpse	r24, r1
    31a8:	f5 cf       	rjmp	.-22     	; 0x3194 <SD_Init+0x42>

	retry = 0;
	SD_Write_Command(16,512);     //设置一次读写BLOCK的长度为512个字节 CMD16
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	52 e0       	ldi	r21, 0x02	; 2
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	80 e1       	ldi	r24, 0x10	; 16
    31b4:	0e 94 72 18 	call	0x30e4	; 0x30e4 <SD_Write_Command>
	SD_CS_H;   //MMC_CS_PIN=1;  //set MMC_Chip_Select to high 关闭片选
    31b8:	2a 9a       	sbi	0x05, 2	; 5
    return(0); //All commands have been taken.
    31ba:	16 c0       	rjmp	.+44     	; 0x31e8 <SD_Init+0x96>

	do
	{
		temp=SD_Write_Command(0,0);//retry 200 times to send CMD0 command 
		retry++;
		if(retry==2000) return 0xff;//CMD0 Error! 
    31bc:	cf ef       	ldi	r28, 0xFF	; 255
    31be:	14 c0       	rjmp	.+40     	; 0x31e8 <SD_Init+0x96>
	retry = 0;
	do
	{
		temp=SD_Write_Command(1,0);
		retry++;
		if(retry >= 2000) return 0xff;  //retry 100 times to send CMD1 command 
    31c0:	cf ef       	ldi	r28, 0xFF	; 255
    31c2:	12 c0       	rjmp	.+36     	; 0x31e8 <SD_Init+0x96>
	}while(temp!=1);      //temp=0x01即说明SD卡进入空闲状态复位成功

	retry = 0;
	do
	{
		temp=SD_Write_Command(1,0);
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	50 e0       	ldi	r21, 0x00	; 0
    31c8:	ba 01       	movw	r22, r20
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	0e 94 72 18 	call	0x30e4	; 0x30e4 <SD_Write_Command>
    31d0:	0f ec       	ldi	r16, 0xCF	; 207
    31d2:	17 e0       	ldi	r17, 0x07	; 7
    31d4:	e8 cf       	rjmp	.-48     	; 0x31a6 <SD_Init+0x54>

	retry = 0;

	do
	{
		temp=SD_Write_Command(0,0);//retry 200 times to send CMD0 command 
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	50 e0       	ldi	r21, 0x00	; 0
    31da:	ba 01       	movw	r22, r20
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	0e 94 72 18 	call	0x30e4	; 0x30e4 <SD_Write_Command>
    31e2:	0f ec       	ldi	r16, 0xCF	; 207
    31e4:	17 e0       	ldi	r17, 0x07	; 7
    31e6:	d3 cf       	rjmp	.-90     	; 0x318e <SD_Init+0x3c>
	SD_Write_Command(16,512);     //设置一次读写BLOCK的长度为512个字节 CMD16
	SD_CS_H;   //MMC_CS_PIN=1;  //set MMC_Chip_Select to high 关闭片选
    return(0); //All commands have been taken.


}
    31e8:	8c 2f       	mov	r24, r28
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	08 95       	ret

000031f2 <SD_SendCommand>:
*                  unsigned char crc   crc校验值
* Output         : None
* Return         : unsigned char r1 SD卡返回的响应
*******************************************************************************/
unsigned char SD_SendCommand(unsigned char cmd,unsigned long arg,unsigned char crc)
{
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	e8 2e       	mov	r14, r24
    3200:	d4 2f       	mov	r29, r20
    3202:	15 2f       	mov	r17, r21
    3204:	06 2f       	mov	r16, r22
    3206:	f7 2e       	mov	r15, r23
    3208:	c2 2f       	mov	r28, r18
    unsigned char r1 ;
    unsigned char Retry=0 ;
    

    SPI_RW(0XFF);
    320a:	8f ef       	ldi	r24, 0xFF	; 255
    320c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    //片选端置低，选中SD卡
    SD_CS_L;   //PC0 = 0
    3210:	2a 98       	cbi	0x05, 2	; 5
    
    //发送
    SPI_RW(cmd|0x40);
    3212:	8e 2d       	mov	r24, r14
    3214:	80 64       	ori	r24, 0x40	; 64
    3216:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    //分别写入命令
    SPI_RW(arg>>24);
    321a:	8f 2d       	mov	r24, r15
    321c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(arg>>16);
    3220:	80 2f       	mov	r24, r16
    3222:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(arg>>8);
    3226:	81 2f       	mov	r24, r17
    3228:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(arg);
    322c:	8d 2f       	mov	r24, r29
    322e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(crc);
    3232:	8c 2f       	mov	r24, r28
    3234:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    
    //等待响应，或超时退出
    while((r1=SPI_RW(0xFF))==0xFF)
    3238:	c9 ec       	ldi	r28, 0xC9	; 201
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <SD_SendCommand+0x4e>
    323c:	c1 50       	subi	r28, 0x01	; 1
    {
        Retry++;
        if(Retry>200)
    323e:	31 f0       	breq	.+12     	; 0x324c <SD_SendCommand+0x5a>
    SPI_RW(arg>>8);
    SPI_RW(arg);
    SPI_RW(crc);
    
    //等待响应，或超时退出
    while((r1=SPI_RW(0xFF))==0xFF)
    3240:	8f ef       	ldi	r24, 0xFF	; 255
    3242:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    3246:	d8 2f       	mov	r29, r24
    3248:	8f 3f       	cpi	r24, 0xFF	; 255
    324a:	c1 f3       	breq	.-16     	; 0x323c <SD_SendCommand+0x4a>
        break ;
        }
    }

    //关闭片选
    SD_CS_H;
    324c:	2a 9a       	sbi	0x05, 2	; 5
    //在总线上额外增加8个时钟，让SD卡完成剩下的工作
    SPI_RW(0xFF);
    324e:	8f ef       	ldi	r24, 0xFF	; 255
    3250:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    
    //返回状态值
    return r1 ;
}
    3254:	8d 2f       	mov	r24, r29
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	08 95       	ret

00003264 <SD_ReceiveData>:
* Return         : unsigned char
*                  0：NO_ERR
*                  other：错误信息
*******************************************************************************/
unsigned char SD_ReceiveData(unsigned char*data,unsigned int len,unsigned char release)
{
    3264:	df 92       	push	r13
    3266:	ef 92       	push	r14
    3268:	ff 92       	push	r15
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	7c 01       	movw	r14, r24
    3274:	8b 01       	movw	r16, r22
    3276:	d4 2e       	mov	r13, r20
    unsigned int retry ;
    unsigned char r1 ;
    
    // 启动一次传输
    SD_CS_L;
    3278:	2a 98       	cbi	0x05, 2	; 5
    //等待SD卡发回数据起始令牌0xFE
    retry=0 ;
    do 
    {
        r1=SPI_RW(0xFF);
    327a:	8f ef       	ldi	r24, 0xFF	; 255
    327c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    3280:	c8 ec       	ldi	r28, 0xC8	; 200
    3282:	d0 e0       	ldi	r29, 0x00	; 0
    3284:	08 c0       	rjmp	.+16     	; 0x3296 <SD_ReceiveData+0x32>
    3286:	8f ef       	ldi	r24, 0xFF	; 255
    3288:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    328c:	21 97       	sbiw	r28, 0x01	; 1
        retry++;
        //2000次等待后没有应答，退出报错
        if(retry>200)
    328e:	19 f4       	brne	.+6      	; 0x3296 <SD_ReceiveData+0x32>
        {
            SD_CS_H;
    3290:	2a 9a       	sbi	0x05, 2	; 5
            return 1 ;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	1e c0       	rjmp	.+60     	; 0x32d2 <SD_ReceiveData+0x6e>
        }
    }
    while(r1!=0xFE);
    3296:	8e 3f       	cpi	r24, 0xFE	; 254
    3298:	b1 f7       	brne	.-20     	; 0x3286 <SD_ReceiveData+0x22>
    //开始接收数据
    while(len--)
    329a:	01 15       	cp	r16, r1
    329c:	11 05       	cpc	r17, r1
    329e:	49 f0       	breq	.+18     	; 0x32b2 <SD_ReceiveData+0x4e>
    32a0:	e8 01       	movw	r28, r16
    {
        *data=SPI_RW(0xFF);
    32a2:	8f ef       	ldi	r24, 0xFF	; 255
    32a4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    32a8:	f7 01       	movw	r30, r14
    32aa:	81 93       	st	Z+, r24
    32ac:	7f 01       	movw	r14, r30
    32ae:	21 97       	sbiw	r28, 0x01	; 1
            return 1 ;
        }
    }
    while(r1!=0xFE);
    //开始接收数据
    while(len--)
    32b0:	c1 f7       	brne	.-16     	; 0x32a2 <SD_ReceiveData+0x3e>
    {
        *data=SPI_RW(0xFF);
        data++;
    }
    //下面是2个伪CRC（dummy CRC）
    SPI_RW(0xFF);
    32b2:	8f ef       	ldi	r24, 0xFF	; 255
    32b4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(0xFF);
    32b8:	8f ef       	ldi	r24, 0xFF	; 255
    32ba:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    //按需释放总线，将CS置高
    if(release==RELEASE)
    32be:	f1 e0       	ldi	r31, 0x01	; 1
    32c0:	df 12       	cpse	r13, r31
    32c2:	06 c0       	rjmp	.+12     	; 0x32d0 <SD_ReceiveData+0x6c>
    {
        //传输结束
        SD_CS_H;
    32c4:	2a 9a       	sbi	0x05, 2	; 5
        SPI_RW(0xFF);
    32c6:	8f ef       	ldi	r24, 0xFF	; 255
    32c8:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    }
    return 0 ;
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	01 c0       	rjmp	.+2      	; 0x32d2 <SD_ReceiveData+0x6e>
    32d0:	80 e0       	ldi	r24, 0x00	; 0
}
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	ff 90       	pop	r15
    32dc:	ef 90       	pop	r14
    32de:	df 90       	pop	r13
    32e0:	08 95       	ret

000032e2 <SD_ReadSingleBlock>:
* Return         : unsigned char r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
unsigned char SD_ReadSingleBlock(unsigned long sector,unsigned char*buffer)
{
    32e2:	cf 92       	push	r12
    32e4:	df 92       	push	r13
    32e6:	ef 92       	push	r14
    32e8:	ff 92       	push	r15
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	6b 01       	movw	r12, r22
    32f0:	7c 01       	movw	r14, r24
    32f2:	ea 01       	movw	r28, r20
    unsigned char r1 ;
    
    //设置为高速模式
    SPI_High();
    32f4:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <SPI_High>
    
    //如果不是SDHC，将sector地址转成byte地址
    sector=sector<<9 ;
    32f8:	b7 01       	movw	r22, r14
    32fa:	a6 01       	movw	r20, r12
    32fc:	03 2e       	mov	r0, r19
    32fe:	39 e0       	ldi	r19, 0x09	; 9
    3300:	44 0f       	add	r20, r20
    3302:	55 1f       	adc	r21, r21
    3304:	66 1f       	adc	r22, r22
    3306:	77 1f       	adc	r23, r23
    3308:	3a 95       	dec	r19
    330a:	d1 f7       	brne	.-12     	; 0x3300 <SD_ReadSingleBlock+0x1e>
    330c:	30 2d       	mov	r19, r0
    
    r1=SD_SendCommand(CMD17,sector,0);
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	81 e1       	ldi	r24, 0x11	; 17
    3312:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <SD_SendCommand>
    //读命令
    
    if(r1!=0x00)
    3316:	81 11       	cpse	r24, r1
    3318:	06 c0       	rjmp	.+12     	; 0x3326 <SD_ReadSingleBlock+0x44>
    {
        return r1 ;
    }
    
    r1=SD_ReceiveData(buffer,512,RELEASE);
    331a:	41 e0       	ldi	r20, 0x01	; 1
    331c:	60 e0       	ldi	r22, 0x00	; 0
    331e:	72 e0       	ldi	r23, 0x02	; 2
    3320:	ce 01       	movw	r24, r28
    3322:	0e 94 32 19 	call	0x3264	; 0x3264 <SD_ReceiveData>
    }
    else 
    {
        return 0 ;
    }
}
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	df 90       	pop	r13
    3330:	cf 90       	pop	r12
    3332:	08 95       	ret

00003334 <SD_ReadMultiBlock>:
* Return         : unsigned char r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
unsigned char SD_ReadMultiBlock(unsigned long sector,unsigned char *buffer,unsigned char count)
{
    3334:	cf 92       	push	r12
    3336:	df 92       	push	r13
    3338:	ef 92       	push	r14
    333a:	ff 92       	push	r15
    333c:	0f 93       	push	r16
    333e:	1f 93       	push	r17
    3340:	cf 93       	push	r28
    3342:	6b 01       	movw	r12, r22
    3344:	7c 01       	movw	r14, r24
    3346:	8a 01       	movw	r16, r20
    3348:	c2 2f       	mov	r28, r18
    unsigned char r1 ;
    
    //设置为高速模式
    SPI_High();
    334a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <SPI_High>
    
    //如果不是SDHC，将sector地址转成byte地址
    sector=sector<<9 ;
    334e:	b7 01       	movw	r22, r14
    3350:	a6 01       	movw	r20, r12
    3352:	03 2e       	mov	r0, r19
    3354:	39 e0       	ldi	r19, 0x09	; 9
    3356:	44 0f       	add	r20, r20
    3358:	55 1f       	adc	r21, r21
    335a:	66 1f       	adc	r22, r22
    335c:	77 1f       	adc	r23, r23
    335e:	3a 95       	dec	r19
    3360:	d1 f7       	brne	.-12     	; 0x3356 <SD_ReadMultiBlock+0x22>
    3362:	30 2d       	mov	r19, r0
    //SD_WaitReady();
    //发读多块命令
    r1=SD_SendCommand(CMD18,sector,0);
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	82 e1       	ldi	r24, 0x12	; 18
    3368:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <SD_SendCommand>
    //读命令
    if(r1!=0x00)
    336c:	81 11       	cpse	r24, r1
    336e:	17 c0       	rjmp	.+46     	; 0x339e <SD_ReadMultiBlock+0x6a>
        return r1 ;
    }
    //开始接收数据
    do 
    {
        if(SD_ReceiveData(buffer,512,NO_RELEASE)!=0x00)
    3370:	40 e0       	ldi	r20, 0x00	; 0
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	72 e0       	ldi	r23, 0x02	; 2
    3376:	c8 01       	movw	r24, r16
    3378:	0e 94 32 19 	call	0x3264	; 0x3264 <SD_ReceiveData>
    337c:	81 11       	cpse	r24, r1
    337e:	03 c0       	rjmp	.+6      	; 0x3386 <SD_ReadMultiBlock+0x52>
        {
            break ;
        }
        buffer+=512 ;
    3380:	1e 5f       	subi	r17, 0xFE	; 254
    }
    while(--count);
    3382:	c1 50       	subi	r28, 0x01	; 1
    3384:	a9 f7       	brne	.-22     	; 0x3370 <SD_ReadMultiBlock+0x3c>
    
    //全部传输完毕，发送停止命令
    SD_SendCommand(CMD12,0,0);
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	40 e0       	ldi	r20, 0x00	; 0
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	ba 01       	movw	r22, r20
    338e:	8c e0       	ldi	r24, 0x0C	; 12
    3390:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <SD_SendCommand>
    //释放总线
    SD_CS_H;
    3394:	2a 9a       	sbi	0x05, 2	; 5
    SPI_RW(0xFF);
    3396:	8f ef       	ldi	r24, 0xFF	; 255
    3398:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
        return count ;
        //如果没有传完，返回剩余个数
    }
    else 
    {
        return 0 ;
    339c:	8c 2f       	mov	r24, r28
    }
}
    339e:	cf 91       	pop	r28
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	ff 90       	pop	r15
    33a6:	ef 90       	pop	r14
    33a8:	df 90       	pop	r13
    33aa:	cf 90       	pop	r12
    33ac:	08 95       	ret

000033ae <SD_WriteSingleBlock>:
* Return         : unsigned char r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
unsigned char SD_WriteSingleBlock(unsigned long sector,const unsigned char *data)
{
    33ae:	cf 92       	push	r12
    33b0:	df 92       	push	r13
    33b2:	ef 92       	push	r14
    33b4:	ff 92       	push	r15
    33b6:	0f 93       	push	r16
    33b8:	1f 93       	push	r17
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	6b 01       	movw	r12, r22
    33c0:	7c 01       	movw	r14, r24
    33c2:	8a 01       	movw	r16, r20
    unsigned char r1 ;
    unsigned int i ;
    unsigned int retry ;
    
    //设置为高速模式
    SPI_High();
    33c4:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <SPI_High>
    
    //如果不是SDHC，给定的是sector地址，将其转换成byte地址
    if(SD_Type!=SD_TYPE_V2HC)
    33c8:	80 91 b8 01 	lds	r24, 0x01B8
    33cc:	84 30       	cpi	r24, 0x04	; 4
    33ce:	49 f0       	breq	.+18     	; 0x33e2 <SD_WriteSingleBlock+0x34>
    {
        sector=sector<<9 ;
    33d0:	0b 2e       	mov	r0, r27
    33d2:	b9 e0       	ldi	r27, 0x09	; 9
    33d4:	cc 0c       	add	r12, r12
    33d6:	dd 1c       	adc	r13, r13
    33d8:	ee 1c       	adc	r14, r14
    33da:	ff 1c       	adc	r15, r15
    33dc:	ba 95       	dec	r27
    33de:	d1 f7       	brne	.-12     	; 0x33d4 <SD_WriteSingleBlock+0x26>
    33e0:	b0 2d       	mov	r27, r0
    }
    
    r1=SD_SendCommand(CMD24,sector,0x00);
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	b7 01       	movw	r22, r14
    33e6:	a6 01       	movw	r20, r12
    33e8:	88 e1       	ldi	r24, 0x18	; 24
    33ea:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <SD_SendCommand>
    if(r1!=0x00)
    33ee:	81 11       	cpse	r24, r1
    33f0:	35 c0       	rjmp	.+106    	; 0x345c <SD_WriteSingleBlock+0xae>
        return r1 ;
        //应答不正确，直接返回
    }
    
    //开始准备数据传输
    SD_CS_L;
    33f2:	2a 98       	cbi	0x05, 2	; 5
    //先放3个空数据，等待SD卡准备好
    SPI_RW(0xff);
    33f4:	8f ef       	ldi	r24, 0xFF	; 255
    33f6:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(0xff);
    33fa:	8f ef       	ldi	r24, 0xFF	; 255
    33fc:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(0xff);
    3400:	8f ef       	ldi	r24, 0xFF	; 255
    3402:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    //放起始令牌0xFE
    SPI_RW(0xFE);
    3406:	8e ef       	ldi	r24, 0xFE	; 254
    3408:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    340c:	e8 01       	movw	r28, r16
    340e:	1e 5f       	subi	r17, 0xFE	; 254
    
    //放一个sector的数据
    for(i=0;i<512;i++)
    {
        SPI_RW(*data++);
    3410:	89 91       	ld	r24, Y+
    3412:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(0xff);
    //放起始令牌0xFE
    SPI_RW(0xFE);
    
    //放一个sector的数据
    for(i=0;i<512;i++)
    3416:	c0 17       	cp	r28, r16
    3418:	d1 07       	cpc	r29, r17
    341a:	d1 f7       	brne	.-12     	; 0x3410 <SD_WriteSingleBlock+0x62>
    {
        SPI_RW(*data++);
    }
    //发2个Byte的dummy CRC
    SPI_RW(0xff);
    341c:	8f ef       	ldi	r24, 0xFF	; 255
    341e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(0xff);
    3422:	8f ef       	ldi	r24, 0xFF	; 255
    3424:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    
    //等待SD卡应答
    r1=SPI_RW(0xff);
    3428:	8f ef       	ldi	r24, 0xFF	; 255
    342a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    if((r1&0x1F)!=0x05)
    342e:	98 2f       	mov	r25, r24
    3430:	9f 71       	andi	r25, 0x1F	; 31
    3432:	95 30       	cpi	r25, 0x05	; 5
    3434:	39 f0       	breq	.+14     	; 0x3444 <SD_WriteSingleBlock+0x96>
    {
        SD_CS_H;
    3436:	2a 9a       	sbi	0x05, 2	; 5
        return r1 ;
    3438:	11 c0       	rjmp	.+34     	; 0x345c <SD_WriteSingleBlock+0xae>
    343a:	21 97       	sbiw	r28, 0x01	; 1
    retry=0 ;
    while(!SPI_RW(0xff))
    {
        retry++;
        //如果长时间写入没有完成，报错退出
        if(retry>0xfffe)
    343c:	29 f4       	brne	.+10     	; 0x3448 <SD_WriteSingleBlock+0x9a>
        {
            SD_CS_H;
    343e:	2a 9a       	sbi	0x05, 2	; 5
            return 1 ;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	0c c0       	rjmp	.+24     	; 0x345c <SD_WriteSingleBlock+0xae>
    3444:	cf ef       	ldi	r28, 0xFF	; 255
    3446:	df ef       	ldi	r29, 0xFF	; 255
        return r1 ;
    }
    
    //等待操作完成
    retry=0 ;
    while(!SPI_RW(0xff))
    3448:	8f ef       	ldi	r24, 0xFF	; 255
    344a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    344e:	88 23       	and	r24, r24
    3450:	a1 f3       	breq	.-24     	; 0x343a <SD_WriteSingleBlock+0x8c>
            //写入超时返回1
        }
    }
    
    //写入完成，片选置1
    SD_CS_H;
    3452:	2a 9a       	sbi	0x05, 2	; 5
    SPI_RW(0xff);
    3454:	8f ef       	ldi	r24, 0xFF	; 255
    3456:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    
    return 0 ;
    345a:	80 e0       	ldi	r24, 0x00	; 0
}
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	1f 91       	pop	r17
    3462:	0f 91       	pop	r16
    3464:	ff 90       	pop	r15
    3466:	ef 90       	pop	r14
    3468:	df 90       	pop	r13
    346a:	cf 90       	pop	r12
    346c:	08 95       	ret

0000346e <SD_WaitReady>:
    unsigned char r1 ;
    unsigned char retry ;
    retry=0 ;
    do 
    {
        r1=SPI_RW(0xFF);
    346e:	8f ef       	ldi	r24, 0xFF	; 255
    3470:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
        if(retry==255)//如果卡异常，会死循坏！
        {
            return 1 ;
        }
    }
    while(r1!=0xFF);
    3474:	8f 3f       	cpi	r24, 0xFF	; 255
    3476:	d9 f7       	brne	.-10     	; 0x346e <SD_WaitReady>
    
    return 0 ;
}
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	08 95       	ret

0000347c <SD_WriteMultiBlock>:
* Return         : unsigned char r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
unsigned char SD_WriteMultiBlock(unsigned long sector,const unsigned char*data,unsigned char count)
{
    347c:	8f 92       	push	r8
    347e:	9f 92       	push	r9
    3480:	af 92       	push	r10
    3482:	bf 92       	push	r11
    3484:	df 92       	push	r13
    3486:	ef 92       	push	r14
    3488:	ff 92       	push	r15
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	4b 01       	movw	r8, r22
    3494:	5c 01       	movw	r10, r24
    3496:	7a 01       	movw	r14, r20
    3498:	d2 2e       	mov	r13, r18
    unsigned char r1 ;
    unsigned int i ;
    
    //设置为高速模式
    SPI_High();
    349a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <SPI_High>
    
    //如果不是SDHC，给定的是sector地址，将其转换成byte地址
    if(SD_Type!=SD_TYPE_V2HC)
    349e:	80 91 b8 01 	lds	r24, 0x01B8
    34a2:	84 30       	cpi	r24, 0x04	; 4
    34a4:	59 f0       	breq	.+22     	; 0x34bc <SD_WriteMultiBlock+0x40>
    {
        sector=sector<<9 ;
    34a6:	07 2e       	mov	r0, r23
    34a8:	79 e0       	ldi	r23, 0x09	; 9
    34aa:	88 0c       	add	r8, r8
    34ac:	99 1c       	adc	r9, r9
    34ae:	aa 1c       	adc	r10, r10
    34b0:	bb 1c       	adc	r11, r11
    34b2:	7a 95       	dec	r23
    34b4:	d1 f7       	brne	.-12     	; 0x34aa <SD_WriteMultiBlock+0x2e>
    34b6:	70 2d       	mov	r23, r0
    }
    //如果目标卡不是MMC卡，启用ACMD23指令使能预擦除
    if(SD_Type!=SD_TYPE_MMC)
    34b8:	88 23       	and	r24, r24
    34ba:	41 f0       	breq	.+16     	; 0x34cc <SD_WriteMultiBlock+0x50>
    {
        r1=SD_SendCommand(ACMD23,count,0x00);
    34bc:	4d 2d       	mov	r20, r13
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	70 e0       	ldi	r23, 0x00	; 0
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	87 e1       	ldi	r24, 0x17	; 23
    34c8:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <SD_SendCommand>
    }
    //发多块写入指令
    r1=SD_SendCommand(CMD25,sector,0x00);
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	b5 01       	movw	r22, r10
    34d0:	a4 01       	movw	r20, r8
    34d2:	89 e1       	ldi	r24, 0x19	; 25
    34d4:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <SD_SendCommand>
    if(r1!=0x00)
    34d8:	81 11       	cpse	r24, r1
    34da:	41 c0       	rjmp	.+130    	; 0x355e <SD_WriteMultiBlock+0xe2>
        return r1 ;
        //应答不正确，直接返回
    }
    
    //开始准备数据传输
    SD_CS_L;
    34dc:	2a 98       	cbi	0x05, 2	; 5
    //先放3个空数据，等待SD卡准备好
    SPI_RW(0xff);
    34de:	8f ef       	ldi	r24, 0xFF	; 255
    34e0:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(0xff);
    34e4:	8f ef       	ldi	r24, 0xFF	; 255
    34e6:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    SPI_RW(0xff);
    34ea:	8f ef       	ldi	r24, 0xFF	; 255
    34ec:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    //--------下面是N个sector写入的循环部分
    do 
    {
        //放起始令牌0xFC 表明是多块写入
        SPI_RW(0xFC);
    34f0:	8c ef       	ldi	r24, 0xFC	; 252
    34f2:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    34f6:	e7 01       	movw	r28, r14
    34f8:	8e ef       	ldi	r24, 0xFE	; 254
    34fa:	f8 1a       	sub	r15, r24
    34fc:	87 01       	movw	r16, r14
        
        //放一个sector的数据
        for(i=0;i<512;i++)
        {
            SPI_RW(*data++);
    34fe:	89 91       	ld	r24, Y+
    3500:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    {
        //放起始令牌0xFC 表明是多块写入
        SPI_RW(0xFC);
        
        //放一个sector的数据
        for(i=0;i<512;i++)
    3504:	c0 17       	cp	r28, r16
    3506:	d1 07       	cpc	r29, r17
    3508:	d1 f7       	brne	.-12     	; 0x34fe <SD_WriteMultiBlock+0x82>
        {
            SPI_RW(*data++);
        }
        //发2个Byte的dummy CRC
        SPI_RW(0xff);
    350a:	8f ef       	ldi	r24, 0xFF	; 255
    350c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
        SPI_RW(0xff);
    3510:	8f ef       	ldi	r24, 0xFF	; 255
    3512:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
        
        //等待SD卡应答
        r1=SPI_RW(0xff);
    3516:	8f ef       	ldi	r24, 0xFF	; 255
    3518:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
        if((r1&0x1F)!=0x05)
    351c:	98 2f       	mov	r25, r24
    351e:	9f 71       	andi	r25, 0x1F	; 31
    3520:	95 30       	cpi	r25, 0x05	; 5
    3522:	11 f0       	breq	.+4      	; 0x3528 <SD_WriteMultiBlock+0xac>
        {
            SD_CS_H;
    3524:	2a 9a       	sbi	0x05, 2	; 5
            //如果应答为报错，则带错误代码直接退出
            return r1 ;
    3526:	1b c0       	rjmp	.+54     	; 0x355e <SD_WriteMultiBlock+0xe2>
        }
        
        //等待SD卡写入完成
        if(SD_WaitReady()==1)
    3528:	0e 94 37 1a 	call	0x346e	; 0x346e <SD_WaitReady>
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	11 f4       	brne	.+4      	; 0x3534 <SD_WriteMultiBlock+0xb8>
        {
            SD_CS_H;
    3530:	2a 9a       	sbi	0x05, 2	; 5
            //等待SD卡写入完成超时，直接退出报错
            return 1 ;
    3532:	15 c0       	rjmp	.+42     	; 0x355e <SD_WriteMultiBlock+0xe2>
        }
        
        //本sector数据传输完成
    }
    while(--count);
    3534:	da 94       	dec	r13
    3536:	d1 10       	cpse	r13, r1
    3538:	db cf       	rjmp	.-74     	; 0x34f0 <SD_WriteMultiBlock+0x74>
    
    //发结束传输令牌0xFD
    r1=SPI_RW(0xFD);
    353a:	8d ef       	ldi	r24, 0xFD	; 253
    353c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    if(r1==0x00)
    3540:	81 11       	cpse	r24, r1
    3542:	04 c0       	rjmp	.+8      	; 0x354c <SD_WriteMultiBlock+0xd0>
    {
        count=0xfe ;
    3544:	0f 2e       	mov	r0, r31
    3546:	fe ef       	ldi	r31, 0xFE	; 254
    3548:	df 2e       	mov	r13, r31
    354a:	f0 2d       	mov	r31, r0
    }
    
    if(SD_WaitReady())
    354c:	0e 94 37 1a 	call	0x346e	; 0x346e <SD_WaitReady>
    3550:	81 11       	cpse	r24, r1
    {
        while(1){}
    3552:	ff cf       	rjmp	.-2      	; 0x3552 <SD_WriteMultiBlock+0xd6>
    }
    
    //写入完成，片选置1
    SD_CS_H;
    3554:	2a 9a       	sbi	0x05, 2	; 5
    SPI_RW(0xff);
    3556:	8f ef       	ldi	r24, 0xFF	; 255
    3558:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <SPI_RW>
    
    return count ;
    355c:	8d 2d       	mov	r24, r13
    //返回count值，如果写完则count=0，否则count=1
}
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	ff 90       	pop	r15
    3568:	ef 90       	pop	r14
    356a:	df 90       	pop	r13
    356c:	bf 90       	pop	r11
    356e:	af 90       	pop	r10
    3570:	9f 90       	pop	r9
    3572:	8f 90       	pop	r8
    3574:	08 95       	ret

00003576 <SD_GetCSD>:
*                  0：NO_ERR
*                  1：TIME_OUT
*                  other：错误信息
*******************************************************************************/
unsigned char SD_GetCSD(unsigned char *csd_data)
{
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	8c 01       	movw	r16, r24
    unsigned char r1 ;
    
    //发CMD9命令，读CSD
    r1=SD_SendCommand(CMD9,0,0xFF);
    357e:	2f ef       	ldi	r18, 0xFF	; 255
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	ba 01       	movw	r22, r20
    3586:	89 e0       	ldi	r24, 0x09	; 9
    3588:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <SD_SendCommand>
    358c:	c8 2f       	mov	r28, r24
    if(r1!=0x00)
    358e:	81 11       	cpse	r24, r1
    3590:	06 c0       	rjmp	.+12     	; 0x359e <SD_GetCSD+0x28>
    {
        return r1 ;
        //没返回正确应答，则退出，报错
    }
    //接收16个字节的数据
    SD_ReceiveData(csd_data,16,RELEASE);
    3592:	41 e0       	ldi	r20, 0x01	; 1
    3594:	60 e1       	ldi	r22, 0x10	; 16
    3596:	70 e0       	ldi	r23, 0x00	; 0
    3598:	c8 01       	movw	r24, r16
    359a:	0e 94 32 19 	call	0x3264	; 0x3264 <SD_ReceiveData>
    
    return 0 ;
}
    359e:	8c 2f       	mov	r24, r28
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	0f 91       	pop	r16
    35a6:	08 95       	ret

000035a8 <SD_GetCapacity>:
* Output         : None
* Return         : unsigned long capacity
*                   0： 取容量出错
*******************************************************************************/
unsigned long SD_GetCapacity(void)
{
    35a8:	cf 93       	push	r28
    35aa:	df 93       	push	r29
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	60 97       	sbiw	r28, 0x10	; 16
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    unsigned char r1 ;
    unsigned int i ;
    unsigned int temp ;
    
    //取CSD信息，如果期间出错，返回0
    if(SD_GetCSD(csd)!=0)
    35bc:	ce 01       	movw	r24, r28
    35be:	01 96       	adiw	r24, 0x01	; 1
    35c0:	0e 94 bb 1a 	call	0x3576	; 0x3576 <SD_GetCSD>
    35c4:	81 11       	cpse	r24, r1
    35c6:	65 c0       	rjmp	.+202    	; 0x3692 <SD_GetCapacity+0xea>
    {
        return 0 ;
    }

    //如果为SDHC卡，按照下面方式计算
    if((csd[0]&0xC0)==0x40)
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	80 7c       	andi	r24, 0xC0	; 192
    35cc:	80 34       	cpi	r24, 0x40	; 64
    35ce:	19 f5       	brne	.+70     	; 0x3616 <SD_GetCapacity+0x6e>
    {
        Capacity=((((unsigned long)csd[8])<<8)+(unsigned long)csd[9]+1)*(unsigned long)1024 ;
    35d0:	6a 85       	ldd	r22, Y+10	; 0x0a
    35d2:	86 2f       	mov	r24, r22
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	a0 e0       	ldi	r26, 0x00	; 0
    35d8:	b0 e0       	ldi	r27, 0x00	; 0
    35da:	ac 01       	movw	r20, r24
    35dc:	bd 01       	movw	r22, r26
    35de:	4f 5f       	subi	r20, 0xFF	; 255
    35e0:	5f 4f       	sbci	r21, 0xFF	; 255
    35e2:	6f 4f       	sbci	r22, 0xFF	; 255
    35e4:	7f 4f       	sbci	r23, 0xFF	; 255
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a0 e0       	ldi	r26, 0x00	; 0
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	ba 2f       	mov	r27, r26
    35f0:	a9 2f       	mov	r26, r25
    35f2:	98 2f       	mov	r25, r24
    35f4:	88 27       	eor	r24, r24
    35f6:	84 0f       	add	r24, r20
    35f8:	95 1f       	adc	r25, r21
    35fa:	a6 1f       	adc	r26, r22
    35fc:	b7 1f       	adc	r27, r23
    35fe:	bc 01       	movw	r22, r24
    3600:	cd 01       	movw	r24, r26
    3602:	05 2e       	mov	r0, r21
    3604:	5a e0       	ldi	r21, 0x0A	; 10
    3606:	66 0f       	add	r22, r22
    3608:	77 1f       	adc	r23, r23
    360a:	88 1f       	adc	r24, r24
    360c:	99 1f       	adc	r25, r25
    360e:	5a 95       	dec	r21
    3610:	d1 f7       	brne	.-12     	; 0x3606 <SD_GetCapacity+0x5e>
    3612:	50 2d       	mov	r21, r0
    3614:	41 c0       	rjmp	.+130    	; 0x3698 <SD_GetCapacity+0xf0>
        //
        //               READ_BL_LEN
        //	BLOCK_LEN = 2
        /**********************************************/
        //C_SIZE
        i=csd[6]&0x03 ;
    3616:	4f 81       	ldd	r20, Y+7	; 0x07
    3618:	43 70       	andi	r20, 0x03	; 3
    361a:	50 e0       	ldi	r21, 0x00	; 0
        i<<=8 ;
    361c:	54 2f       	mov	r21, r20
    361e:	44 27       	eor	r20, r20
        i+=csd[7];
    3620:	88 85       	ldd	r24, Y+8	; 0x08
    3622:	48 0f       	add	r20, r24
    3624:	51 1d       	adc	r21, r1
        i<<=2 ;
    3626:	44 0f       	add	r20, r20
    3628:	55 1f       	adc	r21, r21
    362a:	44 0f       	add	r20, r20
    362c:	55 1f       	adc	r21, r21
        i+=((csd[8]&0xc0)>>6);
    362e:	a9 85       	ldd	r26, Y+9	; 0x09
    3630:	a2 95       	swap	r26
    3632:	a6 95       	lsr	r26
    3634:	a6 95       	lsr	r26
    3636:	a3 70       	andi	r26, 0x03	; 3
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	11 96       	adiw	r26, 0x01	; 1
        
        //C_SIZE_MULT
        r1=csd[9]&0x03 ;
    363c:	8a 85       	ldd	r24, Y+10	; 0x0a
    363e:	83 70       	andi	r24, 0x03	; 3
        r1<<=1 ;
    3640:	98 2f       	mov	r25, r24
    3642:	99 0f       	add	r25, r25
        r1+=((csd[10]&0x80)>>7);
    3644:	8b 85       	ldd	r24, Y+11	; 0x0b
    3646:	88 1f       	adc	r24, r24
    3648:	88 27       	eor	r24, r24
    364a:	88 1f       	adc	r24, r24
    364c:	8e 5f       	subi	r24, 0xFE	; 254
        
        //BLOCKNR
        r1+=2 ;
    364e:	89 0f       	add	r24, r25
        temp=1 ;
        while(r1)
    3650:	39 f0       	breq	.+14     	; 0x3660 <SD_GetCapacity+0xb8>
    3652:	21 e0       	ldi	r18, 0x01	; 1
    3654:	30 e0       	ldi	r19, 0x00	; 0
        {
            temp*=2 ;
    3656:	22 0f       	add	r18, r18
    3658:	33 1f       	adc	r19, r19
            r1--;
    365a:	81 50       	subi	r24, 0x01	; 1
        r1+=((csd[10]&0x80)>>7);
        
        //BLOCKNR
        r1+=2 ;
        temp=1 ;
        while(r1)
    365c:	e1 f7       	brne	.-8      	; 0x3656 <SD_GetCapacity+0xae>
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <SD_GetCapacity+0xbc>
        r1<<=1 ;
        r1+=((csd[10]&0x80)>>7);
        
        //BLOCKNR
        r1+=2 ;
        temp=1 ;
    3660:	21 e0       	ldi	r18, 0x01	; 1
    3662:	30 e0       	ldi	r19, 0x00	; 0
        while(r1)
        {
            temp*=2 ;
            r1--;
        }
        Capacity=((unsigned long)(i+1))*((unsigned long)temp);
    3664:	a4 0f       	add	r26, r20
    3666:	b5 1f       	adc	r27, r21
    3668:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__umulhisi3>
    366c:	9b 01       	movw	r18, r22
    366e:	ac 01       	movw	r20, r24
        
        // READ_BL_LEN
        i=csd[5]&0x0f ;
    3670:	8e 81       	ldd	r24, Y+6	; 0x06
    3672:	8f 70       	andi	r24, 0x0F	; 15
    3674:	90 e0       	ldi	r25, 0x00	; 0
        //BLOCK_LEN
        temp=1 ;
        while(i)
    3676:	00 97       	sbiw	r24, 0x00	; 0
    3678:	39 f0       	breq	.+14     	; 0x3688 <SD_GetCapacity+0xe0>
    367a:	a1 e0       	ldi	r26, 0x01	; 1
    367c:	b0 e0       	ldi	r27, 0x00	; 0
        {
            temp*=2 ;
    367e:	aa 0f       	add	r26, r26
    3680:	bb 1f       	adc	r27, r27
            i--;
    3682:	01 97       	sbiw	r24, 0x01	; 1
        
        // READ_BL_LEN
        i=csd[5]&0x0f ;
        //BLOCK_LEN
        temp=1 ;
        while(i)
    3684:	e1 f7       	brne	.-8      	; 0x367e <SD_GetCapacity+0xd6>
    3686:	02 c0       	rjmp	.+4      	; 0x368c <SD_GetCapacity+0xe4>
        Capacity=((unsigned long)(i+1))*((unsigned long)temp);
        
        // READ_BL_LEN
        i=csd[5]&0x0f ;
        //BLOCK_LEN
        temp=1 ;
    3688:	a1 e0       	ldi	r26, 0x01	; 1
    368a:	b0 e0       	ldi	r27, 0x00	; 0
        {
            temp*=2 ;
            i--;
        }
        //The final result
        Capacity*=(unsigned long)temp ;
    368c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <__muluhisi3>
    3690:	03 c0       	rjmp	.+6      	; 0x3698 <SD_GetCapacity+0xf0>
    unsigned int temp ;
    
    //取CSD信息，如果期间出错，返回0
    if(SD_GetCSD(csd)!=0)
    {
        return 0 ;
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	70 e0       	ldi	r23, 0x00	; 0
    3696:	cb 01       	movw	r24, r22
        //The final result
        Capacity*=(unsigned long)temp ;
        //Capacity /= 512;
    }
    return (unsigned long)Capacity ;
}
    3698:	60 96       	adiw	r28, 0x10	; 16
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	08 95       	ret

000036aa <Serial_Init>:

/*
    串口初始化程序    
*/
void Serial_Init(unsigned long BAUD)
{	
    36aa:	9b 01       	movw	r18, r22
    36ac:	ac 01       	movw	r20, r24
	/*    设置波特率    */
	UBRR0L= (unsigned char)((F_CPU/BAUD/16)-1)%256;
    36ae:	60 e4       	ldi	r22, 0x40	; 64
    36b0:	72 e4       	ldi	r23, 0x42	; 66
    36b2:	8f e0       	ldi	r24, 0x0F	; 15
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	0e 94 80 1b 	call	0x3700	; 0x3700 <__udivmodsi4>
    36ba:	21 50       	subi	r18, 0x01	; 1
    36bc:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H= (unsigned char)((F_CPU/BAUD/16)-1)/256;
    36c0:	10 92 c5 00 	sts	0x00C5, r1
	/*    使能接收中断，使能接收器与发送器    */
	UCSR0B=(1<<RXEN0)|(1<<TXEN0);
    36c4:	88 e1       	ldi	r24, 0x18	; 24
    36c6:	80 93 c1 00 	sts	0x00C1, r24
	/*    设置帧格式 ：  8个数据位，1个停止位    */
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);	
    36ca:	86 e0       	ldi	r24, 0x06	; 6
    36cc:	80 93 c2 00 	sts	0x00C2, r24
    36d0:	08 95       	ret

000036d2 <Serial_Send>:
}

void Serial_Send(unsigned char data)
{
	/* 等待发送缓冲器为空 */
	while ( !( UCSR0A & (1<<UDRE0)) )
    36d2:	e0 ec       	ldi	r30, 0xC0	; 192
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	90 81       	ld	r25, Z
    36d8:	95 ff       	sbrs	r25, 5
    36da:	fd cf       	rjmp	.-6      	; 0x36d6 <Serial_Send+0x4>
	;
	/* 将数据放入缓冲器，发送数据 */
	UDR0 = data;
    36dc:	80 93 c6 00 	sts	0x00C6, r24
    36e0:	08 95       	ret

000036e2 <Serial_SendString>:
}

void Serial_SendString(char *s)
{
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	ec 01       	movw	r28, r24
	while(*s)
    36e8:	88 81       	ld	r24, Y
    36ea:	88 23       	and	r24, r24
    36ec:	31 f0       	breq	.+12     	; 0x36fa <Serial_SendString+0x18>
    36ee:	21 96       	adiw	r28, 0x01	; 1
	{
		Serial_Send(*s);
    36f0:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <Serial_Send>
	UDR0 = data;
}

void Serial_SendString(char *s)
{
	while(*s)
    36f4:	89 91       	ld	r24, Y+
    36f6:	81 11       	cpse	r24, r1
    36f8:	fb cf       	rjmp	.-10     	; 0x36f0 <Serial_SendString+0xe>
	{
		Serial_Send(*s);
		s++;
	}
    36fa:	df 91       	pop	r29
    36fc:	cf 91       	pop	r28
    36fe:	08 95       	ret

00003700 <__udivmodsi4>:
    3700:	a1 e2       	ldi	r26, 0x21	; 33
    3702:	1a 2e       	mov	r1, r26
    3704:	aa 1b       	sub	r26, r26
    3706:	bb 1b       	sub	r27, r27
    3708:	fd 01       	movw	r30, r26
    370a:	0d c0       	rjmp	.+26     	; 0x3726 <__udivmodsi4_ep>

0000370c <__udivmodsi4_loop>:
    370c:	aa 1f       	adc	r26, r26
    370e:	bb 1f       	adc	r27, r27
    3710:	ee 1f       	adc	r30, r30
    3712:	ff 1f       	adc	r31, r31
    3714:	a2 17       	cp	r26, r18
    3716:	b3 07       	cpc	r27, r19
    3718:	e4 07       	cpc	r30, r20
    371a:	f5 07       	cpc	r31, r21
    371c:	20 f0       	brcs	.+8      	; 0x3726 <__udivmodsi4_ep>
    371e:	a2 1b       	sub	r26, r18
    3720:	b3 0b       	sbc	r27, r19
    3722:	e4 0b       	sbc	r30, r20
    3724:	f5 0b       	sbc	r31, r21

00003726 <__udivmodsi4_ep>:
    3726:	66 1f       	adc	r22, r22
    3728:	77 1f       	adc	r23, r23
    372a:	88 1f       	adc	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	1a 94       	dec	r1
    3730:	69 f7       	brne	.-38     	; 0x370c <__udivmodsi4_loop>
    3732:	60 95       	com	r22
    3734:	70 95       	com	r23
    3736:	80 95       	com	r24
    3738:	90 95       	com	r25
    373a:	9b 01       	movw	r18, r22
    373c:	ac 01       	movw	r20, r24
    373e:	bd 01       	movw	r22, r26
    3740:	cf 01       	movw	r24, r30
    3742:	08 95       	ret

00003744 <__umulhisi3>:
    3744:	a2 9f       	mul	r26, r18
    3746:	b0 01       	movw	r22, r0
    3748:	b3 9f       	mul	r27, r19
    374a:	c0 01       	movw	r24, r0
    374c:	a3 9f       	mul	r26, r19
    374e:	70 0d       	add	r23, r0
    3750:	81 1d       	adc	r24, r1
    3752:	11 24       	eor	r1, r1
    3754:	91 1d       	adc	r25, r1
    3756:	b2 9f       	mul	r27, r18
    3758:	70 0d       	add	r23, r0
    375a:	81 1d       	adc	r24, r1
    375c:	11 24       	eor	r1, r1
    375e:	91 1d       	adc	r25, r1
    3760:	08 95       	ret

00003762 <__muluhisi3>:
    3762:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__umulhisi3>
    3766:	a5 9f       	mul	r26, r21
    3768:	90 0d       	add	r25, r0
    376a:	b4 9f       	mul	r27, r20
    376c:	90 0d       	add	r25, r0
    376e:	a4 9f       	mul	r26, r20
    3770:	80 0d       	add	r24, r0
    3772:	91 1d       	adc	r25, r1
    3774:	11 24       	eor	r1, r1
    3776:	08 95       	ret

00003778 <_exit>:
    3778:	f8 94       	cli

0000377a <__stop_program>:
    377a:	ff cf       	rjmp	.-2      	; 0x377a <__stop_program>
