
SD with mega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  0000342e  000034c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000342e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  008001aa  008001aa  0000356c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000359c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000035dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056aa  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b23  00000000  00000000  00008f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014e0  00000000  00000000  00009aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f60  00000000  00000000  0000af8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000988  00000000  00000000  0000beec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007346  00000000  00000000  0000c874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00013bba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e2       	ldi	r30, 0x2E	; 46
      7c:	f4 e3       	ldi	r31, 0x34	; 52
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3a       	cpi	r26, 0xAA	; 170
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	aa ea       	ldi	r26, 0xAA	; 170
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3e       	cpi	r26, 0xE1	; 225
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <main>
      9e:	0c 94 15 1a 	jmp	0x342a	; 0x342a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <disk_initialize>:
unsigned char disk_initialize(unsigned char drv)

{
	unsigned char state;

	if(drv)
      a6:	81 11       	cpse	r24, r1
      a8:	0c c0       	rjmp	.+24     	; 0xc2 <disk_initialize+0x1c>
	{
		 return STA_NOINIT;  //仅支持磁盘0的操作
	}

	state = SD_Init();      //SD卡的初始化
      aa:	0e 94 02 17 	call	0x2e04	; 0x2e04 <SD_Init>
	 
	 
	
	if(state == STA_NODISK)
      ae:	82 30       	cpi	r24, 0x02	; 2
      b0:	51 f0       	breq	.+20     	; 0xc6 <disk_initialize+0x20>
    {
        return STA_NODISK;
    }
    else if(state != 0)
      b2:	88 23       	and	r24, r24
      b4:	51 f0       	breq	.+20     	; 0xca <disk_initialize+0x24>
    {
	
		Serial_SendString("InitializeFail\r\n");
      b6:	8a e2       	ldi	r24, 0x2A	; 42
      b8:	91 e0       	ldi	r25, 0x01	; 1
      ba:	0e 94 ca 19 	call	0x3394	; 0x3394 <Serial_SendString>
        return STA_NOINIT;  //其他错误：初始化失败
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	08 95       	ret
{
	unsigned char state;

	if(drv)
	{
		 return STA_NOINIT;  //仅支持磁盘0的操作
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	08 95       	ret
	 
	 
	
	if(state == STA_NODISK)
    {
        return STA_NODISK;
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	08 95       	ret
    }
    else
    {
	
		//Serial_SendString("InitializeSuccess\r\n");
        return 0;           //初始化成功
      ca:	80 e0       	ldi	r24, 0x00	; 0
    }


	
}
      cc:	08 95       	ret

000000ce <disk_status>:
//Get disk status
DSTATUS disk_status (               
	BYTE drv		/* Physical drive nmuber (0..) */
)
{
    if(drv)
      ce:	91 e0       	ldi	r25, 0x01	; 1
      d0:	81 11       	cpse	r24, r1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <disk_status+0x8>
      d4:	90 e0       	ldi	r25, 0x00	; 0
    if(!SD_DET())
    {
        return STA_NODISK;
    }
    return 0;
}
      d6:	89 2f       	mov	r24, r25
      d8:	08 95       	ret

000000da <disk_read>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	0f 93       	push	r16
      e4:	69 01       	movw	r12, r18
      e6:	7a 01       	movw	r14, r20
	unsigned char res=0;
	//count=count;      //不知为何,count会被优化为0,故加上这条语句
	//sector=sector;
    if ((drv) || (!count))
      e8:	81 11       	cpse	r24, r1
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <disk_read+0x16>
      ec:	01 11       	cpse	r16, r1
      ee:	05 c0       	rjmp	.+10     	; 0xfa <disk_read+0x20>
    {    
		Serial_Send(5+0x30);
      f0:	85 e3       	ldi	r24, 0x35	; 53
      f2:	0e 94 c2 19 	call	0x3384	; 0x3384 <Serial_Send>
        return RES_PARERR;  //仅支持单磁盘操作，count不能等于0，否则返回参数错误
      f6:	84 e0       	ldi	r24, 0x04	; 4
      f8:	14 c0       	rjmp	.+40     	; 0x122 <disk_read+0x48>
        return RES_NOTRDY;  //没有检测到SD卡，报NOT READY错误
    }

    
	
    if(count==1)            //1个sector的读操作      
      fa:	01 30       	cpi	r16, 0x01	; 1
      fc:	39 f4       	brne	.+14     	; 0x10c <disk_read+0x32>
    {                                                
        res = SD_ReadSingleBlock(sector, buff);      
      fe:	ab 01       	movw	r20, r22
     100:	c7 01       	movw	r24, r14
     102:	b6 01       	movw	r22, r12
     104:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <SD_ReadSingleBlock>
     108:	98 2f       	mov	r25, r24
     10a:	07 c0       	rjmp	.+14     	; 0x11a <disk_read+0x40>
    }                                                
    else                    //多个sector的读操作     
    {                                                
        res = SD_ReadMultiBlock(sector, buff, count);
     10c:	20 2f       	mov	r18, r16
     10e:	ab 01       	movw	r20, r22
     110:	c7 01       	movw	r24, r14
     112:	b6 01       	movw	r22, r12
     114:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <SD_ReadMultiBlock>
     118:	98 2f       	mov	r25, r24
        }                                      
        buff+=512;                             
    }while(--count);                                         
    */
    //处理返回值，将SPI_SD_driver.c的返回值转成ff.c的返回值
    if(res == 0x00)
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	91 11       	cpse	r25, r1
     11e:	01 c0       	rjmp	.+2      	; 0x122 <disk_read+0x48>
     120:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return RES_ERROR;
    }
}
     122:	0f 91       	pop	r16
     124:	ff 90       	pop	r15
     126:	ef 90       	pop	r14
     128:	df 90       	pop	r13
     12a:	cf 90       	pop	r12
     12c:	08 95       	ret

0000012e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	        /* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
     12e:	0f 93       	push	r16
     130:	fb 01       	movw	r30, r22
	unsigned char res;
//	count = 1;
//	sector = 2;

    if (drv || !count)
     132:	81 11       	cpse	r24, r1
     134:	14 c0       	rjmp	.+40     	; 0x15e <disk_write+0x30>
     136:	00 23       	and	r16, r16
     138:	a1 f0       	breq	.+40     	; 0x162 <disk_write+0x34>
     13a:	ca 01       	movw	r24, r20
     13c:	b9 01       	movw	r22, r18
     13e:	af 01       	movw	r20, r30
        return RES_NOTRDY;  //没有检测到SD卡，报NOT READY错误
    }


    // 读写操作
    if(count == 1)
     140:	01 30       	cpi	r16, 0x01	; 1
     142:	21 f4       	brne	.+8      	; 0x14c <disk_write+0x1e>
    {
        res = SD_WriteSingleBlock(sector, buff);
     144:	0e 94 30 18 	call	0x3060	; 0x3060 <SD_WriteSingleBlock>
     148:	98 2f       	mov	r25, r24
     14a:	04 c0       	rjmp	.+8      	; 0x154 <disk_write+0x26>
    }
    else
    {
        res = SD_WriteMultiBlock(sector, buff, count);
     14c:	20 2f       	mov	r18, r16
     14e:	0e 94 97 18 	call	0x312e	; 0x312e <SD_WriteMultiBlock>
     152:	98 2f       	mov	r25, r24
    }
    // 返回值转换
    if(res == 0)
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	91 11       	cpse	r25, r1
     158:	05 c0       	rjmp	.+10     	; 0x164 <disk_write+0x36>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	03 c0       	rjmp	.+6      	; 0x164 <disk_write+0x36>
//	count = 1;
//	sector = 2;

    if (drv || !count)
    {    
        return RES_PARERR;  //仅支持单磁盘操作，count不能等于0，否则返回参数错误
     15e:	84 e0       	ldi	r24, 0x04	; 4
     160:	01 c0       	rjmp	.+2      	; 0x164 <disk_write+0x36>
     162:	84 e0       	ldi	r24, 0x04	; 4
    }
    else
    {
        return RES_ERROR;
    }
}
     164:	0f 91       	pop	r16
     166:	08 95       	ret

00000168 <disk_ioctl>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)

{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
    DRESULT res;


    if (drv)
     16c:	81 11       	cpse	r24, r1
     16e:	1e c0       	rjmp	.+60     	; 0x1ac <disk_ioctl+0x44>
     170:	ea 01       	movw	r28, r20
    {    
        return RES_PARERR;  //仅支持单磁盘操作，否则返回参数错误
    }
    
    //FATFS目前版本仅需处理CTRL_SYNC，GET_SECTOR_COUNT，GET_BLOCK_SIZ三个命令
    switch(ctrl)
     172:	61 30       	cpi	r22, 0x01	; 1
     174:	99 f0       	breq	.+38     	; 0x19c <disk_ioctl+0x34>
     176:	18 f0       	brcs	.+6      	; 0x17e <disk_ioctl+0x16>
     178:	64 30       	cpi	r22, 0x04	; 4
     17a:	d0 f4       	brcc	.+52     	; 0x1b0 <disk_ioctl+0x48>
     17c:	09 c0       	rjmp	.+18     	; 0x190 <disk_ioctl+0x28>
    {
    case CTRL_SYNC:
        SD_CS_L;
     17e:	2a 98       	cbi	0x05, 2	; 5
        if(SD_WaitReady()==0)
     180:	0e 94 90 18 	call	0x3120	; 0x3120 <SD_WaitReady>
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	81 11       	cpse	r24, r1
     188:	01 c0       	rjmp	.+2      	; 0x18c <disk_ioctl+0x24>
     18a:	90 e0       	ldi	r25, 0x00	; 0
        }
        else
        {
            res = RES_ERROR;
        }
        SD_CS_H;
     18c:	2a 9a       	sbi	0x05, 2	; 5
        break;
     18e:	11 c0       	rjmp	.+34     	; 0x1b2 <disk_ioctl+0x4a>
        
    case GET_BLOCK_SIZE:
    case GET_SECTOR_SIZE:
        *(WORD*)buff = 512;
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	92 e0       	ldi	r25, 0x02	; 2
     194:	99 83       	std	Y+1, r25	; 0x01
     196:	88 83       	st	Y, r24
        res = RES_OK;
     198:	90 e0       	ldi	r25, 0x00	; 0
        break;
     19a:	0b c0       	rjmp	.+22     	; 0x1b2 <disk_ioctl+0x4a>

    case GET_SECTOR_COUNT:
        *(DWORD*)buff = SD_GetCapacity();
     19c:	0e 94 2d 19 	call	0x325a	; 0x325a <SD_GetCapacity>
     1a0:	68 83       	st	Y, r22
     1a2:	79 83       	std	Y+1, r23	; 0x01
     1a4:	8a 83       	std	Y+2, r24	; 0x02
     1a6:	9b 83       	std	Y+3, r25	; 0x03
        res = RES_OK;
     1a8:	90 e0       	ldi	r25, 0x00	; 0
        break;
     1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <disk_ioctl+0x4a>
    DRESULT res;


    if (drv)
    {    
        return RES_PARERR;  //仅支持单磁盘操作，否则返回参数错误
     1ac:	94 e0       	ldi	r25, 0x04	; 4
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <disk_ioctl+0x4a>
    case GET_SECTOR_COUNT:
        *(DWORD*)buff = SD_GetCapacity();
        res = RES_OK;
        break;
    default:
        res = RES_PARERR;
     1b0:	94 e0       	ldi	r25, 0x04	; 4
        break;
    }

    return res;
}
     1b2:	89 2f       	mov	r24, r25
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <get_fattime>:
	date=date<<5;
	date+=t.tm_sec;
	date=1950466004;
*/
    return 1950466005;
}
     1ba:	65 ed       	ldi	r22, 0xD5	; 213
     1bc:	7f eb       	ldi	r23, 0xBF	; 191
     1be:	81 e4       	ldi	r24, 0x41	; 65
     1c0:	94 e7       	ldi	r25, 0x74	; 116
     1c2:	08 95       	ret

000001c4 <mem_cpy>:
			sect += fp->csect;
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Read maximum contiguous sectors directly */
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - fp->csect;
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
     1c4:	41 15       	cp	r20, r1
     1c6:	51 05       	cpc	r21, r1
     1c8:	51 f0       	breq	.+20     	; 0x1de <mem_cpy+0x1a>
     1ca:	a6 2f       	mov	r26, r22
     1cc:	b7 2f       	mov	r27, r23
     1ce:	fc 01       	movw	r30, r24
     1d0:	48 0f       	add	r20, r24
     1d2:	59 1f       	adc	r21, r25
     1d4:	9d 91       	ld	r25, X+
     1d6:	91 93       	st	Z+, r25
					ABORT(fp->fs, FR_DISK_ERR);
     1d8:	e4 17       	cp	r30, r20
     1da:	f5 07       	cpc	r31, r21
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <mem_cpy+0x10>
     1de:	08 95       	ret

000001e0 <get_fileinfo>:
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	8b 01       	movw	r16, r22
     1f2:	fb 01       	movw	r30, r22
     1f4:	39 96       	adiw	r30, 0x09	; 9
     1f6:	dc 01       	movw	r26, r24
     1f8:	1e 96       	adiw	r26, 0x0e	; 14
     1fa:	4d 91       	ld	r20, X+
     1fc:	5d 91       	ld	r21, X+
     1fe:	6d 91       	ld	r22, X+
     200:	7c 91       	ld	r23, X
     202:	51 97       	sbiw	r26, 0x11	; 17
     204:	45 2b       	or	r20, r21
     206:	46 2b       	or	r20, r22
     208:	47 2b       	or	r20, r23
     20a:	09 f4       	brne	.+2      	; 0x20e <get_fileinfo+0x2e>
     20c:	75 c0       	rjmp	.+234    	; 0x2f8 <get_fileinfo+0x118>
     20e:	52 96       	adiw	r26, 0x12	; 18
     210:	0d 90       	ld	r0, X+
     212:	bc 91       	ld	r27, X
     214:	a0 2d       	mov	r26, r0
     216:	8c 91       	ld	r24, X
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
     218:	80 32       	cpi	r24, 0x20	; 32
     21a:	c1 f0       	breq	.+48     	; 0x24c <get_fileinfo+0x6c>
     21c:	9d 01       	movw	r18, r26
     21e:	2f 5f       	subi	r18, 0xFF	; 255
     220:	3f 4f       	sbci	r19, 0xFF	; 255
     222:	a8 01       	movw	r20, r16
     224:	4f 5e       	subi	r20, 0xEF	; 239
     226:	5f 4f       	sbci	r21, 0xFF	; 255
     228:	95 ee       	ldi	r25, 0xE5	; 229
     22a:	05 c0       	rjmp	.+10     	; 0x236 <get_fileinfo+0x56>
     22c:	e9 01       	movw	r28, r18
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
     22e:	89 91       	ld	r24, Y+
     230:	9e 01       	movw	r18, r28
     232:	80 32       	cpi	r24, 0x20	; 32
     234:	69 f0       	breq	.+26     	; 0x250 <get_fileinfo+0x70>
     236:	85 30       	cpi	r24, 0x05	; 5
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
     238:	09 f4       	brne	.+2      	; 0x23c <get_fileinfo+0x5c>
     23a:	89 2f       	mov	r24, r25
     23c:	31 96       	adiw	r30, 0x01	; 1
				continue;
     23e:	ef 01       	movw	r28, r30
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
     240:	21 97       	sbiw	r28, 0x01	; 1
     242:	88 83       	st	Y, r24
     244:	e4 17       	cp	r30, r20
     246:	f5 07       	cpc	r31, r21
     248:	89 f7       	brne	.-30     	; 0x22c <get_fileinfo+0x4c>
     24a:	03 c0       	rjmp	.+6      	; 0x252 <get_fileinfo+0x72>
     24c:	af 01       	movw	r20, r30
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
     24e:	01 c0       	rjmp	.+2      	; 0x252 <get_fileinfo+0x72>
     250:	af 01       	movw	r20, r30
     252:	18 96       	adiw	r26, 0x08	; 8
     254:	8c 91       	ld	r24, X
     256:	18 97       	sbiw	r26, 0x08	; 8
     258:	80 32       	cpi	r24, 0x20	; 32
     25a:	81 f0       	breq	.+32     	; 0x27c <get_fileinfo+0x9c>
     25c:	8e e2       	ldi	r24, 0x2E	; 46
     25e:	fa 01       	movw	r30, r20
     260:	80 83       	st	Z, r24
     262:	18 96       	adiw	r26, 0x08	; 8
     264:	8c 91       	ld	r24, X
     266:	18 97       	sbiw	r26, 0x08	; 8
     268:	80 32       	cpi	r24, 0x20	; 32
     26a:	09 f0       	breq	.+2      	; 0x26e <get_fileinfo+0x8e>
					ABORT(fp->fs, FR_DISK_ERR);
     26c:	47 c0       	rjmp	.+142    	; 0x2fc <get_fileinfo+0x11c>
     26e:	31 96       	adiw	r30, 0x01	; 1
     270:	06 c0       	rjmp	.+12     	; 0x27e <get_fileinfo+0x9e>
     272:	fa 01       	movw	r30, r20
     274:	34 96       	adiw	r30, 0x04	; 4
     276:	ea 01       	movw	r28, r20
     278:	8b 83       	std	Y+3, r24	; 0x03
     27a:	01 c0       	rjmp	.+2      	; 0x27e <get_fileinfo+0x9e>
     27c:	fa 01       	movw	r30, r20
     27e:	1b 96       	adiw	r26, 0x0b	; 11
				fp->flag &= ~FA__DIRTY;
     280:	8c 91       	ld	r24, X
     282:	1b 97       	sbiw	r26, 0x0b	; 11
     284:	e8 01       	movw	r28, r16
     286:	88 87       	std	Y+8, r24	; 0x08
     288:	5f 96       	adiw	r26, 0x1f	; 31
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
     28a:	8c 91       	ld	r24, X
     28c:	5f 97       	sbiw	r26, 0x1f	; 31
     28e:	5e 96       	adiw	r26, 0x1e	; 30
     290:	4c 91       	ld	r20, X
     292:	5e 97       	sbiw	r26, 0x1e	; 30
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	ba 01       	movw	r22, r20
     29c:	55 27       	eor	r21, r21
     29e:	44 27       	eor	r20, r20
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
     2a0:	78 2b       	or	r23, r24
     2a2:	5c 96       	adiw	r26, 0x1c	; 28
     2a4:	8c 91       	ld	r24, X
     2a6:	5c 97       	sbiw	r26, 0x1c	; 28
     2a8:	48 2b       	or	r20, r24
     2aa:	5d 96       	adiw	r26, 0x1d	; 29
     2ac:	cc 90       	ld	r12, X
     2ae:	5d 97       	sbiw	r26, 0x1d	; 29
     2b0:	d1 2c       	mov	r13, r1
     2b2:	dc 2c       	mov	r13, r12
     2b4:	cc 24       	eor	r12, r12
     2b6:	e1 2c       	mov	r14, r1
     2b8:	f1 2c       	mov	r15, r1
					ABORT(fp->fs, FR_DISK_ERR);
     2ba:	4c 29       	or	r20, r12
     2bc:	5d 29       	or	r21, r13
     2be:	6e 29       	or	r22, r14
     2c0:	7f 29       	or	r23, r15
     2c2:	48 83       	st	Y, r20
     2c4:	59 83       	std	Y+1, r21	; 0x01
     2c6:	6a 83       	std	Y+2, r22	; 0x02
     2c8:	7b 83       	std	Y+3, r23	; 0x03
     2ca:	59 96       	adiw	r26, 0x19	; 25
     2cc:	8c 91       	ld	r24, X
			}
#endif
			fp->dsect = sect;
     2ce:	59 97       	sbiw	r26, 0x19	; 25
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	98 2f       	mov	r25, r24
     2d4:	88 27       	eor	r24, r24
     2d6:	58 96       	adiw	r26, 0x18	; 24
     2d8:	2c 91       	ld	r18, X
			fp->csect++;							/* Next sector address in the cluster */
     2da:	58 97       	sbiw	r26, 0x18	; 24
     2dc:	82 2b       	or	r24, r18
     2de:	9d 83       	std	Y+5, r25	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
     2e0:	8c 83       	std	Y+4, r24	; 0x04
     2e2:	57 96       	adiw	r26, 0x17	; 23
     2e4:	8c 91       	ld	r24, X
     2e6:	57 97       	sbiw	r26, 0x17	; 23
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	98 2f       	mov	r25, r24
     2ec:	88 27       	eor	r24, r24
     2ee:	56 96       	adiw	r26, 0x16	; 22
     2f0:	2c 91       	ld	r18, X
     2f2:	82 2b       	or	r24, r18
     2f4:	9f 83       	std	Y+7, r25	; 0x07
     2f6:	8e 83       	std	Y+6, r24	; 0x06
     2f8:	10 82       	st	Z, r1
     2fa:	13 c0       	rjmp	.+38     	; 0x322 <get_fileinfo+0x142>
     2fc:	fa 01       	movw	r30, r20
     2fe:	32 96       	adiw	r30, 0x02	; 2
     300:	ea 01       	movw	r28, r20
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
     302:	89 83       	std	Y+1, r24	; 0x01
     304:	19 96       	adiw	r26, 0x09	; 9
     306:	8c 91       	ld	r24, X
     308:	19 97       	sbiw	r26, 0x09	; 9
     30a:	80 32       	cpi	r24, 0x20	; 32
     30c:	09 f4       	brne	.+2      	; 0x310 <get_fileinfo+0x130>
     30e:	b7 cf       	rjmp	.-146    	; 0x27e <get_fileinfo+0x9e>
     310:	31 96       	adiw	r30, 0x01	; 1
     312:	8a 83       	std	Y+2, r24	; 0x02
     314:	1a 96       	adiw	r26, 0x0a	; 10
     316:	8c 91       	ld	r24, X
     318:	1a 97       	sbiw	r26, 0x0a	; 10
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
     31a:	80 32       	cpi	r24, 0x20	; 32
     31c:	09 f0       	breq	.+2      	; 0x320 <get_fileinfo+0x140>
     31e:	a9 cf       	rjmp	.-174    	; 0x272 <get_fileinfo+0x92>
     320:	ae cf       	rjmp	.-164    	; 0x27e <get_fileinfo+0x9e>
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	df 90       	pop	r13
     330:	cf 90       	pop	r12
     332:	08 95       	ret

00000334 <move_window>:
     334:	4f 92       	push	r4
     336:	5f 92       	push	r5
     338:	6f 92       	push	r6
     33a:	7f 92       	push	r7
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
     34e:	df 93       	push	r29
     350:	fc 01       	movw	r30, r24
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
     352:	c2 a4       	ldd	r12, Z+42	; 0x2a
     354:	d3 a4       	ldd	r13, Z+43	; 0x2b
	*br = 0;	/* Initialize bytes read */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
     356:	e4 a4       	ldd	r14, Z+44	; 0x2c
     358:	f5 a4       	ldd	r15, Z+45	; 0x2d
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
     35a:	c4 16       	cp	r12, r20
     35c:	d5 06       	cpc	r13, r21
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
     35e:	e6 06       	cpc	r14, r22
}
     360:	f7 06       	cpc	r15, r23
     362:	09 f4       	brne	.+2      	; 0x366 <move_window+0x32>
     364:	4f c0       	rjmp	.+158    	; 0x404 <move_window+0xd0>
     366:	2a 01       	movw	r4, r20
     368:	3b 01       	movw	r6, r22
     36a:	ec 01       	movw	r28, r24
     36c:	84 81       	ldd	r24, Z+4	; 0x04
     36e:	88 23       	and	r24, r24
     370:	a1 f1       	breq	.+104    	; 0x3da <move_window+0xa6>
     372:	5f 01       	movw	r10, r30
     374:	fe e2       	ldi	r31, 0x2E	; 46
     376:	af 0e       	add	r10, r31
     378:	b1 1c       	adc	r11, r1
     37a:	01 e0       	ldi	r16, 0x01	; 1
     37c:	a7 01       	movw	r20, r14
     37e:	96 01       	movw	r18, r12
     380:	b5 01       	movw	r22, r10
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	0e 94 97 00 	call	0x12e	; 0x12e <disk_write>
     388:	81 11       	cpse	r24, r1
     38a:	3e c0       	rjmp	.+124    	; 0x408 <move_window+0xd4>
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
     38c:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
     38e:	4e 89       	ldd	r20, Y+22	; 0x16
     390:	5f 89       	ldd	r21, Y+23	; 0x17
     392:	68 8d       	ldd	r22, Y+24	; 0x18
     394:	79 8d       	ldd	r23, Y+25	; 0x19
     396:	8e 8d       	ldd	r24, Y+30	; 0x1e
     398:	9f 8d       	ldd	r25, Y+31	; 0x1f
     39a:	a8 a1       	ldd	r26, Y+32	; 0x20
     39c:	b9 a1       	ldd	r27, Y+33	; 0x21
     39e:	84 0f       	add	r24, r20
     3a0:	95 1f       	adc	r25, r21
     3a2:	a6 1f       	adc	r26, r22
     3a4:	b7 1f       	adc	r27, r23
     3a6:	c8 16       	cp	r12, r24
     3a8:	d9 06       	cpc	r13, r25
     3aa:	ea 06       	cpc	r14, r26
     3ac:	fb 06       	cpc	r15, r27
     3ae:	a8 f4       	brcc	.+42     	; 0x3da <move_window+0xa6>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     3b0:	1b 81       	ldd	r17, Y+3	; 0x03
     3b2:	12 30       	cpi	r17, 0x02	; 2
     3b4:	90 f0       	brcs	.+36     	; 0x3da <move_window+0xa6>
					wsect += fs->sects_fat;
     3b6:	8e 89       	ldd	r24, Y+22	; 0x16
     3b8:	9f 89       	ldd	r25, Y+23	; 0x17
     3ba:	a8 8d       	ldd	r26, Y+24	; 0x18
     3bc:	b9 8d       	ldd	r27, Y+25	; 0x19
     3be:	c8 0e       	add	r12, r24
     3c0:	d9 1e       	adc	r13, r25
     3c2:	ea 1e       	adc	r14, r26
     3c4:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
     3c6:	01 e0       	ldi	r16, 0x01	; 1
     3c8:	a7 01       	movw	r20, r14
     3ca:	96 01       	movw	r18, r12
     3cc:	b5 01       	movw	r22, r10
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	0e 94 97 00 	call	0x12e	; 0x12e <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     3d4:	11 50       	subi	r17, 0x01	; 1
     3d6:	11 30       	cpi	r17, 0x01	; 1
     3d8:	71 f7       	brne	.-36     	; 0x3b6 <move_window+0x82>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     3da:	41 14       	cp	r4, r1
     3dc:	51 04       	cpc	r5, r1
     3de:	61 04       	cpc	r6, r1
     3e0:	71 04       	cpc	r7, r1
     3e2:	a1 f0       	breq	.+40     	; 0x40c <move_window+0xd8>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
     3e4:	01 e0       	ldi	r16, 0x01	; 1
     3e6:	a3 01       	movw	r20, r6
     3e8:	92 01       	movw	r18, r4
     3ea:	be 01       	movw	r22, r28
     3ec:	62 5d       	subi	r22, 0xD2	; 210
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	0e 94 6d 00 	call	0xda	; 0xda <disk_read>
     3f6:	81 11       	cpse	r24, r1
     3f8:	0b c0       	rjmp	.+22     	; 0x410 <move_window+0xdc>
				return FR_DISK_ERR;
			fs->winsect = sector;
     3fa:	4a a6       	std	Y+42, r4	; 0x2a
     3fc:	5b a6       	std	Y+43, r5	; 0x2b
     3fe:	6c a6       	std	Y+44, r6	; 0x2c
     400:	7d a6       	std	Y+45, r7	; 0x2d
     402:	07 c0       	rjmp	.+14     	; 0x412 <move_window+0xde>
		}
	}

	return FR_OK;
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	05 c0       	rjmp	.+10     	; 0x412 <move_window+0xde>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	03 c0       	rjmp	.+6      	; 0x412 <move_window+0xde>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	01 c0       	rjmp	.+2      	; 0x412 <move_window+0xde>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
     410:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	7f 90       	pop	r7
     428:	6f 90       	pop	r6
     42a:	5f 90       	pop	r5
     42c:	4f 90       	pop	r4
     42e:	08 95       	ret

00000430 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     430:	0f 93       	push	r16
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	ec 01       	movw	r28, r24
     438:	9a 01       	movw	r18, r20
     43a:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     43c:	bc 01       	movw	r22, r24
     43e:	62 5d       	subi	r22, 0xD2	; 210
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	01 e0       	ldi	r16, 0x01	; 1
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	0e 94 6d 00 	call	0xda	; 0xda <disk_read>
     44a:	81 11       	cpse	r24, r1
     44c:	51 c0       	rjmp	.+162    	; 0x4f0 <check_fs+0xc0>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     44e:	fe 01       	movw	r30, r28
     450:	e3 5d       	subi	r30, 0xD3	; 211
     452:	fd 4f       	sbci	r31, 0xFD	; 253
     454:	80 81       	ld	r24, Z
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	98 2f       	mov	r25, r24
     45a:	88 27       	eor	r24, r24
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	20 81       	ld	r18, Z
     460:	82 2b       	or	r24, r18
     462:	85 35       	cpi	r24, 0x55	; 85
     464:	9a 4a       	sbci	r25, 0xAA	; 170
     466:	09 f0       	breq	.+2      	; 0x46a <check_fs+0x3a>
     468:	45 c0       	rjmp	.+138    	; 0x4f4 <check_fs+0xc4>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     46a:	e5 5c       	subi	r30, 0xC5	; 197
     46c:	f1 40       	sbci	r31, 0x01	; 1
     46e:	20 81       	ld	r18, Z
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	80 81       	ld	r24, Z
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	a0 e0       	ldi	r26, 0x00	; 0
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	dc 01       	movw	r26, r24
     47c:	99 27       	eor	r25, r25
     47e:	88 27       	eor	r24, r24
     480:	b2 2b       	or	r27, r18
     482:	32 97       	sbiw	r30, 0x02	; 2
     484:	20 81       	ld	r18, Z
     486:	82 2b       	or	r24, r18
     488:	31 96       	adiw	r30, 0x01	; 1
     48a:	40 81       	ld	r20, Z
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	54 2f       	mov	r21, r20
     490:	44 27       	eor	r20, r20
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	84 2b       	or	r24, r20
     498:	95 2b       	or	r25, r21
     49a:	a6 2b       	or	r26, r22
     49c:	b7 2b       	or	r27, r23
     49e:	bb 27       	eor	r27, r27
     4a0:	86 34       	cpi	r24, 0x46	; 70
     4a2:	91 44       	sbci	r25, 0x41	; 65
     4a4:	a4 45       	sbci	r26, 0x54	; 84
     4a6:	b1 05       	cpc	r27, r1
     4a8:	39 f1       	breq	.+78     	; 0x4f8 <check_fs+0xc8>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     4aa:	7e 96       	adiw	r30, 0x1e	; 30
     4ac:	80 81       	ld	r24, Z
     4ae:	31 97       	sbiw	r30, 0x01	; 1
     4b0:	40 81       	ld	r20, Z
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	ba 01       	movw	r22, r20
     4ba:	55 27       	eor	r21, r21
     4bc:	44 27       	eor	r20, r20
     4be:	78 2b       	or	r23, r24
     4c0:	32 97       	sbiw	r30, 0x02	; 2
     4c2:	80 81       	ld	r24, Z
     4c4:	48 2b       	or	r20, r24
     4c6:	cf 57       	subi	r28, 0x7F	; 127
     4c8:	df 4f       	sbci	r29, 0xFF	; 255
     4ca:	88 81       	ld	r24, Y
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	98 2f       	mov	r25, r24
     4d0:	88 27       	eor	r24, r24
     4d2:	a0 e0       	ldi	r26, 0x00	; 0
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	48 2b       	or	r20, r24
     4d8:	59 2b       	or	r21, r25
     4da:	6a 2b       	or	r22, r26
     4dc:	7b 2b       	or	r23, r27
     4de:	77 27       	eor	r23, r23
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	46 34       	cpi	r20, 0x46	; 70
     4e4:	51 44       	sbci	r21, 0x41	; 65
     4e6:	64 45       	sbci	r22, 0x54	; 84
     4e8:	71 05       	cpc	r23, r1
     4ea:	39 f4       	brne	.+14     	; 0x4fa <check_fs+0xca>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	05 c0       	rjmp	.+10     	; 0x4fa <check_fs+0xca>
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     4f0:	83 e0       	ldi	r24, 0x03	; 3
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <check_fs+0xca>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <check_fs+0xca>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	81 f0       	breq	.+32     	; 0x526 <validate+0x24>
     506:	fc 01       	movw	r30, r24
     508:	20 81       	ld	r18, Z
     50a:	22 23       	and	r18, r18
     50c:	71 f0       	breq	.+28     	; 0x52a <validate+0x28>
     50e:	26 81       	ldd	r18, Z+6	; 0x06
     510:	37 81       	ldd	r19, Z+7	; 0x07
     512:	26 17       	cp	r18, r22
     514:	37 07       	cpc	r19, r23
     516:	59 f4       	brne	.+22     	; 0x52e <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
     518:	81 81       	ldd	r24, Z+1	; 0x01
     51a:	0e 94 67 00 	call	0xce	; 0xce <disk_status>
     51e:	80 fd       	sbrc	r24, 0
     520:	08 c0       	rjmp	.+16     	; 0x532 <validate+0x30>
		return FR_NOT_READY;

	return FR_OK;
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	08 95       	ret
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
     526:	89 e0       	ldi	r24, 0x09	; 9
     528:	08 95       	ret
     52a:	89 e0       	ldi	r24, 0x09	; 9
     52c:	08 95       	ret
     52e:	89 e0       	ldi	r24, 0x09	; 9
     530:	08 95       	ret

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
		return FR_NOT_READY;
     532:	83 e0       	ldi	r24, 0x03	; 3

	return FR_OK;
}
     534:	08 95       	ret

00000536 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
     536:	0f 93       	push	r16
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	ba 01       	movw	r22, r20
     544:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
     548:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
     54a:	81 11       	cpse	r24, r1
     54c:	5a c0       	rjmp	.+180    	; 0x602 <sync+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
     54e:	88 81       	ld	r24, Y
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	09 f0       	breq	.+2      	; 0x556 <sync+0x20>
     554:	4c c0       	rjmp	.+152    	; 0x5ee <sync+0xb8>
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	88 23       	and	r24, r24
     55a:	09 f4       	brne	.+2      	; 0x55e <sync+0x28>
     55c:	48 c0       	rjmp	.+144    	; 0x5ee <sync+0xb8>
			fs->winsect = 0;
     55e:	1a a6       	std	Y+42, r1	; 0x2a
     560:	1b a6       	std	Y+43, r1	; 0x2b
     562:	1c a6       	std	Y+44, r1	; 0x2c
     564:	1d a6       	std	Y+45, r1	; 0x2d
			mem_set(fs->win, 0, 512);
     566:	be 01       	movw	r22, r28
     568:	62 5d       	subi	r22, 0xD2	; 210
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	fb 01       	movw	r30, r22
     56e:	ce 01       	movw	r24, r28
     570:	82 5d       	subi	r24, 0xD2	; 210
     572:	9d 4f       	sbci	r25, 0xFD	; 253

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     574:	11 92       	st	Z+, r1
     576:	e8 17       	cp	r30, r24
     578:	f9 07       	cpc	r31, r25
     57a:	e1 f7       	brne	.-8      	; 0x574 <sync+0x3e>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
     57c:	85 e5       	ldi	r24, 0x55	; 85
     57e:	fe 01       	movw	r30, r28
     580:	e4 5d       	subi	r30, 0xD4	; 212
     582:	fd 4f       	sbci	r31, 0xFD	; 253
     584:	80 83       	st	Z, r24
     586:	8a ea       	ldi	r24, 0xAA	; 170
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
     58c:	82 e5       	ldi	r24, 0x52	; 82
     58e:	8e a7       	std	Y+46, r24	; 0x2e
     590:	8f a7       	std	Y+47, r24	; 0x2f
     592:	81 e6       	ldi	r24, 0x61	; 97
     594:	88 ab       	std	Y+48, r24	; 0x30
     596:	91 e4       	ldi	r25, 0x41	; 65
     598:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
     59a:	22 e7       	ldi	r18, 0x72	; 114
     59c:	7b 97       	sbiw	r30, 0x1b	; 27
     59e:	20 83       	st	Z, r18
     5a0:	31 96       	adiw	r30, 0x01	; 1
     5a2:	20 83       	st	Z, r18
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	90 83       	st	Z, r25
     5a8:	31 96       	adiw	r30, 0x01	; 1
     5aa:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
     5ac:	3e 85       	ldd	r19, Y+14	; 0x0e
     5ae:	2f 85       	ldd	r18, Y+15	; 0x0f
     5b0:	98 89       	ldd	r25, Y+16	; 0x10
     5b2:	89 89       	ldd	r24, Y+17	; 0x11
     5b4:	31 96       	adiw	r30, 0x01	; 1
     5b6:	30 83       	st	Z, r19
     5b8:	31 96       	adiw	r30, 0x01	; 1
     5ba:	20 83       	st	Z, r18
     5bc:	31 96       	adiw	r30, 0x01	; 1
     5be:	90 83       	st	Z, r25
     5c0:	31 96       	adiw	r30, 0x01	; 1
     5c2:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
     5c4:	3a 85       	ldd	r19, Y+10	; 0x0a
     5c6:	2b 85       	ldd	r18, Y+11	; 0x0b
     5c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     5cc:	31 96       	adiw	r30, 0x01	; 1
     5ce:	30 83       	st	Z, r19
     5d0:	31 96       	adiw	r30, 0x01	; 1
     5d2:	20 83       	st	Z, r18
     5d4:	31 96       	adiw	r30, 0x01	; 1
     5d6:	90 83       	st	Z, r25
     5d8:	31 96       	adiw	r30, 0x01	; 1
     5da:	80 83       	st	Z, r24
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
     5dc:	2a 89       	ldd	r18, Y+18	; 0x12
     5de:	3b 89       	ldd	r19, Y+19	; 0x13
     5e0:	4c 89       	ldd	r20, Y+20	; 0x14
     5e2:	5d 89       	ldd	r21, Y+21	; 0x15
     5e4:	01 e0       	ldi	r16, 0x01	; 1
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	0e 94 97 00 	call	0x12e	; 0x12e <disk_write>
			fs->fsi_flag = 0;
     5ec:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	0e 94 b4 00 	call	0x168	; 0x168 <disk_ioctl>
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	81 11       	cpse	r24, r1
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <sync+0xcc>
     600:	90 e0       	ldi	r25, 0x00	; 0
			res = FR_DISK_ERR;
	}

	return res;
}
     602:	89 2f       	mov	r24, r25
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	0f 91       	pop	r16
     60a:	08 95       	ret

0000060c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     60c:	4f 92       	push	r4
     60e:	5f 92       	push	r5
     610:	6f 92       	push	r6
     612:	7f 92       	push	r7
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24
     628:	6a 01       	movw	r12, r20
     62a:	7b 01       	movw	r14, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     62c:	42 30       	cpi	r20, 0x02	; 2
     62e:	51 05       	cpc	r21, r1
     630:	61 05       	cpc	r22, r1
     632:	71 05       	cpc	r23, r1
     634:	08 f4       	brcc	.+2      	; 0x638 <get_fat+0x2c>
     636:	b2 c0       	rjmp	.+356    	; 0x79c <get_fat+0x190>
     638:	8a 8d       	ldd	r24, Y+26	; 0x1a
     63a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     63c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     63e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     640:	48 17       	cp	r20, r24
     642:	59 07       	cpc	r21, r25
     644:	6a 07       	cpc	r22, r26
     646:	7b 07       	cpc	r23, r27
     648:	08 f0       	brcs	.+2      	; 0x64c <get_fat+0x40>
     64a:	ad c0       	rjmp	.+346    	; 0x7a6 <get_fat+0x19a>
		return 1;

	fsect = fs->fatbase;
     64c:	4e 8c       	ldd	r4, Y+30	; 0x1e
     64e:	5f 8c       	ldd	r5, Y+31	; 0x1f
     650:	68 a0       	ldd	r6, Y+32	; 0x20
     652:	79 a0       	ldd	r7, Y+33	; 0x21
	switch (fs->fs_type) {
     654:	88 81       	ld	r24, Y
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	09 f4       	brne	.+2      	; 0x65c <get_fat+0x50>
     65a:	49 c0       	rjmp	.+146    	; 0x6ee <get_fat+0xe2>
     65c:	83 30       	cpi	r24, 0x03	; 3
     65e:	09 f4       	brne	.+2      	; 0x662 <get_fat+0x56>
     660:	65 c0       	rjmp	.+202    	; 0x72c <get_fat+0x120>
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	09 f0       	breq	.+2      	; 0x668 <get_fat+0x5c>
     666:	a4 c0       	rjmp	.+328    	; 0x7b0 <get_fat+0x1a4>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
     668:	5a 01       	movw	r10, r20
     66a:	b6 94       	lsr	r11
     66c:	a7 94       	ror	r10
     66e:	a4 0e       	add	r10, r20
     670:	b5 1e       	adc	r11, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     672:	c5 01       	movw	r24, r10
     674:	89 2f       	mov	r24, r25
     676:	99 27       	eor	r25, r25
     678:	86 95       	lsr	r24
     67a:	b3 01       	movw	r22, r6
     67c:	a2 01       	movw	r20, r4
     67e:	48 0f       	add	r20, r24
     680:	59 1f       	adc	r21, r25
     682:	61 1d       	adc	r22, r1
     684:	71 1d       	adc	r23, r1
     686:	ce 01       	movw	r24, r28
     688:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
     68c:	81 11       	cpse	r24, r1
     68e:	94 c0       	rjmp	.+296    	; 0x7b8 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     690:	f5 01       	movw	r30, r10
     692:	f1 70       	andi	r31, 0x01	; 1
     694:	ec 0f       	add	r30, r28
     696:	fd 1f       	adc	r31, r29
     698:	16 a5       	ldd	r17, Z+46	; 0x2e
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	a8 1a       	sub	r10, r24
     69e:	b8 0a       	sbc	r11, r24
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     6a0:	c5 01       	movw	r24, r10
     6a2:	89 2f       	mov	r24, r25
     6a4:	99 27       	eor	r25, r25
     6a6:	86 95       	lsr	r24
     6a8:	b3 01       	movw	r22, r6
     6aa:	a2 01       	movw	r20, r4
     6ac:	48 0f       	add	r20, r24
     6ae:	59 1f       	adc	r21, r25
     6b0:	61 1d       	adc	r22, r1
     6b2:	71 1d       	adc	r23, r1
     6b4:	ce 01       	movw	r24, r28
     6b6:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
     6ba:	81 11       	cpse	r24, r1
     6bc:	81 c0       	rjmp	.+258    	; 0x7c0 <get_fat+0x1b4>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	b8 22       	and	r11, r24
     6c2:	fe 01       	movw	r30, r28
     6c4:	ea 0d       	add	r30, r10
     6c6:	fb 1d       	adc	r31, r11
     6c8:	86 a5       	ldd	r24, Z+46	; 0x2e
     6ca:	61 2f       	mov	r22, r17
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	78 2b       	or	r23, r24
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     6d0:	c0 fe       	sbrs	r12, 0
     6d2:	09 c0       	rjmp	.+18     	; 0x6e6 <get_fat+0xda>
     6d4:	72 95       	swap	r23
     6d6:	62 95       	swap	r22
     6d8:	6f 70       	andi	r22, 0x0F	; 15
     6da:	67 27       	eor	r22, r23
     6dc:	7f 70       	andi	r23, 0x0F	; 15
     6de:	67 27       	eor	r22, r23
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	78 c0       	rjmp	.+240    	; 0x7d6 <get_fat+0x1ca>
     6e6:	7f 70       	andi	r23, 0x0F	; 15
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	74 c0       	rjmp	.+232    	; 0x7d6 <get_fat+0x1ca>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
     6ee:	45 2f       	mov	r20, r21
     6f0:	56 2f       	mov	r21, r22
     6f2:	67 2f       	mov	r22, r23
     6f4:	77 27       	eor	r23, r23
     6f6:	44 0d       	add	r20, r4
     6f8:	55 1d       	adc	r21, r5
     6fa:	66 1d       	adc	r22, r6
     6fc:	77 1d       	adc	r23, r7
     6fe:	ce 01       	movw	r24, r28
     700:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
     704:	81 11       	cpse	r24, r1
     706:	60 c0       	rjmp	.+192    	; 0x7c8 <get_fat+0x1bc>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
     708:	cc 0c       	add	r12, r12
     70a:	dd 1c       	adc	r13, r13
     70c:	e8 94       	clt
     70e:	c0 f8       	bld	r12, 0
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	d8 22       	and	r13, r24
     714:	fe 01       	movw	r30, r28
     716:	ec 0d       	add	r30, r12
     718:	fd 1d       	adc	r31, r13
     71a:	67 a5       	ldd	r22, Z+47	; 0x2f
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	76 2f       	mov	r23, r22
     720:	66 27       	eor	r22, r22
     722:	86 a5       	ldd	r24, Z+46	; 0x2e
     724:	68 2b       	or	r22, r24
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	55 c0       	rjmp	.+170    	; 0x7d6 <get_fat+0x1ca>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
     72c:	68 94       	set
     72e:	16 f8       	bld	r1, 6
     730:	76 95       	lsr	r23
     732:	67 95       	ror	r22
     734:	57 95       	ror	r21
     736:	47 95       	ror	r20
     738:	16 94       	lsr	r1
     73a:	d1 f7       	brne	.-12     	; 0x730 <get_fat+0x124>
     73c:	44 0d       	add	r20, r4
     73e:	55 1d       	adc	r21, r5
     740:	66 1d       	adc	r22, r6
     742:	77 1d       	adc	r23, r7
     744:	ce 01       	movw	r24, r28
     746:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
     74a:	81 11       	cpse	r24, r1
     74c:	41 c0       	rjmp	.+130    	; 0x7d0 <get_fat+0x1c4>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
     74e:	cc 0c       	add	r12, r12
     750:	dd 1c       	adc	r13, r13
     752:	cc 0c       	add	r12, r12
     754:	dd 1c       	adc	r13, r13
     756:	8c ef       	ldi	r24, 0xFC	; 252
     758:	c8 22       	and	r12, r24
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	d8 22       	and	r13, r24
     75e:	fe 01       	movw	r30, r28
     760:	ec 0d       	add	r30, r12
     762:	fd 1d       	adc	r31, r13
     764:	21 a9       	ldd	r18, Z+49	; 0x31
     766:	60 a9       	ldd	r22, Z+48	; 0x30
     768:	86 2f       	mov	r24, r22
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	dc 01       	movw	r26, r24
     772:	99 27       	eor	r25, r25
     774:	88 27       	eor	r24, r24
     776:	b2 2b       	or	r27, r18
     778:	26 a5       	ldd	r18, Z+46	; 0x2e
     77a:	ac 01       	movw	r20, r24
     77c:	bd 01       	movw	r22, r26
     77e:	42 2b       	or	r20, r18
     780:	87 a5       	ldd	r24, Z+47	; 0x2f
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	98 2f       	mov	r25, r24
     786:	88 27       	eor	r24, r24
     788:	a0 e0       	ldi	r26, 0x00	; 0
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	84 2b       	or	r24, r20
     78e:	95 2b       	or	r25, r21
     790:	a6 2b       	or	r26, r22
     792:	b7 2b       	or	r27, r23
     794:	bc 01       	movw	r22, r24
     796:	cd 01       	movw	r24, r26
     798:	9f 70       	andi	r25, 0x0F	; 15
     79a:	1d c0       	rjmp	.+58     	; 0x7d6 <get_fat+0x1ca>
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	18 c0       	rjmp	.+48     	; 0x7d6 <get_fat+0x1ca>
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	13 c0       	rjmp	.+38     	; 0x7d6 <get_fat+0x1ca>
	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
     7b0:	6f ef       	ldi	r22, 0xFF	; 255
     7b2:	7f ef       	ldi	r23, 0xFF	; 255
     7b4:	cb 01       	movw	r24, r22
     7b6:	0f c0       	rjmp	.+30     	; 0x7d6 <get_fat+0x1ca>
     7b8:	6f ef       	ldi	r22, 0xFF	; 255
     7ba:	7f ef       	ldi	r23, 0xFF	; 255
     7bc:	cb 01       	movw	r24, r22
     7be:	0b c0       	rjmp	.+22     	; 0x7d6 <get_fat+0x1ca>
     7c0:	6f ef       	ldi	r22, 0xFF	; 255
     7c2:	7f ef       	ldi	r23, 0xFF	; 255
     7c4:	cb 01       	movw	r24, r22
     7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <get_fat+0x1ca>
     7c8:	6f ef       	ldi	r22, 0xFF	; 255
     7ca:	7f ef       	ldi	r23, 0xFF	; 255
     7cc:	cb 01       	movw	r24, r22
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <get_fat+0x1ca>
     7d0:	6f ef       	ldi	r22, 0xFF	; 255
     7d2:	7f ef       	ldi	r23, 0xFF	; 255
     7d4:	cb 01       	movw	r24, r22
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	7f 90       	pop	r7
     7ea:	6f 90       	pop	r6
     7ec:	5f 90       	pop	r5
     7ee:	4f 90       	pop	r4
     7f0:	08 95       	ret

000007f2 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     7f2:	2f 92       	push	r2
     7f4:	3f 92       	push	r3
     7f6:	4f 92       	push	r4
     7f8:	5f 92       	push	r5
     7fa:	6f 92       	push	r6
     7fc:	7f 92       	push	r7
     7fe:	8f 92       	push	r8
     800:	9f 92       	push	r9
     802:	af 92       	push	r10
     804:	bf 92       	push	r11
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	ec 01       	movw	r28, r24
     818:	6a 01       	movw	r12, r20
     81a:	7b 01       	movw	r14, r22
     81c:	48 01       	movw	r8, r16
     81e:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
     820:	42 30       	cpi	r20, 0x02	; 2
     822:	51 05       	cpc	r21, r1
     824:	61 05       	cpc	r22, r1
     826:	71 05       	cpc	r23, r1
     828:	08 f4       	brcc	.+2      	; 0x82c <put_fat+0x3a>
     82a:	b6 c0       	rjmp	.+364    	; 0x998 <__stack+0x99>
     82c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     82e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     830:	ac 8d       	ldd	r26, Y+28	; 0x1c
     832:	bd 8d       	ldd	r27, Y+29	; 0x1d
     834:	48 17       	cp	r20, r24
     836:	59 07       	cpc	r21, r25
     838:	6a 07       	cpc	r22, r26
     83a:	7b 07       	cpc	r23, r27
     83c:	08 f0       	brcs	.+2      	; 0x840 <put_fat+0x4e>
     83e:	ae c0       	rjmp	.+348    	; 0x99c <__stack+0x9d>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
     840:	4e 8c       	ldd	r4, Y+30	; 0x1e
     842:	5f 8c       	ldd	r5, Y+31	; 0x1f
     844:	68 a0       	ldd	r6, Y+32	; 0x20
     846:	79 a0       	ldd	r7, Y+33	; 0x21
		switch (fs->fs_type) {
     848:	88 81       	ld	r24, Y
     84a:	82 30       	cpi	r24, 0x02	; 2
     84c:	09 f4       	brne	.+2      	; 0x850 <put_fat+0x5e>
     84e:	60 c0       	rjmp	.+192    	; 0x910 <__stack+0x11>
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	09 f4       	brne	.+2      	; 0x856 <put_fat+0x64>
     854:	77 c0       	rjmp	.+238    	; 0x944 <__stack+0x45>
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	09 f0       	breq	.+2      	; 0x85c <put_fat+0x6a>
     85a:	96 c0       	rjmp	.+300    	; 0x988 <__stack+0x89>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
     85c:	8a 01       	movw	r16, r20
     85e:	16 95       	lsr	r17
     860:	07 95       	ror	r16
     862:	18 01       	movw	r2, r16
     864:	24 0e       	add	r2, r20
     866:	35 1e       	adc	r3, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
     868:	c1 01       	movw	r24, r2
     86a:	89 2f       	mov	r24, r25
     86c:	99 27       	eor	r25, r25
     86e:	86 95       	lsr	r24
     870:	b3 01       	movw	r22, r6
     872:	a2 01       	movw	r20, r4
     874:	48 0f       	add	r20, r24
     876:	59 1f       	adc	r21, r25
     878:	61 1d       	adc	r22, r1
     87a:	71 1d       	adc	r23, r1
     87c:	ce 01       	movw	r24, r28
     87e:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
     882:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
     884:	81 11       	cpse	r24, r1
     886:	85 c0       	rjmp	.+266    	; 0x992 <__stack+0x93>
			p = &fs->win[bc & (SS(fs) - 1)];
     888:	c1 01       	movw	r24, r2
     88a:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     88c:	c0 fe       	sbrs	r12, 0
     88e:	22 c0       	rjmp	.+68     	; 0x8d4 <put_fat+0xe2>
     890:	fe 01       	movw	r30, r28
     892:	e8 0f       	add	r30, r24
     894:	f9 1f       	adc	r31, r25
     896:	86 a5       	ldd	r24, Z+46	; 0x2e
     898:	28 2f       	mov	r18, r24
     89a:	2f 70       	andi	r18, 0x0F	; 15
     89c:	30 e1       	ldi	r19, 0x10	; 16
     89e:	83 9e       	mul	r8, r19
     8a0:	c0 01       	movw	r24, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	82 2b       	or	r24, r18
     8a6:	86 a7       	std	Z+46, r24	; 0x2e
			bc++;
     8a8:	71 01       	movw	r14, r2
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	e8 1a       	sub	r14, r24
     8ae:	f8 0a       	sbc	r15, r24
			fs->wflag = 1;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     8b4:	c7 01       	movw	r24, r14
     8b6:	89 2f       	mov	r24, r25
     8b8:	99 27       	eor	r25, r25
     8ba:	86 95       	lsr	r24
     8bc:	b3 01       	movw	r22, r6
     8be:	a2 01       	movw	r20, r4
     8c0:	48 0f       	add	r20, r24
     8c2:	59 1f       	adc	r21, r25
     8c4:	61 1d       	adc	r22, r1
     8c6:	71 1d       	adc	r23, r1
     8c8:	ce 01       	movw	r24, r28
     8ca:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
			if (res != FR_OK) break;
     8ce:	81 11       	cpse	r24, r1
     8d0:	5d c0       	rjmp	.+186    	; 0x98c <__stack+0x8d>
     8d2:	66 c0       	rjmp	.+204    	; 0x9a0 <__stack+0xa1>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     8d4:	fe 01       	movw	r30, r28
     8d6:	e8 0f       	add	r30, r24
     8d8:	f9 1f       	adc	r31, r25
     8da:	86 a6       	std	Z+46, r8	; 0x2e
			bc++;
     8dc:	71 01       	movw	r14, r2
     8de:	3f ef       	ldi	r19, 0xFF	; 255
     8e0:	e3 1a       	sub	r14, r19
     8e2:	f3 0a       	sbc	r15, r19
			fs->wflag = 1;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     8e8:	c7 01       	movw	r24, r14
     8ea:	89 2f       	mov	r24, r25
     8ec:	99 27       	eor	r25, r25
     8ee:	86 95       	lsr	r24
     8f0:	b3 01       	movw	r22, r6
     8f2:	a2 01       	movw	r20, r4
     8f4:	48 0f       	add	r20, r24
     8f6:	59 1f       	adc	r21, r25
     8f8:	61 1d       	adc	r22, r1
     8fa:	71 1d       	adc	r23, r1
     8fc:	ce 01       	movw	r24, r28
     8fe:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
			if (res != FR_OK) break;
     902:	81 11       	cpse	r24, r1
     904:	45 c0       	rjmp	.+138    	; 0x990 <__stack+0x91>
     906:	57 c0       	rjmp	.+174    	; 0x9b6 <__stack+0xb7>
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     908:	ec 0f       	add	r30, r28
     90a:	fd 1f       	adc	r31, r29
     90c:	86 a6       	std	Z+46, r8	; 0x2e
			break;
     90e:	41 c0       	rjmp	.+130    	; 0x992 <__stack+0x93>

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
     910:	45 2f       	mov	r20, r21
     912:	56 2f       	mov	r21, r22
     914:	67 2f       	mov	r22, r23
     916:	77 27       	eor	r23, r23
     918:	44 0d       	add	r20, r4
     91a:	55 1d       	adc	r21, r5
     91c:	66 1d       	adc	r22, r6
     91e:	77 1d       	adc	r23, r7
     920:	ce 01       	movw	r24, r28
     922:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
     926:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
     928:	81 11       	cpse	r24, r1
     92a:	33 c0       	rjmp	.+102    	; 0x992 <__stack+0x93>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
     92c:	cc 0c       	add	r12, r12
     92e:	dd 1c       	adc	r13, r13
     930:	e8 94       	clt
     932:	c0 f8       	bld	r12, 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	d8 22       	and	r13, r24
     938:	fe 01       	movw	r30, r28
     93a:	ec 0d       	add	r30, r12
     93c:	fd 1d       	adc	r31, r13
     93e:	86 a6       	std	Z+46, r8	; 0x2e
     940:	97 a6       	std	Z+47, r9	; 0x2f
			break;
     942:	27 c0       	rjmp	.+78     	; 0x992 <__stack+0x93>

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
     944:	68 94       	set
     946:	16 f8       	bld	r1, 6
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	57 95       	ror	r21
     94e:	47 95       	ror	r20
     950:	16 94       	lsr	r1
     952:	d1 f7       	brne	.-12     	; 0x948 <__stack+0x49>
     954:	44 0d       	add	r20, r4
     956:	55 1d       	adc	r21, r5
     958:	66 1d       	adc	r22, r6
     95a:	77 1d       	adc	r23, r7
     95c:	ce 01       	movw	r24, r28
     95e:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
     962:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
     964:	81 11       	cpse	r24, r1
     966:	15 c0       	rjmp	.+42     	; 0x992 <__stack+0x93>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
     968:	cc 0c       	add	r12, r12
     96a:	dd 1c       	adc	r13, r13
     96c:	cc 0c       	add	r12, r12
     96e:	dd 1c       	adc	r13, r13
     970:	3c ef       	ldi	r19, 0xFC	; 252
     972:	c3 22       	and	r12, r19
     974:	31 e0       	ldi	r19, 0x01	; 1
     976:	d3 22       	and	r13, r19
     978:	fe 01       	movw	r30, r28
     97a:	ec 0d       	add	r30, r12
     97c:	fd 1d       	adc	r31, r13
     97e:	86 a6       	std	Z+46, r8	; 0x2e
     980:	97 a6       	std	Z+47, r9	; 0x2f
     982:	a0 aa       	std	Z+48, r10	; 0x30
     984:	b1 aa       	std	Z+49, r11	; 0x31
			break;
     986:	05 c0       	rjmp	.+10     	; 0x992 <__stack+0x93>

		default :
			res = FR_INT_ERR;
     988:	12 e0       	ldi	r17, 0x02	; 2
     98a:	03 c0       	rjmp	.+6      	; 0x992 <__stack+0x93>
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
     98c:	18 2f       	mov	r17, r24
     98e:	01 c0       	rjmp	.+2      	; 0x992 <__stack+0x93>
     990:	18 2f       	mov	r17, r24
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	8c 83       	std	Y+4, r24	; 0x04
     996:	1c c0       	rjmp	.+56     	; 0x9d0 <__stack+0xd1>
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;
     998:	12 e0       	ldi	r17, 0x02	; 2
     99a:	1a c0       	rjmp	.+52     	; 0x9d0 <__stack+0xd1>
     99c:	12 e0       	ldi	r17, 0x02	; 2
     99e:	18 c0       	rjmp	.+48     	; 0x9d0 <__stack+0xd1>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
     9a0:	f7 01       	movw	r30, r14
     9a2:	f1 70       	andi	r31, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     9a4:	68 94       	set
     9a6:	13 f8       	bld	r1, 3
     9a8:	b6 94       	lsr	r11
     9aa:	a7 94       	ror	r10
     9ac:	97 94       	ror	r9
     9ae:	87 94       	ror	r8
     9b0:	16 94       	lsr	r1
     9b2:	d1 f7       	brne	.-12     	; 0x9a8 <__stack+0xa9>
     9b4:	a9 cf       	rjmp	.-174    	; 0x908 <__stack+0x9>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
     9b6:	f7 01       	movw	r30, r14
     9b8:	f1 70       	andi	r31, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     9ba:	de 01       	movw	r26, r28
     9bc:	ae 0f       	add	r26, r30
     9be:	bf 1f       	adc	r27, r31
     9c0:	9e 96       	adiw	r26, 0x2e	; 46
     9c2:	9c 91       	ld	r25, X
     9c4:	90 7f       	andi	r25, 0xF0	; 240
     9c6:	89 2d       	mov	r24, r9
     9c8:	8f 70       	andi	r24, 0x0F	; 15
     9ca:	89 2e       	mov	r8, r25
     9cc:	88 2a       	or	r8, r24
     9ce:	9c cf       	rjmp	.-200    	; 0x908 <__stack+0x9>
		}
		fs->wflag = 1;
	}

	return res;
}
     9d0:	81 2f       	mov	r24, r17
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	9f 90       	pop	r9
     9e8:	8f 90       	pop	r8
     9ea:	7f 90       	pop	r7
     9ec:	6f 90       	pop	r6
     9ee:	5f 90       	pop	r5
     9f0:	4f 90       	pop	r4
     9f2:	3f 90       	pop	r3
     9f4:	2f 90       	pop	r2
     9f6:	08 95       	ret

000009f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
     9f8:	2f 92       	push	r2
     9fa:	3f 92       	push	r3
     9fc:	4f 92       	push	r4
     9fe:	5f 92       	push	r5
     a00:	6f 92       	push	r6
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <create_chain+0x26>
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <create_chain+0x28>
     a20:	00 d0       	rcall	.+0      	; 0xa22 <create_chain+0x2a>
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	9e 83       	std	Y+6, r25	; 0x06
     a28:	8d 83       	std	Y+5, r24	; 0x05
     a2a:	49 83       	std	Y+1, r20	; 0x01
     a2c:	5a 83       	std	Y+2, r21	; 0x02
     a2e:	6b 83       	std	Y+3, r22	; 0x03
     a30:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
     a32:	dc 01       	movw	r26, r24
     a34:	5a 96       	adiw	r26, 0x1a	; 26
     a36:	4d 90       	ld	r4, X+
     a38:	5d 90       	ld	r5, X+
     a3a:	6d 90       	ld	r6, X+
     a3c:	7c 90       	ld	r7, X
     a3e:	5d 97       	sbiw	r26, 0x1d	; 29
	if (clst == 0) {		/* Create new chain */
     a40:	45 2b       	or	r20, r21
     a42:	46 2b       	or	r20, r22
     a44:	47 2b       	or	r20, r23
     a46:	a9 f4       	brne	.+42     	; 0xa72 <create_chain+0x7a>
		scl = fs->last_clust;			/* Get suggested start point */
     a48:	1a 96       	adiw	r26, 0x0a	; 10
     a4a:	8d 90       	ld	r8, X+
     a4c:	9d 90       	ld	r9, X+
     a4e:	ad 90       	ld	r10, X+
     a50:	bc 90       	ld	r11, X
     a52:	1d 97       	sbiw	r26, 0x0d	; 13
		if (scl == 0 || scl >= mcl) scl = 1;
     a54:	81 14       	cp	r8, r1
     a56:	91 04       	cpc	r9, r1
     a58:	a1 04       	cpc	r10, r1
     a5a:	b1 04       	cpc	r11, r1
     a5c:	29 f1       	breq	.+74     	; 0xaa8 <create_chain+0xb0>
     a5e:	84 14       	cp	r8, r4
     a60:	95 04       	cpc	r9, r5
     a62:	a6 04       	cpc	r10, r6
     a64:	b7 04       	cpc	r11, r7
     a66:	20 f1       	brcs	.+72     	; 0xab0 <create_chain+0xb8>
     a68:	81 2c       	mov	r8, r1
     a6a:	91 2c       	mov	r9, r1
     a6c:	54 01       	movw	r10, r8
     a6e:	83 94       	inc	r8
     a70:	1f c0       	rjmp	.+62     	; 0xab0 <create_chain+0xb8>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
     a72:	49 81       	ldd	r20, Y+1	; 0x01
     a74:	5a 81       	ldd	r21, Y+2	; 0x02
     a76:	6b 81       	ldd	r22, Y+3	; 0x03
     a78:	7c 81       	ldd	r23, Y+4	; 0x04
     a7a:	8d 81       	ldd	r24, Y+5	; 0x05
     a7c:	9e 81       	ldd	r25, Y+6	; 0x06
     a7e:	0e 94 06 03 	call	0x60c	; 0x60c <get_fat>
     a82:	6b 01       	movw	r12, r22
     a84:	7c 01       	movw	r14, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
     a86:	62 30       	cpi	r22, 0x02	; 2
     a88:	71 05       	cpc	r23, r1
     a8a:	81 05       	cpc	r24, r1
     a8c:	91 05       	cpc	r25, r1
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <create_chain+0x9a>
     a90:	95 c0       	rjmp	.+298    	; 0xbbc <create_chain+0x1c4>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
     a92:	64 15       	cp	r22, r4
     a94:	75 05       	cpc	r23, r5
     a96:	86 05       	cpc	r24, r6
     a98:	97 05       	cpc	r25, r7
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <create_chain+0xa6>
     a9c:	94 c0       	rjmp	.+296    	; 0xbc6 <create_chain+0x1ce>
		scl = clst;
     a9e:	89 80       	ldd	r8, Y+1	; 0x01
     aa0:	9a 80       	ldd	r9, Y+2	; 0x02
     aa2:	ab 80       	ldd	r10, Y+3	; 0x03
     aa4:	bc 80       	ldd	r11, Y+4	; 0x04
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <create_chain+0xb8>


	mcl = fs->max_clust;
	if (clst == 0) {		/* Create new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
     aa8:	81 2c       	mov	r8, r1
     aaa:	91 2c       	mov	r9, r1
     aac:	54 01       	movw	r10, r8
     aae:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
     ab0:	75 01       	movw	r14, r10
     ab2:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
     ab4:	12 e0       	ldi	r17, 0x02	; 2
     ab6:	00 e0       	ldi	r16, 0x00	; 0
     ab8:	31 2c       	mov	r3, r1
     aba:	21 2c       	mov	r2, r1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	ce 1a       	sub	r12, r30
     ac0:	de 0a       	sbc	r13, r30
     ac2:	ee 0a       	sbc	r14, r30
     ac4:	fe 0a       	sbc	r15, r30
		if (ncl >= mcl) {				/* Wrap around */
     ac6:	c4 14       	cp	r12, r4
     ac8:	d5 04       	cpc	r13, r5
     aca:	e6 04       	cpc	r14, r6
     acc:	f7 04       	cpc	r15, r7
     ace:	58 f0       	brcs	.+22     	; 0xae6 <create_chain+0xee>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
     ad0:	f2 e0       	ldi	r31, 0x02	; 2
     ad2:	8f 16       	cp	r8, r31
     ad4:	91 04       	cpc	r9, r1
     ad6:	a1 04       	cpc	r10, r1
     ad8:	b1 04       	cpc	r11, r1
     ada:	08 f4       	brcc	.+2      	; 0xade <create_chain+0xe6>
     adc:	78 c0       	rjmp	.+240    	; 0xbce <create_chain+0x1d6>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
     ade:	c1 2e       	mov	r12, r17
     ae0:	d0 2e       	mov	r13, r16
     ae2:	e3 2c       	mov	r14, r3
     ae4:	f2 2c       	mov	r15, r2
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     ae6:	b7 01       	movw	r22, r14
     ae8:	a6 01       	movw	r20, r12
     aea:	8d 81       	ldd	r24, Y+5	; 0x05
     aec:	9e 81       	ldd	r25, Y+6	; 0x06
     aee:	0e 94 06 03 	call	0x60c	; 0x60c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
     af2:	61 15       	cp	r22, r1
     af4:	71 05       	cpc	r23, r1
     af6:	81 05       	cpc	r24, r1
     af8:	91 05       	cpc	r25, r1
     afa:	99 f0       	breq	.+38     	; 0xb22 <create_chain+0x12a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
     afc:	6f 3f       	cpi	r22, 0xFF	; 255
     afe:	2f ef       	ldi	r18, 0xFF	; 255
     b00:	72 07       	cpc	r23, r18
     b02:	82 07       	cpc	r24, r18
     b04:	92 07       	cpc	r25, r18
     b06:	09 f4       	brne	.+2      	; 0xb0a <create_chain+0x112>
     b08:	67 c0       	rjmp	.+206    	; 0xbd8 <create_chain+0x1e0>
     b0a:	61 30       	cpi	r22, 0x01	; 1
     b0c:	71 05       	cpc	r23, r1
     b0e:	81 05       	cpc	r24, r1
     b10:	91 05       	cpc	r25, r1
     b12:	09 f4       	brne	.+2      	; 0xb16 <create_chain+0x11e>
     b14:	66 c0       	rjmp	.+204    	; 0xbe2 <create_chain+0x1ea>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     b16:	c8 14       	cp	r12, r8
     b18:	d9 04       	cpc	r13, r9
     b1a:	ea 04       	cpc	r14, r10
     b1c:	fb 04       	cpc	r15, r11
     b1e:	71 f6       	brne	.-100    	; 0xabc <create_chain+0xc4>
     b20:	65 c0       	rjmp	.+202    	; 0xbec <create_chain+0x1f4>
     b22:	8c 2c       	mov	r8, r12
     b24:	9d 2c       	mov	r9, r13
     b26:	ae 2c       	mov	r10, r14
     b28:	bf 2c       	mov	r11, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
     b2a:	0f ef       	ldi	r16, 0xFF	; 255
     b2c:	1f ef       	ldi	r17, 0xFF	; 255
     b2e:	2f ef       	ldi	r18, 0xFF	; 255
     b30:	3f e0       	ldi	r19, 0x0F	; 15
     b32:	b7 01       	movw	r22, r14
     b34:	a6 01       	movw	r20, r12
     b36:	8d 81       	ldd	r24, Y+5	; 0x05
     b38:	9e 81       	ldd	r25, Y+6	; 0x06
     b3a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <put_fat>
     b3e:	81 11       	cpse	r24, r1
     b40:	5a c0       	rjmp	.+180    	; 0xbf6 <create_chain+0x1fe>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	9a 81       	ldd	r25, Y+2	; 0x02
     b46:	ab 81       	ldd	r26, Y+3	; 0x03
     b48:	bc 81       	ldd	r27, Y+4	; 0x04
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	61 f0       	breq	.+24     	; 0xb6a <create_chain+0x172>
		if (put_fat(fs, clst, ncl))
     b52:	0c 2d       	mov	r16, r12
     b54:	1d 2d       	mov	r17, r13
     b56:	2e 2d       	mov	r18, r14
     b58:	3f 2d       	mov	r19, r15
     b5a:	ac 01       	movw	r20, r24
     b5c:	bd 01       	movw	r22, r26
     b5e:	8d 81       	ldd	r24, Y+5	; 0x05
     b60:	9e 81       	ldd	r25, Y+6	; 0x06
     b62:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <put_fat>
     b66:	81 11       	cpse	r24, r1
     b68:	4b c0       	rjmp	.+150    	; 0xc00 <create_chain+0x208>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
     b6a:	ad 81       	ldd	r26, Y+5	; 0x05
     b6c:	be 81       	ldd	r27, Y+6	; 0x06
     b6e:	1a 96       	adiw	r26, 0x0a	; 10
     b70:	8c 92       	st	X, r8
     b72:	1a 97       	sbiw	r26, 0x0a	; 10
     b74:	1b 96       	adiw	r26, 0x0b	; 11
     b76:	9c 92       	st	X, r9
     b78:	1b 97       	sbiw	r26, 0x0b	; 11
     b7a:	1c 96       	adiw	r26, 0x0c	; 12
     b7c:	ac 92       	st	X, r10
     b7e:	1c 97       	sbiw	r26, 0x0c	; 12
     b80:	1d 96       	adiw	r26, 0x0d	; 13
     b82:	bc 92       	st	X, r11
     b84:	1d 97       	sbiw	r26, 0x0d	; 13
	if (fs->free_clust != 0xFFFFFFFF) {
     b86:	fd 01       	movw	r30, r26
     b88:	86 85       	ldd	r24, Z+14	; 0x0e
     b8a:	97 85       	ldd	r25, Z+15	; 0x0f
     b8c:	a0 89       	ldd	r26, Z+16	; 0x10
     b8e:	b1 89       	ldd	r27, Z+17	; 0x11
     b90:	8f 3f       	cpi	r24, 0xFF	; 255
     b92:	ff ef       	ldi	r31, 0xFF	; 255
     b94:	9f 07       	cpc	r25, r31
     b96:	af 07       	cpc	r26, r31
     b98:	bf 07       	cpc	r27, r31
     b9a:	59 f0       	breq	.+22     	; 0xbb2 <create_chain+0x1ba>
		fs->free_clust--;
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	ed 81       	ldd	r30, Y+5	; 0x05
     ba4:	fe 81       	ldd	r31, Y+6	; 0x06
     ba6:	86 87       	std	Z+14, r24	; 0x0e
     ba8:	97 87       	std	Z+15, r25	; 0x0f
     baa:	a0 8b       	std	Z+16, r26	; 0x10
     bac:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	85 83       	std	Z+5, r24	; 0x05
	}

	return ncl;		/* Return new cluster number */
     bb2:	6c 2d       	mov	r22, r12
     bb4:	7d 2d       	mov	r23, r13
     bb6:	8e 2d       	mov	r24, r14
     bb8:	9f 2d       	mov	r25, r15
     bba:	26 c0       	rjmp	.+76     	; 0xc08 <create_chain+0x210>
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	21 c0       	rjmp	.+66     	; 0xc08 <create_chain+0x210>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
     bc6:	7d 2d       	mov	r23, r13
     bc8:	8e 2d       	mov	r24, r14
     bca:	9f 2d       	mov	r25, r15
     bcc:	1d c0       	rjmp	.+58     	; 0xc08 <create_chain+0x210>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	18 c0       	rjmp	.+48     	; 0xc08 <create_chain+0x210>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     bd8:	6f ef       	ldi	r22, 0xFF	; 255
     bda:	7f ef       	ldi	r23, 0xFF	; 255
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	9f ef       	ldi	r25, 0xFF	; 255
     be0:	13 c0       	rjmp	.+38     	; 0xc08 <create_chain+0x210>
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <create_chain+0x210>
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	09 c0       	rjmp	.+18     	; 0xc08 <create_chain+0x210>
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
		return 0xFFFFFFFF;
     bf6:	6f ef       	ldi	r22, 0xFF	; 255
     bf8:	7f ef       	ldi	r23, 0xFF	; 255
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	9f ef       	ldi	r25, 0xFF	; 255
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <create_chain+0x210>
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
     c00:	6f ef       	ldi	r22, 0xFF	; 255
     c02:	7f ef       	ldi	r23, 0xFF	; 255
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	9f ef       	ldi	r25, 0xFF	; 255
		fs->free_clust--;
		fs->fsi_flag = 1;
	}

	return ncl;		/* Return new cluster number */
}
     c08:	26 96       	adiw	r28, 0x06	; 6
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	bf 90       	pop	r11
     c26:	af 90       	pop	r10
     c28:	9f 90       	pop	r9
     c2a:	8f 90       	pop	r8
     c2c:	7f 90       	pop	r7
     c2e:	6f 90       	pop	r6
     c30:	5f 90       	pop	r5
     c32:	4f 90       	pop	r4
     c34:	3f 90       	pop	r3
     c36:	2f 90       	pop	r2
     c38:	08 95       	ret

00000c3a <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
     c3a:	7f 92       	push	r7
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	6a 01       	movw	r12, r20
     c58:	7b 01       	movw	r14, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
     c5a:	42 30       	cpi	r20, 0x02	; 2
     c5c:	51 05       	cpc	r21, r1
     c5e:	61 05       	cpc	r22, r1
     c60:	71 05       	cpc	r23, r1
     c62:	08 f4       	brcc	.+2      	; 0xc66 <remove_chain+0x2c>
     c64:	4d c0       	rjmp	.+154    	; 0xd00 <remove_chain+0xc6>
     c66:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c68:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c6a:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c6c:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c6e:	48 17       	cp	r20, r24
     c70:	59 07       	cpc	r21, r25
     c72:	6a 07       	cpc	r22, r26
     c74:	7b 07       	cpc	r23, r27
     c76:	08 f0       	brcs	.+2      	; 0xc7a <remove_chain+0x40>
     c78:	45 c0       	rjmp	.+138    	; 0xd04 <remove_chain+0xca>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
     c7a:	77 24       	eor	r7, r7
     c7c:	73 94       	inc	r7
     c7e:	35 c0       	rjmp	.+106    	; 0xcea <remove_chain+0xb0>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
     c80:	b7 01       	movw	r22, r14
     c82:	a6 01       	movw	r20, r12
     c84:	ce 01       	movw	r24, r28
     c86:	0e 94 06 03 	call	0x60c	; 0x60c <get_fat>
     c8a:	4b 01       	movw	r8, r22
     c8c:	5c 01       	movw	r10, r24
			if (nxt == 0) break;				/* Empty cluster? */
     c8e:	67 2b       	or	r22, r23
     c90:	68 2b       	or	r22, r24
     c92:	69 2b       	or	r22, r25
     c94:	c9 f1       	breq	.+114    	; 0xd08 <remove_chain+0xce>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	88 16       	cp	r8, r24
     c9a:	91 04       	cpc	r9, r1
     c9c:	a1 04       	cpc	r10, r1
     c9e:	b1 04       	cpc	r11, r1
     ca0:	a9 f1       	breq	.+106    	; 0xd0c <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
     ca2:	2f ef       	ldi	r18, 0xFF	; 255
     ca4:	82 16       	cp	r8, r18
     ca6:	92 06       	cpc	r9, r18
     ca8:	a2 06       	cpc	r10, r18
     caa:	b2 06       	cpc	r11, r18
     cac:	89 f1       	breq	.+98     	; 0xd10 <remove_chain+0xd6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
     cae:	00 e0       	ldi	r16, 0x00	; 0
     cb0:	10 e0       	ldi	r17, 0x00	; 0
     cb2:	98 01       	movw	r18, r16
     cb4:	b7 01       	movw	r22, r14
     cb6:	a6 01       	movw	r20, r12
     cb8:	ce 01       	movw	r24, r28
     cba:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <put_fat>
			if (res != FR_OK) break;
     cbe:	81 11       	cpse	r24, r1
     cc0:	28 c0       	rjmp	.+80     	; 0xd12 <remove_chain+0xd8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
     cc2:	8e 85       	ldd	r24, Y+14	; 0x0e
     cc4:	9f 85       	ldd	r25, Y+15	; 0x0f
     cc6:	a8 89       	ldd	r26, Y+16	; 0x10
     cc8:	b9 89       	ldd	r27, Y+17	; 0x11
     cca:	8f 3f       	cpi	r24, 0xFF	; 255
     ccc:	2f ef       	ldi	r18, 0xFF	; 255
     cce:	92 07       	cpc	r25, r18
     cd0:	a2 07       	cpc	r26, r18
     cd2:	b2 07       	cpc	r27, r18
     cd4:	41 f0       	breq	.+16     	; 0xce6 <remove_chain+0xac>
				fs->free_clust++;
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	a1 1d       	adc	r26, r1
     cda:	b1 1d       	adc	r27, r1
     cdc:	8e 87       	std	Y+14, r24	; 0x0e
     cde:	9f 87       	std	Y+15, r25	; 0x0f
     ce0:	a8 8b       	std	Y+16, r26	; 0x10
     ce2:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
     ce4:	7d 82       	std	Y+5, r7	; 0x05
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
     ce6:	75 01       	movw	r14, r10
     ce8:	64 01       	movw	r12, r8
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
     cea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cec:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cee:	ac 8d       	ldd	r26, Y+28	; 0x1c
     cf0:	bd 8d       	ldd	r27, Y+29	; 0x1d
     cf2:	c8 16       	cp	r12, r24
     cf4:	d9 06       	cpc	r13, r25
     cf6:	ea 06       	cpc	r14, r26
     cf8:	fb 06       	cpc	r15, r27
     cfa:	10 f2       	brcs	.-124    	; 0xc80 <remove_chain+0x46>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <remove_chain+0xd8>
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <remove_chain+0xd8>
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <remove_chain+0xd8>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <remove_chain+0xd8>
	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
     d10:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	9f 90       	pop	r9
     d28:	8f 90       	pop	r8
     d2a:	7f 90       	pop	r7
     d2c:	08 95       	ret

00000d2e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	fc 01       	movw	r30, r24
	clst -= 2;
     d38:	9a 01       	movw	r18, r20
     d3a:	ab 01       	movw	r20, r22
     d3c:	22 50       	subi	r18, 0x02	; 2
     d3e:	31 09       	sbc	r19, r1
     d40:	41 09       	sbc	r20, r1
     d42:	51 09       	sbc	r21, r1
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     d44:	c2 8c       	ldd	r12, Z+26	; 0x1a
     d46:	d3 8c       	ldd	r13, Z+27	; 0x1b
     d48:	e4 8c       	ldd	r14, Z+28	; 0x1c
     d4a:	f5 8c       	ldd	r15, Z+29	; 0x1d
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	c8 1a       	sub	r12, r24
     d50:	d1 08       	sbc	r13, r1
     d52:	e1 08       	sbc	r14, r1
     d54:	f1 08       	sbc	r15, r1
     d56:	2c 15       	cp	r18, r12
     d58:	3d 05       	cpc	r19, r13
     d5a:	4e 05       	cpc	r20, r14
     d5c:	5f 05       	cpc	r21, r15
     d5e:	68 f4       	brcc	.+26     	; 0xd7a <clust2sect+0x4c>
	return clst * fs->csize + fs->database;
     d60:	a2 81       	ldd	r26, Z+2	; 0x02
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__muluhisi3>
     d68:	c6 a0       	ldd	r12, Z+38	; 0x26
     d6a:	d7 a0       	ldd	r13, Z+39	; 0x27
     d6c:	e0 a4       	ldd	r14, Z+40	; 0x28
     d6e:	f1 a4       	ldd	r15, Z+41	; 0x29
     d70:	6c 0d       	add	r22, r12
     d72:	7d 1d       	adc	r23, r13
     d74:	8e 1d       	adc	r24, r14
     d76:	9f 1d       	adc	r25, r15
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <clust2sect+0x52>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	cb 01       	movw	r24, r22
	return clst * fs->csize + fs->database;
}
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	08 95       	ret

00000d8a <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ec 01       	movw	r28, r24
     d98:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
     d9a:	7d 83       	std	Y+5, r23	; 0x05
     d9c:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
     d9e:	4e 81       	ldd	r20, Y+6	; 0x06
     da0:	5f 81       	ldd	r21, Y+7	; 0x07
     da2:	68 85       	ldd	r22, Y+8	; 0x08
     da4:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
     da6:	41 30       	cpi	r20, 0x01	; 1
     da8:	51 05       	cpc	r21, r1
     daa:	61 05       	cpc	r22, r1
     dac:	71 05       	cpc	r23, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <dir_seek+0x28>
     db0:	93 c0       	rjmp	.+294    	; 0xed8 <dir_seek+0x14e>
     db2:	e8 81       	ld	r30, Y
     db4:	f9 81       	ldd	r31, Y+1	; 0x01
     db6:	82 8d       	ldd	r24, Z+26	; 0x1a
     db8:	93 8d       	ldd	r25, Z+27	; 0x1b
     dba:	a4 8d       	ldd	r26, Z+28	; 0x1c
     dbc:	b5 8d       	ldd	r27, Z+29	; 0x1d
     dbe:	48 17       	cp	r20, r24
     dc0:	59 07       	cpc	r21, r25
     dc2:	6a 07       	cpc	r22, r26
     dc4:	7b 07       	cpc	r23, r27
     dc6:	08 f0       	brcs	.+2      	; 0xdca <dir_seek+0x40>
     dc8:	89 c0       	rjmp	.+274    	; 0xedc <dir_seek+0x152>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     dca:	41 15       	cp	r20, r1
     dcc:	51 05       	cpc	r21, r1
     dce:	61 05       	cpc	r22, r1
     dd0:	71 05       	cpc	r23, r1
     dd2:	51 f5       	brne	.+84     	; 0xe28 <dir_seek+0x9e>
     dd4:	80 81       	ld	r24, Z
     dd6:	83 30       	cpi	r24, 0x03	; 3
     dd8:	49 f4       	brne	.+18     	; 0xdec <dir_seek+0x62>
		clst = dj->fs->dirbase;
     dda:	42 a1       	ldd	r20, Z+34	; 0x22
     ddc:	53 a1       	ldd	r21, Z+35	; 0x23
     dde:	64 a1       	ldd	r22, Z+36	; 0x24
     de0:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
     de2:	41 15       	cp	r20, r1
     de4:	51 05       	cpc	r21, r1
     de6:	61 05       	cpc	r22, r1
     de8:	71 05       	cpc	r23, r1
     dea:	f1 f4       	brne	.+60     	; 0xe28 <dir_seek+0x9e>
		dj->clust = clst;
     dec:	1a 86       	std	Y+10, r1	; 0x0a
     dee:	1b 86       	std	Y+11, r1	; 0x0b
     df0:	1c 86       	std	Y+12, r1	; 0x0c
     df2:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
     df4:	80 85       	ldd	r24, Z+8	; 0x08
     df6:	91 85       	ldd	r25, Z+9	; 0x09
     df8:	08 17       	cp	r16, r24
     dfa:	19 07       	cpc	r17, r25
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <dir_seek+0x76>
     dfe:	70 c0       	rjmp	.+224    	; 0xee0 <dir_seek+0x156>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
     e00:	82 a1       	ldd	r24, Z+34	; 0x22
     e02:	93 a1       	ldd	r25, Z+35	; 0x23
     e04:	a4 a1       	ldd	r26, Z+36	; 0x24
     e06:	b5 a1       	ldd	r27, Z+37	; 0x25
     e08:	98 01       	movw	r18, r16
     e0a:	32 95       	swap	r19
     e0c:	22 95       	swap	r18
     e0e:	2f 70       	andi	r18, 0x0F	; 15
     e10:	23 27       	eor	r18, r19
     e12:	3f 70       	andi	r19, 0x0F	; 15
     e14:	23 27       	eor	r18, r19
     e16:	82 0f       	add	r24, r18
     e18:	93 1f       	adc	r25, r19
     e1a:	a1 1d       	adc	r26, r1
     e1c:	b1 1d       	adc	r27, r1
     e1e:	8e 87       	std	Y+14, r24	; 0x0e
     e20:	9f 87       	std	Y+15, r25	; 0x0f
     e22:	a8 8b       	std	Y+16, r26	; 0x10
     e24:	b9 8b       	std	Y+17, r27	; 0x11
     e26:	44 c0       	rjmp	.+136    	; 0xeb0 <dir_seek+0x126>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
     e28:	e2 80       	ldd	r14, Z+2	; 0x02
     e2a:	80 e1       	ldi	r24, 0x10	; 16
     e2c:	e8 9e       	mul	r14, r24
     e2e:	70 01       	movw	r14, r0
     e30:	11 24       	eor	r1, r1
		while (idx >= ic) {	/* Follow cluster chain */
     e32:	0e 15       	cp	r16, r14
     e34:	1f 05       	cpc	r17, r15
     e36:	18 f1       	brcs	.+70     	; 0xe7e <dir_seek+0xf4>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
     e38:	88 81       	ld	r24, Y
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	0e 94 06 03 	call	0x60c	; 0x60c <get_fat>
     e40:	ab 01       	movw	r20, r22
     e42:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     e44:	4f 3f       	cpi	r20, 0xFF	; 255
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	58 07       	cpc	r21, r24
     e4a:	68 07       	cpc	r22, r24
     e4c:	78 07       	cpc	r23, r24
     e4e:	09 f4       	brne	.+2      	; 0xe52 <dir_seek+0xc8>
     e50:	49 c0       	rjmp	.+146    	; 0xee4 <dir_seek+0x15a>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
     e52:	42 30       	cpi	r20, 0x02	; 2
     e54:	51 05       	cpc	r21, r1
     e56:	61 05       	cpc	r22, r1
     e58:	71 05       	cpc	r23, r1
     e5a:	08 f4       	brcc	.+2      	; 0xe5e <dir_seek+0xd4>
     e5c:	45 c0       	rjmp	.+138    	; 0xee8 <dir_seek+0x15e>
     e5e:	e8 81       	ld	r30, Y
     e60:	f9 81       	ldd	r31, Y+1	; 0x01
     e62:	82 8d       	ldd	r24, Z+26	; 0x1a
     e64:	93 8d       	ldd	r25, Z+27	; 0x1b
     e66:	a4 8d       	ldd	r26, Z+28	; 0x1c
     e68:	b5 8d       	ldd	r27, Z+29	; 0x1d
     e6a:	48 17       	cp	r20, r24
     e6c:	59 07       	cpc	r21, r25
     e6e:	6a 07       	cpc	r22, r26
     e70:	7b 07       	cpc	r23, r27
     e72:	e0 f5       	brcc	.+120    	; 0xeec <dir_seek+0x162>
				return FR_INT_ERR;
			idx -= ic;
     e74:	0e 19       	sub	r16, r14
     e76:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
     e78:	0e 15       	cp	r16, r14
     e7a:	1f 05       	cpc	r17, r15
     e7c:	e8 f6       	brcc	.-70     	; 0xe38 <dir_seek+0xae>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
     e7e:	4a 87       	std	Y+10, r20	; 0x0a
     e80:	5b 87       	std	Y+11, r21	; 0x0b
     e82:	6c 87       	std	Y+12, r22	; 0x0c
     e84:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
     e86:	88 81       	ld	r24, Y
     e88:	99 81       	ldd	r25, Y+1	; 0x01
     e8a:	0e 94 97 06 	call	0xd2e	; 0xd2e <clust2sect>
     e8e:	98 01       	movw	r18, r16
     e90:	32 95       	swap	r19
     e92:	22 95       	swap	r18
     e94:	2f 70       	andi	r18, 0x0F	; 15
     e96:	23 27       	eor	r18, r19
     e98:	3f 70       	andi	r19, 0x0F	; 15
     e9a:	23 27       	eor	r18, r19
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	a1 1d       	adc	r26, r1
     ea6:	b1 1d       	adc	r27, r1
     ea8:	8e 87       	std	Y+14, r24	; 0x0e
     eaa:	9f 87       	std	Y+15, r25	; 0x0f
     eac:	a8 8b       	std	Y+16, r26	; 0x10
     eae:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
     eb0:	0f 70       	andi	r16, 0x0F	; 15
     eb2:	11 27       	eor	r17, r17
     eb4:	00 0f       	add	r16, r16
     eb6:	11 1f       	adc	r17, r17
     eb8:	02 95       	swap	r16
     eba:	12 95       	swap	r17
     ebc:	10 7f       	andi	r17, 0xF0	; 240
     ebe:	10 27       	eor	r17, r16
     ec0:	00 7f       	andi	r16, 0xF0	; 240
     ec2:	10 27       	eor	r17, r16
     ec4:	02 5d       	subi	r16, 0xD2	; 210
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	88 81       	ld	r24, Y
     eca:	99 81       	ldd	r25, Y+1	; 0x01
     ecc:	08 0f       	add	r16, r24
     ece:	19 1f       	adc	r17, r25
     ed0:	1b 8b       	std	Y+19, r17	; 0x13
     ed2:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;	/* Seek succeeded */
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0b c0       	rjmp	.+22     	; 0xeee <dir_seek+0x164>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
		return FR_INT_ERR;
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	09 c0       	rjmp	.+18     	; 0xeee <dir_seek+0x164>
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	07 c0       	rjmp	.+14     	; 0xeee <dir_seek+0x164>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <dir_seek+0x164>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	03 c0       	rjmp	.+6      	; 0xeee <dir_seek+0x164>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	01 c0       	rjmp	.+2      	; 0xeee <dir_seek+0x164>
     eec:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	08 95       	ret

00000efc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
     efc:	4f 92       	push	r4
     efe:	5f 92       	push	r5
     f00:	6f 92       	push	r6
     f02:	7f 92       	push	r7
     f04:	8f 92       	push	r8
     f06:	9f 92       	push	r9
     f08:	af 92       	push	r10
     f0a:	bf 92       	push	r11
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
	DWORD clst;
	WORD i;


	i = dj->index + 1;
     f1a:	dc 01       	movw	r26, r24
     f1c:	14 96       	adiw	r26, 0x04	; 4
     f1e:	cd 91       	ld	r28, X+
     f20:	dc 91       	ld	r29, X
     f22:	15 97       	sbiw	r26, 0x05	; 5
     f24:	21 96       	adiw	r28, 0x01	; 1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     f26:	09 f4       	brne	.+2      	; 0xf2a <dir_next+0x2e>
     f28:	08 c1       	rjmp	.+528    	; 0x113a <dir_next+0x23e>
     f2a:	1e 96       	adiw	r26, 0x0e	; 14
     f2c:	8d 90       	ld	r8, X+
     f2e:	9d 90       	ld	r9, X+
     f30:	ad 90       	ld	r10, X+
     f32:	bc 90       	ld	r11, X
     f34:	51 97       	sbiw	r26, 0x11	; 17
     f36:	81 14       	cp	r8, r1
     f38:	91 04       	cpc	r9, r1
     f3a:	a1 04       	cpc	r10, r1
     f3c:	b1 04       	cpc	r11, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <dir_next+0x46>
     f40:	fe c0       	rjmp	.+508    	; 0x113e <dir_next+0x242>
     f42:	f6 2e       	mov	r15, r22
     f44:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
     f46:	6e 01       	movw	r12, r28
     f48:	bf e0       	ldi	r27, 0x0F	; 15
     f4a:	cb 22       	and	r12, r27
     f4c:	dd 24       	eor	r13, r13
     f4e:	c1 14       	cp	r12, r1
     f50:	d1 04       	cpc	r13, r1
     f52:	09 f0       	breq	.+2      	; 0xf56 <dir_next+0x5a>
     f54:	d6 c0       	rjmp	.+428    	; 0x1102 <dir_next+0x206>
		dj->sect++;					/* Next sector */
     f56:	ef ef       	ldi	r30, 0xFF	; 255
     f58:	8e 1a       	sub	r8, r30
     f5a:	9e 0a       	sbc	r9, r30
     f5c:	ae 0a       	sbc	r10, r30
     f5e:	be 0a       	sbc	r11, r30
     f60:	dc 01       	movw	r26, r24
     f62:	1e 96       	adiw	r26, 0x0e	; 14
     f64:	8d 92       	st	X+, r8
     f66:	9d 92       	st	X+, r9
     f68:	ad 92       	st	X+, r10
     f6a:	bc 92       	st	X, r11
     f6c:	51 97       	sbiw	r26, 0x11	; 17

		if (dj->clust == 0) {	/* Static table */
     f6e:	1a 96       	adiw	r26, 0x0a	; 10
     f70:	4d 91       	ld	r20, X+
     f72:	5d 91       	ld	r21, X+
     f74:	6d 91       	ld	r22, X+
     f76:	7c 91       	ld	r23, X
     f78:	1d 97       	sbiw	r26, 0x0d	; 13
     f7a:	41 15       	cp	r20, r1
     f7c:	51 05       	cpc	r21, r1
     f7e:	61 05       	cpc	r22, r1
     f80:	71 05       	cpc	r23, r1
     f82:	49 f4       	brne	.+18     	; 0xf96 <dir_next+0x9a>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
     f84:	ed 91       	ld	r30, X+
     f86:	fc 91       	ld	r31, X
     f88:	80 85       	ldd	r24, Z+8	; 0x08
     f8a:	91 85       	ldd	r25, Z+9	; 0x09
     f8c:	c8 17       	cp	r28, r24
     f8e:	d9 07       	cpc	r29, r25
     f90:	08 f0       	brcs	.+2      	; 0xf94 <dir_next+0x98>
     f92:	d7 c0       	rjmp	.+430    	; 0x1142 <dir_next+0x246>
     f94:	b6 c0       	rjmp	.+364    	; 0x1102 <dir_next+0x206>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
     f96:	dc 01       	movw	r26, r24
     f98:	ed 91       	ld	r30, X+
     f9a:	fc 91       	ld	r31, X
     f9c:	22 81       	ldd	r18, Z+2	; 0x02
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	21 50       	subi	r18, 0x01	; 1
     fa2:	31 09       	sbc	r19, r1
     fa4:	ce 01       	movw	r24, r28
     fa6:	92 95       	swap	r25
     fa8:	82 95       	swap	r24
     faa:	8f 70       	andi	r24, 0x0F	; 15
     fac:	89 27       	eor	r24, r25
     fae:	9f 70       	andi	r25, 0x0F	; 15
     fb0:	89 27       	eor	r24, r25
     fb2:	28 23       	and	r18, r24
     fb4:	39 23       	and	r19, r25
     fb6:	23 2b       	or	r18, r19
     fb8:	09 f0       	breq	.+2      	; 0xfbc <dir_next+0xc0>
     fba:	a3 c0       	rjmp	.+326    	; 0x1102 <dir_next+0x206>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
     fbc:	cf 01       	movw	r24, r30
     fbe:	0e 94 06 03 	call	0x60c	; 0x60c <get_fat>
     fc2:	2b 01       	movw	r4, r22
     fc4:	3c 01       	movw	r6, r24
				if (clst <= 1) return FR_INT_ERR;
     fc6:	62 30       	cpi	r22, 0x02	; 2
     fc8:	71 05       	cpc	r23, r1
     fca:	81 05       	cpc	r24, r1
     fcc:	91 05       	cpc	r25, r1
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <dir_next+0xd6>
     fd0:	ba c0       	rjmp	.+372    	; 0x1146 <dir_next+0x24a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     fd2:	6f 3f       	cpi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	09 f4       	brne	.+2      	; 0xfde <dir_next+0xe2>
     fdc:	b6 c0       	rjmp	.+364    	; 0x114a <dir_next+0x24e>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
     fde:	d8 01       	movw	r26, r16
     fe0:	ed 91       	ld	r30, X+
     fe2:	fc 91       	ld	r31, X
     fe4:	82 8d       	ldd	r24, Z+26	; 0x1a
     fe6:	93 8d       	ldd	r25, Z+27	; 0x1b
     fe8:	a4 8d       	ldd	r26, Z+28	; 0x1c
     fea:	b5 8d       	ldd	r27, Z+29	; 0x1d
     fec:	48 16       	cp	r4, r24
     fee:	59 06       	cpc	r5, r25
     ff0:	6a 06       	cpc	r6, r26
     ff2:	7b 06       	cpc	r7, r27
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <dir_next+0xfc>
     ff6:	73 c0       	rjmp	.+230    	; 0x10de <dir_next+0x1e2>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
     ff8:	ff 20       	and	r15, r15
     ffa:	09 f4       	brne	.+2      	; 0xffe <dir_next+0x102>
     ffc:	a8 c0       	rjmp	.+336    	; 0x114e <dir_next+0x252>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
     ffe:	d8 01       	movw	r26, r16
    1000:	1a 96       	adiw	r26, 0x0a	; 10
    1002:	4d 91       	ld	r20, X+
    1004:	5d 91       	ld	r21, X+
    1006:	6d 91       	ld	r22, X+
    1008:	7c 91       	ld	r23, X
    100a:	1d 97       	sbiw	r26, 0x0d	; 13
    100c:	cf 01       	movw	r24, r30
    100e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <create_chain>
    1012:	2b 01       	movw	r4, r22
    1014:	3c 01       	movw	r6, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1016:	61 15       	cp	r22, r1
    1018:	71 05       	cpc	r23, r1
    101a:	81 05       	cpc	r24, r1
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <dir_next+0x126>
    1020:	98 c0       	rjmp	.+304    	; 0x1152 <dir_next+0x256>
					if (clst == 1) return FR_INT_ERR;
    1022:	61 30       	cpi	r22, 0x01	; 1
    1024:	71 05       	cpc	r23, r1
    1026:	81 05       	cpc	r24, r1
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <dir_next+0x132>
    102c:	94 c0       	rjmp	.+296    	; 0x1156 <dir_next+0x25a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    102e:	6f 3f       	cpi	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	09 f4       	brne	.+2      	; 0x103a <dir_next+0x13e>
    1038:	90 c0       	rjmp	.+288    	; 0x115a <dir_next+0x25e>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	ba 01       	movw	r22, r20
    1040:	d8 01       	movw	r26, r16
    1042:	8d 91       	ld	r24, X+
    1044:	9c 91       	ld	r25, X
    1046:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
    104a:	81 11       	cpse	r24, r1
    104c:	88 c0       	rjmp	.+272    	; 0x115e <dir_next+0x262>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    104e:	f8 01       	movw	r30, r16
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	fc 01       	movw	r30, r24
    1056:	be 96       	adiw	r30, 0x2e	; 46
    1058:	82 5d       	subi	r24, 0xD2	; 210
    105a:	9d 4f       	sbci	r25, 0xFD	; 253

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    105c:	11 92       	st	Z+, r1
    105e:	e8 17       	cp	r30, r24
    1060:	f9 07       	cpc	r31, r25
    1062:	e1 f7       	brne	.-8      	; 0x105c <dir_next+0x160>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1064:	d8 01       	movw	r26, r16
    1066:	ad 90       	ld	r10, X+
    1068:	bc 90       	ld	r11, X
    106a:	b3 01       	movw	r22, r6
    106c:	a2 01       	movw	r20, r4
    106e:	c5 01       	movw	r24, r10
    1070:	0e 94 97 06 	call	0xd2e	; 0xd2e <clust2sect>
    1074:	f5 01       	movw	r30, r10
    1076:	62 a7       	std	Z+42, r22	; 0x2a
    1078:	73 a7       	std	Z+43, r23	; 0x2b
    107a:	84 a7       	std	Z+44, r24	; 0x2c
    107c:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    107e:	f1 2c       	mov	r15, r1
						dj->fs->wflag = 1;
    1080:	bb 24       	eor	r11, r11
    1082:	b3 94       	inc	r11
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1084:	1a c0       	rjmp	.+52     	; 0x10ba <dir_next+0x1be>
						dj->fs->wflag = 1;
    1086:	b4 82       	std	Z+4, r11	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	ba 01       	movw	r22, r20
    108e:	d8 01       	movw	r26, r16
    1090:	8d 91       	ld	r24, X+
    1092:	9c 91       	ld	r25, X
    1094:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
    1098:	81 11       	cpse	r24, r1
    109a:	63 c0       	rjmp	.+198    	; 0x1162 <dir_next+0x266>
						dj->fs->winsect++;
    109c:	d8 01       	movw	r26, r16
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	82 a5       	ldd	r24, Z+42	; 0x2a
    10a4:	93 a5       	ldd	r25, Z+43	; 0x2b
    10a6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    10a8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	a1 1d       	adc	r26, r1
    10ae:	b1 1d       	adc	r27, r1
    10b0:	82 a7       	std	Z+42, r24	; 0x2a
    10b2:	93 a7       	std	Z+43, r25	; 0x2b
    10b4:	a4 a7       	std	Z+44, r26	; 0x2c
    10b6:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    10b8:	f3 94       	inc	r15
    10ba:	d8 01       	movw	r26, r16
    10bc:	ed 91       	ld	r30, X+
    10be:	fc 91       	ld	r31, X
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	f8 16       	cp	r15, r24
    10c4:	00 f3       	brcs	.-64     	; 0x1086 <dir_next+0x18a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    10c6:	82 a5       	ldd	r24, Z+42	; 0x2a
    10c8:	93 a5       	ldd	r25, Z+43	; 0x2b
    10ca:	a4 a5       	ldd	r26, Z+44	; 0x2c
    10cc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    10ce:	8f 19       	sub	r24, r15
    10d0:	91 09       	sbc	r25, r1
    10d2:	a1 09       	sbc	r26, r1
    10d4:	b1 09       	sbc	r27, r1
    10d6:	82 a7       	std	Z+42, r24	; 0x2a
    10d8:	93 a7       	std	Z+43, r25	; 0x2b
    10da:	a4 a7       	std	Z+44, r26	; 0x2c
    10dc:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    10de:	f8 01       	movw	r30, r16
    10e0:	42 86       	std	Z+10, r4	; 0x0a
    10e2:	53 86       	std	Z+11, r5	; 0x0b
    10e4:	64 86       	std	Z+12, r6	; 0x0c
    10e6:	75 86       	std	Z+13, r7	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    10e8:	b3 01       	movw	r22, r6
    10ea:	a2 01       	movw	r20, r4
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	0e 94 97 06 	call	0xd2e	; 0xd2e <clust2sect>
    10f4:	d8 01       	movw	r26, r16
    10f6:	1e 96       	adiw	r26, 0x0e	; 14
    10f8:	6d 93       	st	X+, r22
    10fa:	7d 93       	st	X+, r23
    10fc:	8d 93       	st	X+, r24
    10fe:	9c 93       	st	X, r25
    1100:	51 97       	sbiw	r26, 0x11	; 17
			}
		}
	}

	dj->index = i;
    1102:	f8 01       	movw	r30, r16
    1104:	d5 83       	std	Z+5, r29	; 0x05
    1106:	c4 83       	std	Z+4, r28	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    1108:	cc 0c       	add	r12, r12
    110a:	dd 1c       	adc	r13, r13
    110c:	cc 0c       	add	r12, r12
    110e:	dd 1c       	adc	r13, r13
    1110:	cc 0c       	add	r12, r12
    1112:	dd 1c       	adc	r13, r13
    1114:	cc 0c       	add	r12, r12
    1116:	dd 1c       	adc	r13, r13
    1118:	cc 0c       	add	r12, r12
    111a:	dd 1c       	adc	r13, r13
    111c:	fe e2       	ldi	r31, 0x2E	; 46
    111e:	cf 0e       	add	r12, r31
    1120:	d1 1c       	adc	r13, r1
    1122:	d8 01       	movw	r26, r16
    1124:	8d 91       	ld	r24, X+
    1126:	9c 91       	ld	r25, X
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	c8 0e       	add	r12, r24
    112c:	d9 1e       	adc	r13, r25
    112e:	53 96       	adiw	r26, 0x13	; 19
    1130:	dc 92       	st	X, r13
    1132:	ce 92       	st	-X, r12
    1134:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	15 c0       	rjmp	.+42     	; 0x1164 <dir_next+0x268>
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    113a:	84 e0       	ldi	r24, 0x04	; 4
    113c:	13 c0       	rjmp	.+38     	; 0x1164 <dir_next+0x268>
    113e:	84 e0       	ldi	r24, 0x04	; 4
    1140:	11 c0       	rjmp	.+34     	; 0x1164 <dir_next+0x268>
	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <dir_next+0x268>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <dir_next+0x268>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	0b c0       	rjmp	.+22     	; 0x1164 <dir_next+0x268>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	09 c0       	rjmp	.+18     	; 0x1164 <dir_next+0x268>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1152:	87 e0       	ldi	r24, 0x07	; 7
    1154:	07 c0       	rjmp	.+14     	; 0x1164 <dir_next+0x268>
					if (clst == 1) return FR_INT_ERR;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <dir_next+0x268>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <dir_next+0x268>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <dir_next+0x268>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1162:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	df 90       	pop	r13
    1170:	cf 90       	pop	r12
    1172:	bf 90       	pop	r11
    1174:	af 90       	pop	r10
    1176:	9f 90       	pop	r9
    1178:	8f 90       	pop	r8
    117a:	7f 90       	pop	r7
    117c:	6f 90       	pop	r6
    117e:	5f 90       	pop	r5
    1180:	4f 90       	pop	r4
    1182:	08 95       	ret

00001184 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    1184:	2f 92       	push	r2
    1186:	3f 92       	push	r3
    1188:	4f 92       	push	r4
    118a:	5f 92       	push	r5
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <follow_path+0x26>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <follow_path+0x28>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	6c 01       	movw	r12, r24
    11b2:	7b 01       	movw	r14, r22
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    11b4:	db 01       	movw	r26, r22
    11b6:	8c 91       	ld	r24, X
    11b8:	80 32       	cpi	r24, 0x20	; 32
    11ba:	31 f4       	brne	.+12     	; 0x11c8 <follow_path+0x44>
    11bc:	fb 01       	movw	r30, r22
    11be:	31 96       	adiw	r30, 0x01	; 1
    11c0:	7f 01       	movw	r14, r30
    11c2:	81 91       	ld	r24, Z+
    11c4:	80 32       	cpi	r24, 0x20	; 32
    11c6:	e1 f3       	breq	.-8      	; 0x11c0 <follow_path+0x3c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    11c8:	8f 32       	cpi	r24, 0x2F	; 47
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <follow_path+0x4c>
    11cc:	8c 35       	cpi	r24, 0x5C	; 92
    11ce:	19 f4       	brne	.+6      	; 0x11d6 <follow_path+0x52>
		path++;
    11d0:	bf ef       	ldi	r27, 0xFF	; 255
    11d2:	eb 1a       	sub	r14, r27
    11d4:	fb 0a       	sbc	r15, r27
	dj->sclust = 0;						/* Start from the root dir */
    11d6:	f6 01       	movw	r30, r12
    11d8:	16 82       	std	Z+6, r1	; 0x06
    11da:	17 82       	std	Z+7, r1	; 0x07
    11dc:	10 86       	std	Z+8, r1	; 0x08
    11de:	11 86       	std	Z+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    11e0:	d7 01       	movw	r26, r14
    11e2:	8c 91       	ld	r24, X
    11e4:	80 32       	cpi	r24, 0x20	; 32
    11e6:	48 f4       	brcc	.+18     	; 0x11fa <follow_path+0x76>
		res = dir_seek(dj, 0);
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	c6 01       	movw	r24, r12
    11ee:	0e 94 c5 06 	call	0xd8a	; 0xd8a <dir_seek>
		dj->dir = NULL;
    11f2:	f6 01       	movw	r30, r12
    11f4:	13 8a       	std	Z+19, r1	; 0x13
    11f6:	12 8a       	std	Z+18, r1	; 0x12
    11f8:	5f c1       	rjmp	.+702    	; 0x14b8 <follow_path+0x334>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    11fa:	10 e2       	ldi	r17, 0x20	; 32
    11fc:	b1 2c       	mov	r11, r1
    11fe:	81 2c       	mov	r8, r1
    1200:	68 94       	set
    1202:	77 24       	eor	r7, r7
    1204:	73 f8       	bld	r7, 3
    1206:	61 2c       	mov	r6, r1
    1208:	a1 2c       	mov	r10, r1
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    120a:	79 82       	std	Y+1, r7	; 0x01
    120c:	6a 82       	std	Y+2, r6	; 0x02
    120e:	0f 2e       	mov	r0, r31
    1210:	fb e0       	ldi	r31, 0x0B	; 11
    1212:	2f 2e       	mov	r2, r31
    1214:	f0 2d       	mov	r31, r0
    1216:	0f 2e       	mov	r0, r31
    1218:	fc e3       	ldi	r31, 0x3C	; 60
    121a:	4f 2e       	mov	r4, r31
    121c:	f1 e0       	ldi	r31, 0x01	; 1
    121e:	5f 2e       	mov	r5, r31
    1220:	f0 2d       	mov	r31, r0
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1222:	0f 2e       	mov	r0, r31
    1224:	f5 e0       	ldi	r31, 0x05	; 5
    1226:	3f 2e       	mov	r3, r31
    1228:	f0 2d       	mov	r31, r0
    122a:	dc 82       	std	Y+4, r13	; 0x04
    122c:	cb 82       	std	Y+3, r12	; 0x03
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    122e:	ab 81       	ldd	r26, Y+3	; 0x03
    1230:	bc 81       	ldd	r27, Y+4	; 0x04
    1232:	54 96       	adiw	r26, 0x14	; 20
    1234:	ed 91       	ld	r30, X+
    1236:	fc 91       	ld	r31, X
    1238:	55 97       	sbiw	r26, 0x15	; 21
    123a:	df 01       	movw	r26, r30
    123c:	cf 01       	movw	r24, r30
    123e:	0b 96       	adiw	r24, 0x0b	; 11
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1244:	1d 93       	st	X+, r17
    1246:	a8 17       	cp	r26, r24
    1248:	b9 07       	cpc	r27, r25
    124a:	e1 f7       	brne	.-8      	; 0x1244 <follow_path+0xc0>
    124c:	3c 83       	std	Y+4, r19	; 0x04
    124e:	2b 83       	std	Y+3, r18	; 0x03
    1250:	2b 2d       	mov	r18, r11
    1252:	38 2d       	mov	r19, r8
    1254:	8b 2d       	mov	r24, r11
    1256:	98 2d       	mov	r25, r8
    1258:	47 2d       	mov	r20, r7
    125a:	56 2d       	mov	r21, r6
    125c:	9a 2c       	mov	r9, r10
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    125e:	6c 01       	movw	r12, r24
    1260:	7f ef       	ldi	r23, 0xFF	; 255
    1262:	c7 1a       	sub	r12, r23
    1264:	d7 0a       	sbc	r13, r23
    1266:	d7 01       	movw	r26, r14
    1268:	a8 0f       	add	r26, r24
    126a:	b9 1f       	adc	r27, r25
    126c:	0c 91       	ld	r16, X
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    126e:	01 32       	cpi	r16, 0x21	; 33
    1270:	08 f4       	brcc	.+2      	; 0x1274 <follow_path+0xf0>
    1272:	0a c1       	rjmp	.+532    	; 0x1488 <follow_path+0x304>
    1274:	0f 32       	cpi	r16, 0x2F	; 47
    1276:	09 f4       	brne	.+2      	; 0x127a <follow_path+0xf6>
    1278:	03 c1       	rjmp	.+518    	; 0x1480 <follow_path+0x2fc>
    127a:	0c 35       	cpi	r16, 0x5C	; 92
    127c:	09 f4       	brne	.+2      	; 0x1280 <follow_path+0xfc>
    127e:	00 c1       	rjmp	.+512    	; 0x1480 <follow_path+0x2fc>
		if (c == '.' || i >= ni) {
    1280:	0e 32       	cpi	r16, 0x2E	; 46
    1282:	09 f4       	brne	.+2      	; 0x1286 <follow_path+0x102>
    1284:	e5 c0       	rjmp	.+458    	; 0x1450 <follow_path+0x2cc>
    1286:	24 17       	cp	r18, r20
    1288:	35 07       	cpc	r19, r21
    128a:	0c f0       	brlt	.+2      	; 0x128e <follow_path+0x10a>
    128c:	d1 c0       	rjmp	.+418    	; 0x1430 <follow_path+0x2ac>
    128e:	08 c0       	rjmp	.+16     	; 0x12a0 <follow_path+0x11c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
    1290:	99 0c       	add	r9, r9
    1292:	99 0c       	add	r9, r9
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    1294:	c6 01       	movw	r24, r12
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1296:	29 81       	ldd	r18, Y+1	; 0x01
    1298:	3a 81       	ldd	r19, Y+2	; 0x02
    129a:	42 2d       	mov	r20, r2
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	df cf       	rjmp	.-66     	; 0x125e <follow_path+0xda>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
    12a0:	00 23       	and	r16, r16
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <follow_path+0x122>
    12a4:	e1 c0       	rjmp	.+450    	; 0x1468 <follow_path+0x2e4>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    12a6:	a9 2d       	mov	r26, r9
    12a8:	a3 60       	ori	r26, 0x03	; 3
    12aa:	9a 2e       	mov	r9, r26
    12ac:	dd c0       	rjmp	.+442    	; 0x1468 <follow_path+0x2e4>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    12ae:	02 96       	adiw	r24, 0x02	; 2
    12b0:	d7 01       	movw	r26, r14
    12b2:	ac 0d       	add	r26, r12
    12b4:	bd 1d       	adc	r27, r13
    12b6:	dc 90       	ld	r13, X
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    12b8:	60 ec       	ldi	r22, 0xC0	; 192
    12ba:	6d 0d       	add	r22, r13
    12bc:	6f 33       	cpi	r22, 0x3F	; 63
    12be:	28 f0       	brcs	.+10     	; 0x12ca <follow_path+0x146>
    12c0:	60 e8       	ldi	r22, 0x80	; 128
    12c2:	6d 0d       	add	r22, r13
    12c4:	6f 37       	cpi	r22, 0x7F	; 127
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <follow_path+0x146>
    12c8:	b5 c0       	rjmp	.+362    	; 0x1434 <follow_path+0x2b0>
    12ca:	ba 01       	movw	r22, r20
    12cc:	61 50       	subi	r22, 0x01	; 1
    12ce:	71 09       	sbc	r23, r1
    12d0:	26 17       	cp	r18, r22
    12d2:	37 07       	cpc	r19, r23
    12d4:	0c f0       	brlt	.+2      	; 0x12d8 <follow_path+0x154>
    12d6:	b0 c0       	rjmp	.+352    	; 0x1438 <follow_path+0x2b4>
				return FR_INVALID_NAME;
			sfn[i++] = c;
    12d8:	df 01       	movw	r26, r30
    12da:	a2 0f       	add	r26, r18
    12dc:	b3 1f       	adc	r27, r19
    12de:	0c 93       	st	X, r16
			sfn[i++] = d;
    12e0:	d9 01       	movw	r26, r18
    12e2:	11 96       	adiw	r26, 0x01	; 1
    12e4:	ae 0f       	add	r26, r30
    12e6:	bf 1f       	adc	r27, r31
    12e8:	2e 5f       	subi	r18, 0xFE	; 254
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	dc 92       	st	X, r13
    12ee:	b7 cf       	rjmp	.-146    	; 0x125e <follow_path+0xda>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    12f0:	8d 91       	ld	r24, X+
    12f2:	88 23       	and	r24, r24
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <follow_path+0x174>
    12f6:	be c0       	rjmp	.+380    	; 0x1474 <follow_path+0x2f0>
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	68 17       	cp	r22, r24
    12fc:	79 07       	cpc	r23, r25
    12fe:	c1 f7       	brne	.-16     	; 0x12f0 <follow_path+0x16c>
    1300:	86 e0       	ldi	r24, 0x06	; 6
    1302:	da c0       	rjmp	.+436    	; 0x14b8 <follow_path+0x334>
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
    1304:	b9 2d       	mov	r27, r9
    1306:	b2 60       	ori	r27, 0x02	; 2
    1308:	9b 2e       	mov	r9, r27
    130a:	08 c0       	rjmp	.+16     	; 0x131c <follow_path+0x198>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    130c:	8f e9       	ldi	r24, 0x9F	; 159
    130e:	80 0f       	add	r24, r16
    1310:	8a 31       	cpi	r24, 0x1A	; 26
    1312:	20 f4       	brcc	.+8      	; 0x131c <follow_path+0x198>
					b |= 1; c -= 0x20;
    1314:	69 2d       	mov	r22, r9
    1316:	61 60       	ori	r22, 0x01	; 1
    1318:	96 2e       	mov	r9, r22
    131a:	00 52       	subi	r16, 0x20	; 32
				}
			}
			sfn[i++] = c;
    131c:	df 01       	movw	r26, r30
    131e:	a2 0f       	add	r26, r18
    1320:	b3 1f       	adc	r27, r19
    1322:	0c 93       	st	X, r16
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    1328:	c6 01       	movw	r24, r12
    132a:	99 cf       	rjmp	.-206    	; 0x125e <follow_path+0xda>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    132c:	23 2b       	or	r18, r19
    132e:	09 f4       	brne	.+2      	; 0x1332 <follow_path+0x1ae>
    1330:	85 c0       	rjmp	.+266    	; 0x143c <follow_path+0x2b8>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1332:	90 81       	ld	r25, Z
    1334:	95 3e       	cpi	r25, 0xE5	; 229
    1336:	09 f4       	brne	.+2      	; 0x133a <follow_path+0x1b6>
    1338:	30 82       	st	Z, r3

	if (ni == 8) b <<= 2;
    133a:	48 30       	cpi	r20, 0x08	; 8
    133c:	51 05       	cpc	r21, r1
    133e:	11 f4       	brne	.+4      	; 0x1344 <follow_path+0x1c0>
    1340:	99 0c       	add	r9, r9
    1342:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    1344:	99 2d       	mov	r25, r9
    1346:	93 70       	andi	r25, 0x03	; 3
    1348:	91 30       	cpi	r25, 0x01	; 1
    134a:	09 f4       	brne	.+2      	; 0x134e <follow_path+0x1ca>
    134c:	80 61       	ori	r24, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    134e:	99 2d       	mov	r25, r9
    1350:	9c 70       	andi	r25, 0x0C	; 12
    1352:	94 30       	cpi	r25, 0x04	; 4
    1354:	09 f4       	brne	.+2      	; 0x1358 <follow_path+0x1d4>
    1356:	88 60       	ori	r24, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1358:	83 87       	std	Z+11, r24	; 0x0b
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    135a:	6b 2d       	mov	r22, r11
    135c:	78 2d       	mov	r23, r8
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	0e 94 c5 06 	call	0xd8a	; 0xd8a <dir_seek>
	if (res != FR_OK) return res;
    1366:	81 11       	cpse	r24, r1
    1368:	93 c0       	rjmp	.+294    	; 0x1490 <follow_path+0x30c>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    136a:	ab 81       	ldd	r26, Y+3	; 0x03
    136c:	bc 81       	ldd	r27, Y+4	; 0x04
    136e:	1e 96       	adiw	r26, 0x0e	; 14
    1370:	4d 91       	ld	r20, X+
    1372:	5d 91       	ld	r21, X+
    1374:	6d 91       	ld	r22, X+
    1376:	7c 91       	ld	r23, X
    1378:	51 97       	sbiw	r26, 0x11	; 17
    137a:	8d 91       	ld	r24, X+
    137c:	9c 91       	ld	r25, X
    137e:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
		if (res != FR_OK) break;
    1382:	81 11       	cpse	r24, r1
    1384:	88 c0       	rjmp	.+272    	; 0x1496 <follow_path+0x312>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1386:	eb 81       	ldd	r30, Y+3	; 0x03
    1388:	fc 81       	ldd	r31, Y+4	; 0x04
    138a:	62 89       	ldd	r22, Z+18	; 0x12
    138c:	73 89       	ldd	r23, Z+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    138e:	db 01       	movw	r26, r22
    1390:	9c 91       	ld	r25, X
    1392:	99 23       	and	r25, r25
    1394:	f1 f0       	breq	.+60     	; 0x13d2 <follow_path+0x24e>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1396:	1b 96       	adiw	r26, 0x0b	; 11
    1398:	9c 91       	ld	r25, X
    139a:	93 fd       	sbrc	r25, 3
    139c:	10 c0       	rjmp	.+32     	; 0x13be <follow_path+0x23a>
    139e:	c4 88       	ldd	r12, Z+20	; 0x14
    13a0:	d5 88       	ldd	r13, Z+21	; 0x15
    13a2:	fb 01       	movw	r30, r22
    13a4:	d6 01       	movw	r26, r12
    13a6:	ab 01       	movw	r20, r22
    13a8:	45 5f       	subi	r20, 0xF5	; 245
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <follow_path+0x232>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    13ae:	e4 17       	cp	r30, r20
    13b0:	f5 07       	cpc	r31, r21
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <follow_path+0x232>
    13b4:	7c c0       	rjmp	.+248    	; 0x14ae <follow_path+0x32a>
    13b6:	21 91       	ld	r18, Z+
    13b8:	9d 91       	ld	r25, X+
    13ba:	29 17       	cp	r18, r25
    13bc:	c1 f3       	breq	.-16     	; 0x13ae <follow_path+0x22a>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    13be:	6a 2d       	mov	r22, r10
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	0e 94 7e 07 	call	0xefc	; 0xefc <dir_next>
	} while (res == FR_OK);
    13c8:	88 23       	and	r24, r24
    13ca:	79 f2       	breq	.-98     	; 0x136a <follow_path+0x1e6>
    13cc:	cb 80       	ldd	r12, Y+3	; 0x03
    13ce:	dc 80       	ldd	r13, Y+4	; 0x04
    13d0:	64 c0       	rjmp	.+200    	; 0x149a <follow_path+0x316>
    13d2:	cb 80       	ldd	r12, Y+3	; 0x03
    13d4:	dc 80       	ldd	r13, Y+4	; 0x04
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    13d6:	d6 01       	movw	r26, r12
    13d8:	54 96       	adiw	r26, 0x14	; 20
    13da:	ed 91       	ld	r30, X+
    13dc:	fc 91       	ld	r31, X
    13de:	55 97       	sbiw	r26, 0x15	; 21
    13e0:	93 85       	ldd	r25, Z+11	; 0x0b
    13e2:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
    13e4:	91 11       	cpse	r25, r1
    13e6:	2c c0       	rjmp	.+88     	; 0x1440 <follow_path+0x2bc>
					res = FR_NO_PATH;
    13e8:	85 e0       	ldi	r24, 0x05	; 5
    13ea:	66 c0       	rjmp	.+204    	; 0x14b8 <follow_path+0x334>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    13ec:	fb 01       	movw	r30, r22
    13ee:	83 85       	ldd	r24, Z+11	; 0x0b
    13f0:	84 ff       	sbrs	r24, 4
    13f2:	28 c0       	rjmp	.+80     	; 0x1444 <follow_path+0x2c0>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    13f4:	85 89       	ldd	r24, Z+21	; 0x15
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	98 2f       	mov	r25, r24
    13fa:	88 27       	eor	r24, r24
    13fc:	24 89       	ldd	r18, Z+20	; 0x14
    13fe:	82 2b       	or	r24, r18
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	dc 01       	movw	r26, r24
    1406:	99 27       	eor	r25, r25
    1408:	88 27       	eor	r24, r24
    140a:	43 8d       	ldd	r20, Z+27	; 0x1b
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	54 2f       	mov	r21, r20
    1410:	44 27       	eor	r20, r20
    1412:	22 8d       	ldd	r18, Z+26	; 0x1a
    1414:	42 2b       	or	r20, r18
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	84 2b       	or	r24, r20
    141c:	95 2b       	or	r25, r21
    141e:	a6 2b       	or	r26, r22
    1420:	b7 2b       	or	r27, r23
    1422:	eb 81       	ldd	r30, Y+3	; 0x03
    1424:	fc 81       	ldd	r31, Y+4	; 0x04
    1426:	86 83       	std	Z+6, r24	; 0x06
    1428:	97 83       	std	Z+7, r25	; 0x07
    142a:	a0 87       	std	Z+8, r26	; 0x08
    142c:	b1 87       	std	Z+9, r27	; 0x09
		}
    142e:	ff ce       	rjmp	.-514    	; 0x122e <follow_path+0xaa>
	}
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
    1430:	86 e0       	ldi	r24, 0x06	; 6
    1432:	42 c0       	rjmp	.+132    	; 0x14b8 <follow_path+0x334>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1434:	86 e0       	ldi	r24, 0x06	; 6
    1436:	40 c0       	rjmp	.+128    	; 0x14b8 <follow_path+0x334>
    1438:	86 e0       	ldi	r24, 0x06	; 6
    143a:	3e c0       	rjmp	.+124    	; 0x14b8 <follow_path+0x334>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    143c:	86 e0       	ldi	r24, 0x06	; 6
    143e:	3c c0       	rjmp	.+120    	; 0x14b8 <follow_path+0x334>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    1440:	84 e0       	ldi	r24, 0x04	; 4
    1442:	3a c0       	rjmp	.+116    	; 0x14b8 <follow_path+0x334>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    1444:	85 e0       	ldi	r24, 0x05	; 5
    1446:	38 c0       	rjmp	.+112    	; 0x14b8 <follow_path+0x334>
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1448:	86 e0       	ldi	r24, 0x06	; 6
    144a:	36 c0       	rjmp	.+108    	; 0x14b8 <follow_path+0x334>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    144c:	86 e0       	ldi	r24, 0x06	; 6
    144e:	34 c0       	rjmp	.+104    	; 0x14b8 <follow_path+0x334>
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1450:	48 30       	cpi	r20, 0x08	; 8
    1452:	51 05       	cpc	r21, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <follow_path+0x2d4>
    1456:	1c cf       	rjmp	.-456    	; 0x1290 <follow_path+0x10c>
    1458:	f7 cf       	rjmp	.-18     	; 0x1448 <follow_path+0x2c4>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    145a:	60 2f       	mov	r22, r16
    145c:	70 e0       	ldi	r23, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    145e:	60 32       	cpi	r22, 0x20	; 32
    1460:	71 05       	cpc	r23, r1
    1462:	a1 f3       	breq	.-24     	; 0x144c <follow_path+0x2c8>
    1464:	d2 01       	movw	r26, r4
    1466:	44 cf       	rjmp	.-376    	; 0x12f0 <follow_path+0x16c>
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    1468:	6f e7       	ldi	r22, 0x7F	; 127
    146a:	60 0f       	add	r22, r16
    146c:	6e 37       	cpi	r22, 0x7E	; 126
    146e:	08 f4       	brcc	.+2      	; 0x1472 <follow_path+0x2ee>
    1470:	1e cf       	rjmp	.-452    	; 0x12ae <follow_path+0x12a>
    1472:	f3 cf       	rjmp	.-26     	; 0x145a <follow_path+0x2d6>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1474:	8f eb       	ldi	r24, 0xBF	; 191
    1476:	80 0f       	add	r24, r16
    1478:	8a 31       	cpi	r24, 0x1A	; 26
    147a:	08 f4       	brcc	.+2      	; 0x147e <follow_path+0x2fa>
    147c:	43 cf       	rjmp	.-378    	; 0x1304 <follow_path+0x180>
    147e:	46 cf       	rjmp	.-372    	; 0x130c <follow_path+0x188>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1480:	ec 0c       	add	r14, r12
    1482:	fd 1c       	adc	r15, r13
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1484:	8a 2d       	mov	r24, r10
    1486:	52 cf       	rjmp	.-348    	; 0x132c <follow_path+0x1a8>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1488:	ec 0c       	add	r14, r12
    148a:	fd 1c       	adc	r15, r13
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    148c:	84 e0       	ldi	r24, 0x04	; 4
    148e:	4e cf       	rjmp	.-356    	; 0x132c <follow_path+0x1a8>
    1490:	cb 80       	ldd	r12, Y+3	; 0x03
    1492:	dc 80       	ldd	r13, Y+4	; 0x04
    1494:	02 c0       	rjmp	.+4      	; 0x149a <follow_path+0x316>
    1496:	cb 80       	ldd	r12, Y+3	; 0x03
    1498:	dc 80       	ldd	r13, Y+4	; 0x04
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    149a:	d6 01       	movw	r26, r12
    149c:	54 96       	adiw	r26, 0x14	; 20
    149e:	ed 91       	ld	r30, X+
    14a0:	fc 91       	ld	r31, X
    14a2:	55 97       	sbiw	r26, 0x15	; 21
    14a4:	93 85       	ldd	r25, Z+11	; 0x0b
    14a6:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
    14a8:	84 30       	cpi	r24, 0x04	; 4
    14aa:	31 f4       	brne	.+12     	; 0x14b8 <follow_path+0x334>
    14ac:	9b cf       	rjmp	.-202    	; 0x13e4 <follow_path+0x260>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    14ae:	d6 01       	movw	r26, r12
    14b0:	1b 96       	adiw	r26, 0x0b	; 11
    14b2:	9c 91       	ld	r25, X
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    14b4:	92 ff       	sbrs	r25, 2
    14b6:	9a cf       	rjmp	.-204    	; 0x13ec <follow_path+0x268>
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	bf 90       	pop	r11
    14d2:	af 90       	pop	r10
    14d4:	9f 90       	pop	r9
    14d6:	8f 90       	pop	r8
    14d8:	7f 90       	pop	r7
    14da:	6f 90       	pop	r6
    14dc:	5f 90       	pop	r5
    14de:	4f 90       	pop	r4
    14e0:	3f 90       	pop	r3
    14e2:	2f 90       	pop	r2
    14e4:	08 95       	ret

000014e6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <dir_seek>
    14fa:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    14fc:	81 11       	cpse	r24, r1
    14fe:	51 c0       	rjmp	.+162    	; 0x15a2 <dir_register+0xbc>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    1500:	d8 01       	movw	r26, r16
    1502:	1e 96       	adiw	r26, 0x0e	; 14
    1504:	4d 91       	ld	r20, X+
    1506:	5d 91       	ld	r21, X+
    1508:	6d 91       	ld	r22, X+
    150a:	7c 91       	ld	r23, X
    150c:	51 97       	sbiw	r26, 0x11	; 17
    150e:	8d 91       	ld	r24, X+
    1510:	9c 91       	ld	r25, X
    1512:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
    1516:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    1518:	81 11       	cpse	r24, r1
    151a:	43 c0       	rjmp	.+134    	; 0x15a2 <dir_register+0xbc>
			c = *dj->dir;
    151c:	d8 01       	movw	r26, r16
    151e:	52 96       	adiw	r26, 0x12	; 18
    1520:	ed 91       	ld	r30, X+
    1522:	fc 91       	ld	r31, X
    1524:	53 97       	sbiw	r26, 0x13	; 19
    1526:	80 81       	ld	r24, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    1528:	85 3e       	cpi	r24, 0xE5	; 229
    152a:	69 f1       	breq	.+90     	; 0x1586 <dir_register+0xa0>
    152c:	88 23       	and	r24, r24
    152e:	59 f1       	breq	.+86     	; 0x1586 <dir_register+0xa0>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    1530:	61 e0       	ldi	r22, 0x01	; 1
    1532:	c8 01       	movw	r24, r16
    1534:	0e 94 7e 07 	call	0xefc	; 0xefc <dir_next>
    1538:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    153a:	88 23       	and	r24, r24
    153c:	09 f3       	breq	.-62     	; 0x1500 <dir_register+0x1a>
    153e:	31 c0       	rjmp	.+98     	; 0x15a2 <dir_register+0xbc>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    1540:	f8 01       	movw	r30, r16
    1542:	e2 88       	ldd	r14, Z+18	; 0x12
    1544:	f3 88       	ldd	r15, Z+19	; 0x13
    1546:	f7 01       	movw	r30, r14
    1548:	97 01       	movw	r18, r14
    154a:	20 5e       	subi	r18, 0xE0	; 224
    154c:	3f 4f       	sbci	r19, 0xFF	; 255

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    154e:	11 92       	st	Z+, r1
    1550:	e2 17       	cp	r30, r18
    1552:	f3 07       	cpc	r31, r19
    1554:	e1 f7       	brne	.-8      	; 0x154e <dir_register+0x68>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1556:	d8 01       	movw	r26, r16
    1558:	54 96       	adiw	r26, 0x14	; 20
    155a:	6d 91       	ld	r22, X+
    155c:	7c 91       	ld	r23, X
    155e:	55 97       	sbiw	r26, 0x15	; 21
    1560:	4b e0       	ldi	r20, 0x0B	; 11
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	c7 01       	movw	r24, r14
    1566:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    156a:	d8 01       	movw	r26, r16
    156c:	54 96       	adiw	r26, 0x14	; 20
    156e:	ed 91       	ld	r30, X+
    1570:	fc 91       	ld	r31, X
    1572:	55 97       	sbiw	r26, 0x15	; 21
    1574:	83 85       	ldd	r24, Z+11	; 0x0b
    1576:	88 71       	andi	r24, 0x18	; 24
    1578:	f7 01       	movw	r30, r14
    157a:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    157c:	ed 91       	ld	r30, X+
    157e:	fc 91       	ld	r31, X
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	84 83       	std	Z+4, r24	; 0x04
    1584:	0e c0       	rjmp	.+28     	; 0x15a2 <dir_register+0xbc>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    1586:	d8 01       	movw	r26, r16
    1588:	1e 96       	adiw	r26, 0x0e	; 14
    158a:	4d 91       	ld	r20, X+
    158c:	5d 91       	ld	r21, X+
    158e:	6d 91       	ld	r22, X+
    1590:	7c 91       	ld	r23, X
    1592:	51 97       	sbiw	r26, 0x11	; 17
    1594:	8d 91       	ld	r24, X+
    1596:	9c 91       	ld	r25, X
    1598:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
    159c:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    159e:	88 23       	and	r24, r24
    15a0:	79 f2       	breq	.-98     	; 0x1540 <dir_register+0x5a>
			dj->fs->wflag = 1;
		}
	}

	return res;
}
    15a2:	8c 2f       	mov	r24, r28
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	08 95       	ret

000015b0 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    15b0:	2f 92       	push	r2
    15b2:	3f 92       	push	r3
    15b4:	4f 92       	push	r4
    15b6:	5f 92       	push	r5
    15b8:	6f 92       	push	r6
    15ba:	7f 92       	push	r7
    15bc:	8f 92       	push	r8
    15be:	9f 92       	push	r9
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	27 97       	sbiw	r28, 0x07	; 7
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    15e4:	dc 01       	movw	r26, r24
    15e6:	ed 91       	ld	r30, X+
    15e8:	fc 91       	ld	r31, X
    15ea:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    15ec:	20 81       	ld	r18, Z
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	20 53       	subi	r18, 0x30	; 48
    15f2:	31 09       	sbc	r19, r1
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    15f4:	2a 30       	cpi	r18, 0x0A	; 10
    15f6:	31 05       	cpc	r19, r1
    15f8:	48 f4       	brcc	.+18     	; 0x160c <chk_mounted+0x5c>
    15fa:	51 81       	ldd	r21, Z+1	; 0x01
    15fc:	5a 33       	cpi	r21, 0x3A	; 58
    15fe:	31 f4       	brne	.+12     	; 0x160c <chk_mounted+0x5c>
		p += 2; *path = p;			/* Return pointer to the path name */
    1600:	32 96       	adiw	r30, 0x02	; 2
    1602:	ed 93       	st	X+, r30
    1604:	fc 93       	st	X, r31
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    1606:	23 2b       	or	r18, r19
    1608:	09 f0       	breq	.+2      	; 0x160c <chk_mounted+0x5c>
    160a:	36 c2       	rjmp	.+1132   	; 0x1a78 <chk_mounted+0x4c8>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    160c:	e0 91 ac 01 	lds	r30, 0x01AC
    1610:	f0 91 ad 01 	lds	r31, 0x01AD
    1614:	ff 83       	std	Y+7, r31	; 0x07
    1616:	ee 83       	std	Y+6, r30	; 0x06
    1618:	db 01       	movw	r26, r22
    161a:	ed 93       	st	X+, r30
    161c:	fc 93       	st	X, r31
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    161e:	30 97       	sbiw	r30, 0x00	; 0
    1620:	09 f4       	brne	.+2      	; 0x1624 <chk_mounted+0x74>
    1622:	2c c2       	rjmp	.+1112   	; 0x1a7c <chk_mounted+0x4cc>
    1624:	14 2f       	mov	r17, r20

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    1626:	80 81       	ld	r24, Z
    1628:	88 23       	and	r24, r24
    162a:	61 f0       	breq	.+24     	; 0x1644 <chk_mounted+0x94>
		stat = disk_status(fs->drive);
    162c:	81 81       	ldd	r24, Z+1	; 0x01
    162e:	0e 94 67 00 	call	0xce	; 0xce <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    1632:	80 fd       	sbrc	r24, 0
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    1636:	11 23       	and	r17, r17
    1638:	09 f4       	brne	.+2      	; 0x163c <chk_mounted+0x8c>
    163a:	22 c2       	rjmp	.+1092   	; 0x1a80 <chk_mounted+0x4d0>
    163c:	82 ff       	sbrs	r24, 2
    163e:	22 c2       	rjmp	.+1092   	; 0x1a84 <chk_mounted+0x4d4>
				return FR_WRITE_PROTECTED;
    1640:	8a e0       	ldi	r24, 0x0A	; 10
    1642:	cf c2       	rjmp	.+1438   	; 0x1be2 <chk_mounted+0x632>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    1644:	ee 81       	ldd	r30, Y+6	; 0x06
    1646:	ff 81       	ldd	r31, Y+7	; 0x07
    1648:	10 82       	st	Z, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    164a:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	0e 94 53 00 	call	0xa6	; 0xa6 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    1652:	80 fd       	sbrc	r24, 0
    1654:	19 c2       	rjmp	.+1074   	; 0x1a88 <chk_mounted+0x4d8>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    1656:	11 23       	and	r17, r17
    1658:	11 f0       	breq	.+4      	; 0x165e <chk_mounted+0xae>
    165a:	82 fd       	sbrc	r24, 2
    165c:	17 c2       	rjmp	.+1070   	; 0x1a8c <chk_mounted+0x4dc>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	ba 01       	movw	r22, r20
    1664:	8e 81       	ldd	r24, Y+6	; 0x06
    1666:	9f 81       	ldd	r25, Y+7	; 0x07
    1668:	0e 94 18 02 	call	0x430	; 0x430 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	c1 f5       	brne	.+112    	; 0x16e0 <chk_mounted+0x130>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
    1670:	ee 81       	ldd	r30, Y+6	; 0x06
    1672:	ff 81       	ldd	r31, Y+7	; 0x07
    1674:	e0 51       	subi	r30, 0x10	; 16
    1676:	fe 4f       	sbci	r31, 0xFE	; 254
    1678:	80 81       	ld	r24, Z
    167a:	88 23       	and	r24, r24
    167c:	09 f4       	brne	.+2      	; 0x1680 <chk_mounted+0xd0>
    167e:	08 c2       	rjmp	.+1040   	; 0x1a90 <chk_mounted+0x4e0>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    1680:	ee 81       	ldd	r30, Y+6	; 0x06
    1682:	ff 81       	ldd	r31, Y+7	; 0x07
    1684:	e9 50       	subi	r30, 0x09	; 9
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	80 81       	ld	r24, Z
    168a:	ee 81       	ldd	r30, Y+6	; 0x06
    168c:	ff 81       	ldd	r31, Y+7	; 0x07
    168e:	ea 50       	subi	r30, 0x0A	; 10
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	c0 80       	ld	r12, Z
    1694:	d1 2c       	mov	r13, r1
    1696:	e1 2c       	mov	r14, r1
    1698:	f1 2c       	mov	r15, r1
    169a:	76 01       	movw	r14, r12
    169c:	dd 24       	eor	r13, r13
    169e:	cc 24       	eor	r12, r12
    16a0:	f8 2a       	or	r15, r24
    16a2:	ee 81       	ldd	r30, Y+6	; 0x06
    16a4:	ff 81       	ldd	r31, Y+7	; 0x07
    16a6:	ec 50       	subi	r30, 0x0C	; 12
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	80 81       	ld	r24, Z
    16ac:	a7 01       	movw	r20, r14
    16ae:	96 01       	movw	r18, r12
    16b0:	28 2b       	or	r18, r24
    16b2:	da 01       	movw	r26, r20
    16b4:	c9 01       	movw	r24, r18
    16b6:	ee 81       	ldd	r30, Y+6	; 0x06
    16b8:	ff 81       	ldd	r31, Y+7	; 0x07
    16ba:	eb 50       	subi	r30, 0x0B	; 11
    16bc:	fe 4f       	sbci	r31, 0xFE	; 254
    16be:	c0 80       	ld	r12, Z
    16c0:	d1 2c       	mov	r13, r1
    16c2:	dc 2c       	mov	r13, r12
    16c4:	cc 24       	eor	r12, r12
    16c6:	e1 2c       	mov	r14, r1
    16c8:	f1 2c       	mov	r15, r1
    16ca:	c8 2a       	or	r12, r24
    16cc:	d9 2a       	or	r13, r25
    16ce:	ea 2a       	or	r14, r26
    16d0:	fb 2a       	or	r15, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    16d2:	b7 01       	movw	r22, r14
    16d4:	a6 01       	movw	r20, r12
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	9f 81       	ldd	r25, Y+7	; 0x07
    16da:	0e 94 18 02 	call	0x430	; 0x430 <check_fs>
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <chk_mounted+0x136>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    16e0:	c1 2c       	mov	r12, r1
    16e2:	d1 2c       	mov	r13, r1
    16e4:	76 01       	movw	r14, r12
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	09 f4       	brne	.+2      	; 0x16ec <chk_mounted+0x13c>
    16ea:	d4 c1       	rjmp	.+936    	; 0x1a94 <chk_mounted+0x4e4>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    16ec:	81 11       	cpse	r24, r1
    16ee:	d4 c1       	rjmp	.+936    	; 0x1a98 <chk_mounted+0x4e8>
    16f0:	ae 81       	ldd	r26, Y+6	; 0x06
    16f2:	bf 81       	ldd	r27, Y+7	; 0x07
    16f4:	da 96       	adiw	r26, 0x3a	; 58
    16f6:	8c 91       	ld	r24, X
    16f8:	da 97       	sbiw	r26, 0x3a	; 58
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	98 2f       	mov	r25, r24
    16fe:	88 27       	eor	r24, r24
    1700:	d9 96       	adiw	r26, 0x39	; 57
    1702:	2c 91       	ld	r18, X
    1704:	82 2b       	or	r24, r18
    1706:	81 15       	cp	r24, r1
    1708:	92 40       	sbci	r25, 0x02	; 2
    170a:	09 f0       	breq	.+2      	; 0x170e <chk_mounted+0x15e>
    170c:	c7 c1       	rjmp	.+910    	; 0x1a9c <chk_mounted+0x4ec>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    170e:	ee 81       	ldd	r30, Y+6	; 0x06
    1710:	ff 81       	ldd	r31, Y+7	; 0x07
    1712:	eb 5b       	subi	r30, 0xBB	; 187
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	20 81       	ld	r18, Z
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	32 2f       	mov	r19, r18
    171c:	22 27       	eor	r18, r18
    171e:	ee 81       	ldd	r30, Y+6	; 0x06
    1720:	ff 81       	ldd	r31, Y+7	; 0x07
    1722:	ec 5b       	subi	r30, 0xBC	; 188
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	28 2b       	or	r18, r24
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    172e:	21 15       	cp	r18, r1
    1730:	31 05       	cpc	r19, r1
    1732:	41 05       	cpc	r20, r1
    1734:	51 05       	cpc	r21, r1
    1736:	41 f5       	brne	.+80     	; 0x1788 <chk_mounted+0x1d8>
    1738:	ee 81       	ldd	r30, Y+6	; 0x06
    173a:	ff 81       	ldd	r31, Y+7	; 0x07
    173c:	eb 5a       	subi	r30, 0xAB	; 171
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 81       	ld	r24, Z
    1742:	ee 81       	ldd	r30, Y+6	; 0x06
    1744:	ff 81       	ldd	r31, Y+7	; 0x07
    1746:	ec 5a       	subi	r30, 0xAC	; 172
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	20 81       	ld	r18, Z
    174c:	42 2f       	mov	r20, r18
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	ba 01       	movw	r22, r20
    1756:	55 27       	eor	r21, r21
    1758:	44 27       	eor	r20, r20
    175a:	78 2b       	or	r23, r24
    175c:	ee 81       	ldd	r30, Y+6	; 0x06
    175e:	ff 81       	ldd	r31, Y+7	; 0x07
    1760:	ee 5a       	subi	r30, 0xAE	; 174
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	48 2b       	or	r20, r24
    1768:	ee 81       	ldd	r30, Y+6	; 0x06
    176a:	ff 81       	ldd	r31, Y+7	; 0x07
    176c:	ed 5a       	subi	r30, 0xAD	; 173
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	98 2f       	mov	r25, r24
    1776:	88 27       	eor	r24, r24
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	9a 01       	movw	r18, r20
    177e:	ab 01       	movw	r20, r22
    1780:	28 2b       	or	r18, r24
    1782:	39 2b       	or	r19, r25
    1784:	4a 2b       	or	r20, r26
    1786:	5b 2b       	or	r21, r27
	fs->sects_fat = fsize;
    1788:	ee 81       	ldd	r30, Y+6	; 0x06
    178a:	ff 81       	ldd	r31, Y+7	; 0x07
    178c:	26 8b       	std	Z+22, r18	; 0x16
    178e:	37 8b       	std	Z+23, r19	; 0x17
    1790:	40 8f       	std	Z+24, r20	; 0x18
    1792:	51 8f       	std	Z+25, r21	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    1794:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1796:	a3 83       	std	Z+3, r26	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__muluhisi3>
    179e:	2b 01       	movw	r4, r22
    17a0:	3c 01       	movw	r6, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    17a2:	05 ad       	ldd	r16, Z+61	; 0x3d
    17a4:	10 e0       	ldi	r17, 0x00	; 0
    17a6:	10 2f       	mov	r17, r16
    17a8:	00 27       	eor	r16, r16
    17aa:	84 ad       	ldd	r24, Z+60	; 0x3c
    17ac:	08 2b       	or	r16, r24
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	46 01       	movw	r8, r12
    17b4:	57 01       	movw	r10, r14
    17b6:	80 0e       	add	r8, r16
    17b8:	91 1e       	adc	r9, r17
    17ba:	a2 1e       	adc	r10, r18
    17bc:	b3 1e       	adc	r11, r19
    17be:	86 8e       	std	Z+30, r8	; 0x1e
    17c0:	97 8e       	std	Z+31, r9	; 0x1f
    17c2:	a0 a2       	std	Z+32, r10	; 0x20
    17c4:	b1 a2       	std	Z+33, r11	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    17c6:	b3 ad       	ldd	r27, Z+59	; 0x3b
    17c8:	bd 83       	std	Y+5, r27	; 0x05
    17ca:	b2 83       	std	Z+2, r27	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    17cc:	e0 5c       	subi	r30, 0xC0	; 192
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	98 2f       	mov	r25, r24
    17d6:	88 27       	eor	r24, r24
    17d8:	ae 81       	ldd	r26, Y+6	; 0x06
    17da:	bf 81       	ldd	r27, Y+7	; 0x07
    17dc:	df 96       	adiw	r26, 0x3f	; 63
    17de:	4c 91       	ld	r20, X
    17e0:	df 97       	sbiw	r26, 0x3f	; 63
    17e2:	1c 01       	movw	r2, r24
    17e4:	24 2a       	or	r2, r20
    17e6:	19 96       	adiw	r26, 0x09	; 9
    17e8:	3c 92       	st	X, r3
    17ea:	2e 92       	st	-X, r2
    17ec:	18 97       	sbiw	r26, 0x08	; 8
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    17ee:	fd 01       	movw	r30, r26
    17f0:	ee 5b       	subi	r30, 0xBE	; 190
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	58 2f       	mov	r21, r24
    17fa:	44 27       	eor	r20, r20
    17fc:	31 97       	sbiw	r30, 0x01	; 1
    17fe:	80 81       	ld	r24, Z
    1800:	48 2b       	or	r20, r24
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	70 e0       	ldi	r23, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    1806:	41 15       	cp	r20, r1
    1808:	51 05       	cpc	r21, r1
    180a:	61 05       	cpc	r22, r1
    180c:	71 05       	cpc	r23, r1
    180e:	f1 f4       	brne	.+60     	; 0x184c <chk_mounted+0x29c>
    1810:	70 96       	adiw	r30, 0x10	; 16
    1812:	90 81       	ld	r25, Z
    1814:	31 97       	sbiw	r30, 0x01	; 1
    1816:	40 81       	ld	r20, Z
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	ba 01       	movw	r22, r20
    1820:	55 27       	eor	r21, r21
    1822:	44 27       	eor	r20, r20
    1824:	79 2b       	or	r23, r25
    1826:	32 97       	sbiw	r30, 0x02	; 2
    1828:	e0 81       	ld	r30, Z
    182a:	db 01       	movw	r26, r22
    182c:	ca 01       	movw	r24, r20
    182e:	8e 2b       	or	r24, r30
    1830:	ee 81       	ldd	r30, Y+6	; 0x06
    1832:	ff 81       	ldd	r31, Y+7	; 0x07
    1834:	e1 5b       	subi	r30, 0xB1	; 177
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	40 81       	ld	r20, Z
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	54 2f       	mov	r21, r20
    183e:	44 27       	eor	r20, r20
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	48 2b       	or	r20, r24
    1846:	59 2b       	or	r21, r25
    1848:	6a 2b       	or	r22, r26
    184a:	7b 2b       	or	r23, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
    184c:	36 94       	lsr	r3
    184e:	27 94       	ror	r2
    1850:	36 94       	lsr	r3
    1852:	27 94       	ror	r2
    1854:	36 94       	lsr	r3
    1856:	27 94       	ror	r2
    1858:	36 94       	lsr	r3
    185a:	27 94       	ror	r2
    185c:	c1 01       	movw	r24, r2
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	ab 83       	std	Y+3, r26	; 0x03
    1868:	bc 83       	std	Y+4, r27	; 0x04
    186a:	db 01       	movw	r26, r22
    186c:	ca 01       	movw	r24, r20
    186e:	80 1b       	sub	r24, r16
    1870:	91 0b       	sbc	r25, r17
    1872:	a2 0b       	sbc	r26, r18
    1874:	b3 0b       	sbc	r27, r19
    1876:	84 19       	sub	r24, r4
    1878:	95 09       	sbc	r25, r5
    187a:	a6 09       	sbc	r26, r6
    187c:	b7 09       	sbc	r27, r7
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	29 81       	ldd	r18, Y+1	; 0x01
    1884:	3a 81       	ldd	r19, Y+2	; 0x02
    1886:	4b 81       	ldd	r20, Y+3	; 0x03
    1888:	5c 81       	ldd	r21, Y+4	; 0x04
    188a:	62 1b       	sub	r22, r18
    188c:	73 0b       	sbc	r23, r19
    188e:	84 0b       	sbc	r24, r20
    1890:	95 0b       	sbc	r25, r21
		) / fs->csize + 2;
    1892:	ad 81       	ldd	r26, Y+5	; 0x05
    1894:	2a 2f       	mov	r18, r26
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    18a0:	ba 01       	movw	r22, r20
    18a2:	a9 01       	movw	r20, r18
    18a4:	4e 5f       	subi	r20, 0xFE	; 254
    18a6:	5f 4f       	sbci	r21, 0xFF	; 255
    18a8:	6f 4f       	sbci	r22, 0xFF	; 255
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	ee 81       	ldd	r30, Y+6	; 0x06
    18ae:	ff 81       	ldd	r31, Y+7	; 0x07
    18b0:	42 8f       	std	Z+26, r20	; 0x1a
    18b2:	53 8f       	std	Z+27, r21	; 0x1b
    18b4:	64 8f       	std	Z+28, r22	; 0x1c
    18b6:	75 8f       	std	Z+29, r23	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    18b8:	47 3f       	cpi	r20, 0xF7	; 247
    18ba:	ff e0       	ldi	r31, 0x0F	; 15
    18bc:	5f 07       	cpc	r21, r31
    18be:	61 05       	cpc	r22, r1
    18c0:	71 05       	cpc	r23, r1
    18c2:	08 f4       	brcc	.+2      	; 0x18c6 <chk_mounted+0x316>
    18c4:	17 c1       	rjmp	.+558    	; 0x1af4 <chk_mounted+0x544>
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	16 c1       	rjmp	.+556    	; 0x1af6 <chk_mounted+0x546>
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    18ca:	ee 81       	ldd	r30, Y+6	; 0x06
    18cc:	ff 81       	ldd	r31, Y+7	; 0x07
    18ce:	e3 5d       	subi	r30, 0xD3	; 211
    18d0:	fd 4f       	sbci	r31, 0xFD	; 253
    18d2:	80 81       	ld	r24, Z
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	98 2f       	mov	r25, r24
    18d8:	88 27       	eor	r24, r24
    18da:	ee 81       	ldd	r30, Y+6	; 0x06
    18dc:	ff 81       	ldd	r31, Y+7	; 0x07
    18de:	e4 5d       	subi	r30, 0xD4	; 212
    18e0:	fd 4f       	sbci	r31, 0xFD	; 253
    18e2:	20 81       	ld	r18, Z
    18e4:	82 2b       	or	r24, r18
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    18e6:	85 35       	cpi	r24, 0x55	; 85
    18e8:	9a 4a       	sbci	r25, 0xAA	; 170
    18ea:	09 f0       	breq	.+2      	; 0x18ee <chk_mounted+0x33e>
    18ec:	ab c0       	rjmp	.+342    	; 0x1a44 <chk_mounted+0x494>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    18ee:	ae 81       	ldd	r26, Y+6	; 0x06
    18f0:	bf 81       	ldd	r27, Y+7	; 0x07
    18f2:	d1 96       	adiw	r26, 0x31	; 49
    18f4:	2c 91       	ld	r18, X
    18f6:	d1 97       	sbiw	r26, 0x31	; 49
    18f8:	d0 96       	adiw	r26, 0x30	; 48
    18fa:	8c 91       	ld	r24, X
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e0       	ldi	r26, 0x00	; 0
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	dc 01       	movw	r26, r24
    1904:	99 27       	eor	r25, r25
    1906:	88 27       	eor	r24, r24
    1908:	b2 2b       	or	r27, r18
    190a:	ee 81       	ldd	r30, Y+6	; 0x06
    190c:	ff 81       	ldd	r31, Y+7	; 0x07
    190e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1910:	ac 01       	movw	r20, r24
    1912:	bd 01       	movw	r22, r26
    1914:	42 2b       	or	r20, r18
    1916:	27 a5       	ldd	r18, Z+47	; 0x2f
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	92 2f       	mov	r25, r18
    191c:	88 27       	eor	r24, r24
    191e:	a0 e0       	ldi	r26, 0x00	; 0
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	84 2b       	or	r24, r20
    1924:	95 2b       	or	r25, r21
    1926:	a6 2b       	or	r26, r22
    1928:	b7 2b       	or	r27, r23
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    192a:	82 35       	cpi	r24, 0x52	; 82
    192c:	92 45       	sbci	r25, 0x52	; 82
    192e:	a1 46       	sbci	r26, 0x61	; 97
    1930:	b1 44       	sbci	r27, 0x41	; 65
    1932:	09 f0       	breq	.+2      	; 0x1936 <chk_mounted+0x386>
    1934:	89 c0       	rjmp	.+274    	; 0x1a48 <chk_mounted+0x498>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    1936:	ee 81       	ldd	r30, Y+6	; 0x06
    1938:	ff 81       	ldd	r31, Y+7	; 0x07
    193a:	eb 5e       	subi	r30, 0xEB	; 235
    193c:	fd 4f       	sbci	r31, 0xFD	; 253
    193e:	20 81       	ld	r18, Z
    1940:	ee 81       	ldd	r30, Y+6	; 0x06
    1942:	ff 81       	ldd	r31, Y+7	; 0x07
    1944:	ec 5e       	subi	r30, 0xEC	; 236
    1946:	fd 4f       	sbci	r31, 0xFD	; 253
    1948:	80 81       	ld	r24, Z
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a0 e0       	ldi	r26, 0x00	; 0
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	dc 01       	movw	r26, r24
    1952:	99 27       	eor	r25, r25
    1954:	88 27       	eor	r24, r24
    1956:	b2 2b       	or	r27, r18
    1958:	ee 81       	ldd	r30, Y+6	; 0x06
    195a:	ff 81       	ldd	r31, Y+7	; 0x07
    195c:	ee 5e       	subi	r30, 0xEE	; 238
    195e:	fd 4f       	sbci	r31, 0xFD	; 253
    1960:	20 81       	ld	r18, Z
    1962:	ac 01       	movw	r20, r24
    1964:	bd 01       	movw	r22, r26
    1966:	42 2b       	or	r20, r18
    1968:	ee 81       	ldd	r30, Y+6	; 0x06
    196a:	ff 81       	ldd	r31, Y+7	; 0x07
    196c:	ed 5e       	subi	r30, 0xED	; 237
    196e:	fd 4f       	sbci	r31, 0xFD	; 253
    1970:	20 81       	ld	r18, Z
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	92 2f       	mov	r25, r18
    1976:	88 27       	eor	r24, r24
    1978:	a0 e0       	ldi	r26, 0x00	; 0
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	84 2b       	or	r24, r20
    197e:	95 2b       	or	r25, r21
    1980:	a6 2b       	or	r26, r22
    1982:	b7 2b       	or	r27, r23
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1984:	82 37       	cpi	r24, 0x72	; 114
    1986:	92 47       	sbci	r25, 0x72	; 114
    1988:	a1 44       	sbci	r26, 0x41	; 65
    198a:	b1 46       	sbci	r27, 0x61	; 97
    198c:	09 f0       	breq	.+2      	; 0x1990 <chk_mounted+0x3e0>
    198e:	5e c0       	rjmp	.+188    	; 0x1a4c <chk_mounted+0x49c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1990:	ee 81       	ldd	r30, Y+6	; 0x06
    1992:	ff 81       	ldd	r31, Y+7	; 0x07
    1994:	e3 5e       	subi	r30, 0xE3	; 227
    1996:	fd 4f       	sbci	r31, 0xFD	; 253
    1998:	20 81       	ld	r18, Z
    199a:	ee 81       	ldd	r30, Y+6	; 0x06
    199c:	ff 81       	ldd	r31, Y+7	; 0x07
    199e:	e4 5e       	subi	r30, 0xE4	; 228
    19a0:	fd 4f       	sbci	r31, 0xFD	; 253
    19a2:	80 81       	ld	r24, Z
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 e0       	ldi	r26, 0x00	; 0
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	dc 01       	movw	r26, r24
    19ac:	99 27       	eor	r25, r25
    19ae:	88 27       	eor	r24, r24
    19b0:	b2 2b       	or	r27, r18
    19b2:	ee 81       	ldd	r30, Y+6	; 0x06
    19b4:	ff 81       	ldd	r31, Y+7	; 0x07
    19b6:	e6 5e       	subi	r30, 0xE6	; 230
    19b8:	fd 4f       	sbci	r31, 0xFD	; 253
    19ba:	20 81       	ld	r18, Z
    19bc:	ac 01       	movw	r20, r24
    19be:	bd 01       	movw	r22, r26
    19c0:	42 2b       	or	r20, r18
    19c2:	ee 81       	ldd	r30, Y+6	; 0x06
    19c4:	ff 81       	ldd	r31, Y+7	; 0x07
    19c6:	e5 5e       	subi	r30, 0xE5	; 229
    19c8:	fd 4f       	sbci	r31, 0xFD	; 253
    19ca:	20 81       	ld	r18, Z
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	92 2f       	mov	r25, r18
    19d0:	88 27       	eor	r24, r24
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	84 2b       	or	r24, r20
    19d8:	95 2b       	or	r25, r21
    19da:	a6 2b       	or	r26, r22
    19dc:	b7 2b       	or	r27, r23
    19de:	ee 81       	ldd	r30, Y+6	; 0x06
    19e0:	ff 81       	ldd	r31, Y+7	; 0x07
    19e2:	82 87       	std	Z+10, r24	; 0x0a
    19e4:	93 87       	std	Z+11, r25	; 0x0b
    19e6:	a4 87       	std	Z+12, r26	; 0x0c
    19e8:	b5 87       	std	Z+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    19ea:	e7 5e       	subi	r30, 0xE7	; 231
    19ec:	fd 4f       	sbci	r31, 0xFD	; 253
    19ee:	20 81       	ld	r18, Z
    19f0:	ee 81       	ldd	r30, Y+6	; 0x06
    19f2:	ff 81       	ldd	r31, Y+7	; 0x07
    19f4:	e8 5e       	subi	r30, 0xE8	; 232
    19f6:	fd 4f       	sbci	r31, 0xFD	; 253
    19f8:	80 81       	ld	r24, Z
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	dc 01       	movw	r26, r24
    1a02:	99 27       	eor	r25, r25
    1a04:	88 27       	eor	r24, r24
    1a06:	b2 2b       	or	r27, r18
    1a08:	ee 81       	ldd	r30, Y+6	; 0x06
    1a0a:	ff 81       	ldd	r31, Y+7	; 0x07
    1a0c:	ea 5e       	subi	r30, 0xEA	; 234
    1a0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a10:	20 81       	ld	r18, Z
    1a12:	ac 01       	movw	r20, r24
    1a14:	bd 01       	movw	r22, r26
    1a16:	42 2b       	or	r20, r18
    1a18:	ee 81       	ldd	r30, Y+6	; 0x06
    1a1a:	ff 81       	ldd	r31, Y+7	; 0x07
    1a1c:	e9 5e       	subi	r30, 0xE9	; 233
    1a1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a20:	20 81       	ld	r18, Z
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	92 2f       	mov	r25, r18
    1a26:	88 27       	eor	r24, r24
    1a28:	a0 e0       	ldi	r26, 0x00	; 0
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	84 2b       	or	r24, r20
    1a2e:	95 2b       	or	r25, r21
    1a30:	a6 2b       	or	r26, r22
    1a32:	b7 2b       	or	r27, r23
    1a34:	ee 81       	ldd	r30, Y+6	; 0x06
    1a36:	ff 81       	ldd	r31, Y+7	; 0x07
    1a38:	86 87       	std	Z+14, r24	; 0x0e
    1a3a:	97 87       	std	Z+15, r25	; 0x0f
    1a3c:	a0 8b       	std	Z+16, r26	; 0x10
    1a3e:	b1 8b       	std	Z+17, r27	; 0x11
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <chk_mounted+0x49e>
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <chk_mounted+0x49e>
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <chk_mounted+0x49e>
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    1a4e:	ae 81       	ldd	r26, Y+6	; 0x06
    1a50:	bf 81       	ldd	r27, Y+7	; 0x07
    1a52:	8c 93       	st	X, r24
	fs->winsect = 0;		/* Invalidate sector cache */
    1a54:	fd 01       	movw	r30, r26
    1a56:	12 a6       	std	Z+42, r1	; 0x2a
    1a58:	13 a6       	std	Z+43, r1	; 0x2b
    1a5a:	14 a6       	std	Z+44, r1	; 0x2c
    1a5c:	15 a6       	std	Z+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    1a5e:	80 91 aa 01 	lds	r24, 0x01AA
    1a62:	90 91 ab 01 	lds	r25, 0x01AB
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	90 93 ab 01 	sts	0x01AB, r25
    1a6c:	80 93 aa 01 	sts	0x01AA, r24
    1a70:	97 83       	std	Z+7, r25	; 0x07
    1a72:	86 83       	std	Z+6, r24	; 0x06

	return FR_OK;
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	b5 c0       	rjmp	.+362    	; 0x1be2 <chk_mounted+0x632>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    1a78:	8b e0       	ldi	r24, 0x0B	; 11
    1a7a:	b3 c0       	rjmp	.+358    	; 0x1be2 <chk_mounted+0x632>
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    1a7c:	8c e0       	ldi	r24, 0x0C	; 12
    1a7e:	b1 c0       	rjmp	.+354    	; 0x1be2 <chk_mounted+0x632>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	af c0       	rjmp	.+350    	; 0x1be2 <chk_mounted+0x632>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	ad c0       	rjmp	.+346    	; 0x1be2 <chk_mounted+0x632>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
		return FR_NOT_READY;
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	ab c0       	rjmp	.+342    	; 0x1be2 <chk_mounted+0x632>
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    1a8c:	8a e0       	ldi	r24, 0x0A	; 10
    1a8e:	a9 c0       	rjmp	.+338    	; 0x1be2 <chk_mounted+0x632>
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
    1a90:	8d e0       	ldi	r24, 0x0D	; 13
    1a92:	a7 c0       	rjmp	.+334    	; 0x1be2 <chk_mounted+0x632>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	a5 c0       	rjmp	.+330    	; 0x1be2 <chk_mounted+0x632>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
    1a98:	8d e0       	ldi	r24, 0x0D	; 13
    1a9a:	a3 c0       	rjmp	.+326    	; 0x1be2 <chk_mounted+0x632>
    1a9c:	8d e0       	ldi	r24, 0x0D	; 13
    1a9e:	a1 c0       	rjmp	.+322    	; 0x1be2 <chk_mounted+0x632>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    1aa0:	b3 01       	movw	r22, r6
    1aa2:	a2 01       	movw	r20, r4
    1aa4:	48 0d       	add	r20, r8
    1aa6:	59 1d       	adc	r21, r9
    1aa8:	6a 1d       	adc	r22, r10
    1aaa:	7b 1d       	adc	r23, r11
    1aac:	ae 81       	ldd	r26, Y+6	; 0x06
    1aae:	bf 81       	ldd	r27, Y+7	; 0x07
    1ab0:	92 96       	adiw	r26, 0x22	; 34
    1ab2:	4d 93       	st	X+, r20
    1ab4:	5d 93       	st	X+, r21
    1ab6:	6d 93       	st	X+, r22
    1ab8:	7c 93       	st	X, r23
    1aba:	95 97       	sbiw	r26, 0x25	; 37
    1abc:	29 81       	ldd	r18, Y+1	; 0x01
    1abe:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac0:	4b 81       	ldd	r20, Y+3	; 0x03
    1ac2:	5c 81       	ldd	r21, Y+4	; 0x04
    1ac4:	82 0e       	add	r8, r18
    1ac6:	93 1e       	adc	r9, r19
    1ac8:	a4 1e       	adc	r10, r20
    1aca:	b5 1e       	adc	r11, r21
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    1acc:	48 0c       	add	r4, r8
    1ace:	59 1c       	adc	r5, r9
    1ad0:	6a 1c       	adc	r6, r10
    1ad2:	7b 1c       	adc	r7, r11
    1ad4:	96 96       	adiw	r26, 0x26	; 38
    1ad6:	4d 92       	st	X+, r4
    1ad8:	5d 92       	st	X+, r5
    1ada:	6d 92       	st	X+, r6
    1adc:	7c 92       	st	X, r7
    1ade:	99 97       	sbiw	r26, 0x29	; 41

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    1ae0:	4f ef       	ldi	r20, 0xFF	; 255
    1ae2:	5f ef       	ldi	r21, 0xFF	; 255
    1ae4:	ba 01       	movw	r22, r20
    1ae6:	fd 01       	movw	r30, r26
    1ae8:	46 87       	std	Z+14, r20	; 0x0e
    1aea:	57 87       	std	Z+15, r21	; 0x0f
    1aec:	60 8b       	std	Z+16, r22	; 0x10
    1aee:	71 8b       	std	Z+17, r23	; 0x11
	fs->wflag = 0;
    1af0:	14 82       	std	Z+4, r1	; 0x04
    1af2:	ad cf       	rjmp	.-166    	; 0x1a4e <chk_mounted+0x49e>
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
    1af4:	81 e0       	ldi	r24, 0x01	; 1
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    1af6:	47 3f       	cpi	r20, 0xF7	; 247
    1af8:	5f 4f       	sbci	r21, 0xFF	; 255
    1afa:	61 05       	cpc	r22, r1
    1afc:	71 05       	cpc	r23, r1
    1afe:	80 f2       	brcs	.-96     	; 0x1aa0 <chk_mounted+0x4f0>

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    1b00:	ee 81       	ldd	r30, Y+6	; 0x06
    1b02:	ff 81       	ldd	r31, Y+7	; 0x07
    1b04:	e3 5a       	subi	r30, 0xA3	; 163
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	ee 81       	ldd	r30, Y+6	; 0x06
    1b0c:	ff 81       	ldd	r31, Y+7	; 0x07
    1b0e:	e4 5a       	subi	r30, 0xA4	; 164
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	40 81       	ld	r20, Z
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	ba 01       	movw	r22, r20
    1b1c:	55 27       	eor	r21, r21
    1b1e:	44 27       	eor	r20, r20
    1b20:	78 2b       	or	r23, r24
    1b22:	ee 81       	ldd	r30, Y+6	; 0x06
    1b24:	ff 81       	ldd	r31, Y+7	; 0x07
    1b26:	e6 5a       	subi	r30, 0xA6	; 166
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2b       	or	r20, r24
    1b2e:	ee 81       	ldd	r30, Y+6	; 0x06
    1b30:	ff 81       	ldd	r31, Y+7	; 0x07
    1b32:	e5 5a       	subi	r30, 0xA5	; 165
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	80 81       	ld	r24, Z
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	88 27       	eor	r24, r24
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	48 2b       	or	r20, r24
    1b44:	59 2b       	or	r21, r25
    1b46:	6a 2b       	or	r22, r26
    1b48:	7b 2b       	or	r23, r27
    1b4a:	ae 81       	ldd	r26, Y+6	; 0x06
    1b4c:	bf 81       	ldd	r27, Y+7	; 0x07
    1b4e:	92 96       	adiw	r26, 0x22	; 34
    1b50:	4d 93       	st	X+, r20
    1b52:	5d 93       	st	X+, r21
    1b54:	6d 93       	st	X+, r22
    1b56:	7c 93       	st	X, r23
    1b58:	95 97       	sbiw	r26, 0x25	; 37
    1b5a:	29 81       	ldd	r18, Y+1	; 0x01
    1b5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b5e:	4b 81       	ldd	r20, Y+3	; 0x03
    1b60:	5c 81       	ldd	r21, Y+4	; 0x04
    1b62:	82 0e       	add	r8, r18
    1b64:	93 1e       	adc	r9, r19
    1b66:	a4 1e       	adc	r10, r20
    1b68:	b5 1e       	adc	r11, r21
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    1b6a:	48 0c       	add	r4, r8
    1b6c:	59 1c       	adc	r5, r9
    1b6e:	6a 1c       	adc	r6, r10
    1b70:	7b 1c       	adc	r7, r11
    1b72:	96 96       	adiw	r26, 0x26	; 38
    1b74:	4d 92       	st	X+, r4
    1b76:	5d 92       	st	X+, r5
    1b78:	6d 92       	st	X+, r6
    1b7a:	7c 92       	st	X, r7
    1b7c:	99 97       	sbiw	r26, 0x29	; 41

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	9f ef       	ldi	r25, 0xFF	; 255
    1b82:	dc 01       	movw	r26, r24
    1b84:	ee 81       	ldd	r30, Y+6	; 0x06
    1b86:	ff 81       	ldd	r31, Y+7	; 0x07
    1b88:	86 87       	std	Z+14, r24	; 0x0e
    1b8a:	97 87       	std	Z+15, r25	; 0x0f
    1b8c:	a0 8b       	std	Z+16, r26	; 0x10
    1b8e:	b1 8b       	std	Z+17, r27	; 0x11
	fs->wflag = 0;
    1b90:	14 82       	std	Z+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
    1b92:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1b94:	e1 5a       	subi	r30, 0xA1	; 161
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	88 27       	eor	r24, r24
    1ba0:	ee 81       	ldd	r30, Y+6	; 0x06
    1ba2:	ff 81       	ldd	r31, Y+7	; 0x07
    1ba4:	e2 5a       	subi	r30, 0xA2	; 162
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	20 81       	ld	r18, Z
    1baa:	82 2b       	or	r24, r18
    1bac:	a7 01       	movw	r20, r14
    1bae:	96 01       	movw	r18, r12
    1bb0:	28 0f       	add	r18, r24
    1bb2:	39 1f       	adc	r19, r25
    1bb4:	41 1d       	adc	r20, r1
    1bb6:	51 1d       	adc	r21, r1
    1bb8:	ae 81       	ldd	r26, Y+6	; 0x06
    1bba:	bf 81       	ldd	r27, Y+7	; 0x07
    1bbc:	52 96       	adiw	r26, 0x12	; 18
    1bbe:	2d 93       	st	X+, r18
    1bc0:	3d 93       	st	X+, r19
    1bc2:	4d 93       	st	X+, r20
    1bc4:	5c 93       	st	X, r21
    1bc6:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1bc8:	01 e0       	ldi	r16, 0x01	; 1
    1bca:	bd 01       	movw	r22, r26
    1bcc:	62 5d       	subi	r22, 0xD2	; 210
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	11 96       	adiw	r26, 0x01	; 1
    1bd2:	8c 91       	ld	r24, X
    1bd4:	0e 94 6d 00 	call	0xda	; 0xda <disk_read>
    1bd8:	88 23       	and	r24, r24
    1bda:	09 f4       	brne	.+2      	; 0x1bde <chk_mounted+0x62e>
    1bdc:	76 ce       	rjmp	.-788    	; 0x18ca <chk_mounted+0x31a>
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    1bde:	83 e0       	ldi	r24, 0x03	; 3
    1be0:	36 cf       	rjmp	.-404    	; 0x1a4e <chk_mounted+0x49e>
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */

	return FR_OK;
}
    1be2:	27 96       	adiw	r28, 0x07	; 7
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	bf 90       	pop	r11
    1c00:	af 90       	pop	r10
    1c02:	9f 90       	pop	r9
    1c04:	8f 90       	pop	r8
    1c06:	7f 90       	pop	r7
    1c08:	6f 90       	pop	r6
    1c0a:	5f 90       	pop	r5
    1c0c:	4f 90       	pop	r4
    1c0e:	3f 90       	pop	r3
    1c10:	2f 90       	pop	r2
    1c12:	08 95       	ret

00001c14 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    1c14:	81 11       	cpse	r24, r1
    1c16:	12 c0       	rjmp	.+36     	; 0x1c3c <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    1c18:	e0 91 ac 01 	lds	r30, 0x01AC
    1c1c:	f0 91 ad 01 	lds	r31, 0x01AD

	if (rfs) {
    1c20:	30 97       	sbiw	r30, 0x00	; 0
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <f_mount+0x12>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    1c24:	10 82       	st	Z, r1
	}

	if (fs) {
    1c26:	61 15       	cp	r22, r1
    1c28:	71 05       	cpc	r23, r1
    1c2a:	11 f0       	breq	.+4      	; 0x1c30 <f_mount+0x1c>
		fs->fs_type = 0;			/* Clear new fs object */
    1c2c:	fb 01       	movw	r30, r22
    1c2e:	10 82       	st	Z, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    1c30:	70 93 ad 01 	sts	0x01AD, r23
    1c34:	60 93 ac 01 	sts	0x01AC, r22

	return FR_OK;
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    1c3c:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
    1c3e:	08 95       	ret

00001c40 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1c40:	4f 92       	push	r4
    1c42:	5f 92       	push	r5
    1c44:	6f 92       	push	r6
    1c46:	7f 92       	push	r7
    1c48:	8f 92       	push	r8
    1c4a:	9f 92       	push	r9
    1c4c:	af 92       	push	r10
    1c4e:	bf 92       	push	r11
    1c50:	cf 92       	push	r12
    1c52:	df 92       	push	r13
    1c54:	ef 92       	push	r14
    1c56:	ff 92       	push	r15
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	a4 97       	sbiw	r28, 0x24	; 36
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	7c 01       	movw	r14, r24
    1c72:	7c a3       	std	Y+36, r23	; 0x24
    1c74:	6b a3       	std	Y+35, r22	; 0x23
    1c76:	14 2f       	mov	r17, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    1c78:	dc 01       	movw	r26, r24
    1c7a:	1d 92       	st	X+, r1
    1c7c:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    1c7e:	4e 71       	andi	r20, 0x1E	; 30
    1c80:	be 01       	movw	r22, r28
    1c82:	6f 5f       	subi	r22, 0xFF	; 255
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	ce 01       	movw	r24, r28
    1c88:	83 96       	adiw	r24, 0x23	; 35
    1c8a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1c8e:	81 11       	cpse	r24, r1
    1c90:	26 c1       	rjmp	.+588    	; 0x1ede <f_open+0x29e>
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    1c92:	01 2f       	mov	r16, r17
    1c94:	0f 71       	andi	r16, 0x1F	; 31
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	INITBUF(dj, sfn, lfn);
    1c96:	ce 01       	movw	r24, r28
    1c98:	47 96       	adiw	r24, 0x17	; 23
    1c9a:	9e 8b       	std	Y+22, r25	; 0x16
    1c9c:	8d 8b       	std	Y+21, r24	; 0x15
	res = follow_path(&dj, path);	/* Follow the file path */
    1c9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca2:	46 97       	sbiw	r24, 0x16	; 22
    1ca4:	0e 94 c2 08 	call	0x1184	; 0x1184 <follow_path>
    1ca8:	98 2f       	mov	r25, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1caa:	81 2f       	mov	r24, r17
    1cac:	8c 71       	andi	r24, 0x1C	; 28
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <f_open+0x72>
    1cb0:	76 c0       	rjmp	.+236    	; 0x1d9e <f_open+0x15e>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    1cb2:	99 23       	and	r25, r25
    1cb4:	69 f0       	breq	.+26     	; 0x1cd0 <f_open+0x90>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    1cb6:	94 30       	cpi	r25, 0x04	; 4
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <f_open+0x7c>
    1cba:	02 c1       	rjmp	.+516    	; 0x1ec0 <f_open+0x280>
				res = dir_register(&dj);
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <dir_register>
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	0b c1       	rjmp	.+534    	; 0x1ede <f_open+0x29e>
			mode |= FA_CREATE_ALWAYS;
    1cc8:	08 60       	ori	r16, 0x08	; 8
			dir = dj.dir;			/* Created entry (SFN entry) */
    1cca:	cb 88       	ldd	r12, Y+19	; 0x13
    1ccc:	dc 88       	ldd	r13, Y+20	; 0x14
    1cce:	55 c0       	rjmp	.+170    	; 0x1d7a <f_open+0x13a>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    1cd0:	12 fd       	sbrc	r17, 2
    1cd2:	f8 c0       	rjmp	.+496    	; 0x1ec4 <f_open+0x284>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    1cd4:	cb 88       	ldd	r12, Y+19	; 0x13
    1cd6:	dc 88       	ldd	r13, Y+20	; 0x14
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    1cd8:	c1 14       	cp	r12, r1
    1cda:	d1 04       	cpc	r13, r1
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <f_open+0xa0>
    1cde:	f4 c0       	rjmp	.+488    	; 0x1ec8 <f_open+0x288>
    1ce0:	f6 01       	movw	r30, r12
    1ce2:	83 85       	ldd	r24, Z+11	; 0x0b
    1ce4:	81 71       	andi	r24, 0x11	; 17
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <f_open+0xaa>
    1ce8:	f1 c0       	rjmp	.+482    	; 0x1ecc <f_open+0x28c>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    1cea:	13 ff       	sbrs	r17, 3
    1cec:	46 c0       	rjmp	.+140    	; 0x1d7a <f_open+0x13a>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    1cee:	85 88       	ldd	r8, Z+21	; 0x15
    1cf0:	91 2c       	mov	r9, r1
    1cf2:	98 2c       	mov	r9, r8
    1cf4:	88 24       	eor	r8, r8
    1cf6:	84 89       	ldd	r24, Z+20	; 0x14
    1cf8:	88 2a       	or	r8, r24
    1cfa:	a1 2c       	mov	r10, r1
    1cfc:	b1 2c       	mov	r11, r1
    1cfe:	d4 01       	movw	r26, r8
    1d00:	99 27       	eor	r25, r25
    1d02:	88 27       	eor	r24, r24
    1d04:	83 8c       	ldd	r8, Z+27	; 0x1b
    1d06:	91 2c       	mov	r9, r1
    1d08:	98 2c       	mov	r9, r8
    1d0a:	88 24       	eor	r8, r8
    1d0c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d0e:	82 2a       	or	r8, r18
    1d10:	a1 2c       	mov	r10, r1
    1d12:	b1 2c       	mov	r11, r1
    1d14:	88 2a       	or	r8, r24
    1d16:	99 2a       	or	r9, r25
    1d18:	aa 2a       	or	r10, r26
    1d1a:	bb 2a       	or	r11, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    1d1c:	14 8a       	std	Z+20, r1	; 0x14
    1d1e:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    1d20:	12 8e       	std	Z+26, r1	; 0x1a
    1d22:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    1d24:	14 8e       	std	Z+28, r1	; 0x1c
    1d26:	15 8e       	std	Z+29, r1	; 0x1d
    1d28:	16 8e       	std	Z+30, r1	; 0x1e
    1d2a:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    1d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    1d34:	42 a4       	ldd	r4, Z+42	; 0x2a
    1d36:	53 a4       	ldd	r5, Z+43	; 0x2b
    1d38:	64 a4       	ldd	r6, Z+44	; 0x2c
    1d3a:	75 a4       	ldd	r7, Z+45	; 0x2d
				if (cl) {
    1d3c:	81 14       	cp	r8, r1
    1d3e:	91 04       	cpc	r9, r1
    1d40:	a1 04       	cpc	r10, r1
    1d42:	b1 04       	cpc	r11, r1
    1d44:	91 f0       	breq	.+36     	; 0x1d6a <f_open+0x12a>
					res = remove_chain(dj.fs, cl);
    1d46:	b5 01       	movw	r22, r10
    1d48:	a4 01       	movw	r20, r8
    1d4a:	cf 01       	movw	r24, r30
    1d4c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <remove_chain>
					if (res) LEAVE_FF(dj.fs, res);
    1d50:	81 11       	cpse	r24, r1
    1d52:	c5 c0       	rjmp	.+394    	; 0x1ede <f_open+0x29e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1d54:	e9 81       	ldd	r30, Y+1	; 0x01
    1d56:	fa 81       	ldd	r31, Y+2	; 0x02
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	88 1a       	sub	r8, r24
    1d5c:	91 08       	sbc	r9, r1
    1d5e:	a1 08       	sbc	r10, r1
    1d60:	b1 08       	sbc	r11, r1
    1d62:	82 86       	std	Z+10, r8	; 0x0a
    1d64:	93 86       	std	Z+11, r9	; 0x0b
    1d66:	a4 86       	std	Z+12, r10	; 0x0c
    1d68:	b5 86       	std	Z+13, r11	; 0x0d
				}
				res = move_window(dj.fs, ps);
    1d6a:	b3 01       	movw	r22, r6
    1d6c:	a2 01       	movw	r20, r4
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1d76:	81 11       	cpse	r24, r1
    1d78:	b2 c0       	rjmp	.+356    	; 0x1ede <f_open+0x29e>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    1d7a:	03 ff       	sbrs	r16, 3
    1d7c:	21 c0       	rjmp	.+66     	; 0x1dc0 <f_open+0x180>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    1d7e:	d6 01       	movw	r26, r12
    1d80:	1b 96       	adiw	r26, 0x0b	; 11
    1d82:	1c 92       	st	X, r1
			ps = get_fattime();
    1d84:	0e 94 dd 00 	call	0x1ba	; 0x1ba <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    1d88:	f6 01       	movw	r30, r12
    1d8a:	66 87       	std	Z+14, r22	; 0x0e
    1d8c:	77 87       	std	Z+15, r23	; 0x0f
    1d8e:	80 8b       	std	Z+16, r24	; 0x10
    1d90:	91 8b       	std	Z+17, r25	; 0x11
			dj.fs->wflag = 1;
    1d92:	e9 81       	ldd	r30, Y+1	; 0x01
    1d94:	fa 81       	ldd	r31, Y+2	; 0x02
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    1d9a:	00 62       	ori	r16, 0x20	; 32
    1d9c:	11 c0       	rjmp	.+34     	; 0x1dc0 <f_open+0x180>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    1d9e:	91 11       	cpse	r25, r1
    1da0:	97 c0       	rjmp	.+302    	; 0x1ed0 <f_open+0x290>
		dir = dj.dir;
    1da2:	cb 88       	ldd	r12, Y+19	; 0x13
    1da4:	dc 88       	ldd	r13, Y+20	; 0x14
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1da6:	c1 14       	cp	r12, r1
    1da8:	d1 04       	cpc	r13, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <f_open+0x16e>
    1dac:	93 c0       	rjmp	.+294    	; 0x1ed4 <f_open+0x294>
    1dae:	d6 01       	movw	r26, r12
    1db0:	1b 96       	adiw	r26, 0x0b	; 11
    1db2:	8c 91       	ld	r24, X
    1db4:	84 fd       	sbrc	r24, 4
    1db6:	90 c0       	rjmp	.+288    	; 0x1ed8 <f_open+0x298>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1db8:	11 ff       	sbrs	r17, 1
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <f_open+0x180>
    1dbc:	80 fd       	sbrc	r24, 0
    1dbe:	8e c0       	rjmp	.+284    	; 0x1edc <f_open+0x29c>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc4:	42 a5       	ldd	r20, Z+42	; 0x2a
    1dc6:	53 a5       	ldd	r21, Z+43	; 0x2b
    1dc8:	64 a5       	ldd	r22, Z+44	; 0x2c
    1dca:	75 a5       	ldd	r23, Z+45	; 0x2d
    1dcc:	d7 01       	movw	r26, r14
    1dce:	5a 96       	adiw	r26, 0x1a	; 26
    1dd0:	4d 93       	st	X+, r20
    1dd2:	5d 93       	st	X+, r21
    1dd4:	6d 93       	st	X+, r22
    1dd6:	7c 93       	st	X, r23
    1dd8:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    1dda:	8b 89       	ldd	r24, Y+19	; 0x13
    1ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dde:	5f 96       	adiw	r26, 0x1f	; 31
    1de0:	9c 93       	st	X, r25
    1de2:	8e 93       	st	-X, r24
    1de4:	5e 97       	sbiw	r26, 0x1e	; 30
#endif
	fp->flag = mode;					/* File access mode */
    1de6:	14 96       	adiw	r26, 0x04	; 4
    1de8:	0c 93       	st	X, r16
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1dea:	d6 01       	movw	r26, r12
    1dec:	55 96       	adiw	r26, 0x15	; 21
    1dee:	8c 91       	ld	r24, X
    1df0:	55 97       	sbiw	r26, 0x15	; 21
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	98 2f       	mov	r25, r24
    1df6:	88 27       	eor	r24, r24
    1df8:	54 96       	adiw	r26, 0x14	; 20
    1dfa:	2c 91       	ld	r18, X
    1dfc:	82 2b       	or	r24, r18
    1dfe:	a0 e0       	ldi	r26, 0x00	; 0
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	5c 01       	movw	r10, r24
    1e04:	99 24       	eor	r9, r9
    1e06:	88 24       	eor	r8, r8
    1e08:	d6 01       	movw	r26, r12
    1e0a:	5b 96       	adiw	r26, 0x1b	; 27
    1e0c:	4c 91       	ld	r20, X
    1e0e:	5b 97       	sbiw	r26, 0x1b	; 27
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	54 2f       	mov	r21, r20
    1e14:	44 27       	eor	r20, r20
    1e16:	5a 96       	adiw	r26, 0x1a	; 26
    1e18:	2c 91       	ld	r18, X
    1e1a:	42 2b       	or	r20, r18
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	48 29       	or	r20, r8
    1e22:	59 29       	or	r21, r9
    1e24:	6a 29       	or	r22, r10
    1e26:	7b 29       	or	r23, r11
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
    1e28:	d7 01       	movw	r26, r14
    1e2a:	1e 96       	adiw	r26, 0x0e	; 14
    1e2c:	4d 93       	st	X+, r20
    1e2e:	5d 93       	st	X+, r21
    1e30:	6d 93       	st	X+, r22
    1e32:	7c 93       	st	X, r23
    1e34:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1e36:	d6 01       	movw	r26, r12
    1e38:	5f 96       	adiw	r26, 0x1f	; 31
    1e3a:	2c 91       	ld	r18, X
    1e3c:	5f 97       	sbiw	r26, 0x1f	; 31
    1e3e:	5e 96       	adiw	r26, 0x1e	; 30
    1e40:	8c 91       	ld	r24, X
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e0       	ldi	r26, 0x00	; 0
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	dc 01       	movw	r26, r24
    1e4a:	99 27       	eor	r25, r25
    1e4c:	88 27       	eor	r24, r24
    1e4e:	ac 01       	movw	r20, r24
    1e50:	bd 01       	movw	r22, r26
    1e52:	72 2b       	or	r23, r18
    1e54:	d6 01       	movw	r26, r12
    1e56:	5c 96       	adiw	r26, 0x1c	; 28
    1e58:	2c 91       	ld	r18, X
    1e5a:	db 01       	movw	r26, r22
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	82 2b       	or	r24, r18
    1e60:	8c 01       	movw	r16, r24
    1e62:	9d 01       	movw	r18, r26
    1e64:	d6 01       	movw	r26, r12
    1e66:	5d 96       	adiw	r26, 0x1d	; 29
    1e68:	4c 91       	ld	r20, X
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	54 2f       	mov	r21, r20
    1e6e:	44 27       	eor	r20, r20
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	40 2b       	or	r20, r16
    1e76:	51 2b       	or	r21, r17
    1e78:	62 2b       	or	r22, r18
    1e7a:	73 2b       	or	r23, r19
    1e7c:	d7 01       	movw	r26, r14
    1e7e:	1a 96       	adiw	r26, 0x0a	; 10
    1e80:	4d 93       	st	X+, r20
    1e82:	5d 93       	st	X+, r21
    1e84:	6d 93       	st	X+, r22
    1e86:	7c 93       	st	X, r23
    1e88:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    1e8a:	16 96       	adiw	r26, 0x06	; 6
    1e8c:	1d 92       	st	X+, r1
    1e8e:	1d 92       	st	X+, r1
    1e90:	1d 92       	st	X+, r1
    1e92:	1c 92       	st	X, r1
    1e94:	19 97       	sbiw	r26, 0x09	; 9
    1e96:	8f ef       	ldi	r24, 0xFF	; 255
    1e98:	15 96       	adiw	r26, 0x05	; 5
    1e9a:	8c 93       	st	X, r24
    1e9c:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    1e9e:	56 96       	adiw	r26, 0x16	; 22
    1ea0:	1d 92       	st	X+, r1
    1ea2:	1d 92       	st	X+, r1
    1ea4:	1d 92       	st	X+, r1
    1ea6:	1c 92       	st	X, r1
    1ea8:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    1eaa:	11 96       	adiw	r26, 0x01	; 1
    1eac:	fc 93       	st	X, r31
    1eae:	ee 93       	st	-X, r30
    1eb0:	86 81       	ldd	r24, Z+6	; 0x06
    1eb2:	97 81       	ldd	r25, Z+7	; 0x07
    1eb4:	13 96       	adiw	r26, 0x03	; 3
    1eb6:	9c 93       	st	X, r25
    1eb8:	8e 93       	st	-X, r24
    1eba:	12 97       	sbiw	r26, 0x02	; 2

	LEAVE_FF(dj.fs, FR_OK);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <f_open+0x29e>
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	INITBUF(dj, sfn, lfn);
	res = follow_path(&dj, path);	/* Follow the file path */
    1ec0:	89 2f       	mov	r24, r25
    1ec2:	0d c0       	rjmp	.+26     	; 0x1ede <f_open+0x29e>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;			/* Created entry (SFN entry) */
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
    1ec4:	88 e0       	ldi	r24, 0x08	; 8
    1ec6:	0b c0       	rjmp	.+22     	; 0x1ede <f_open+0x29e>
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
    1ec8:	87 e0       	ldi	r24, 0x07	; 7
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <f_open+0x29e>
    1ecc:	87 e0       	ldi	r24, 0x07	; 7
    1ece:	07 c0       	rjmp	.+14     	; 0x1ede <f_open+0x29e>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    1ed0:	89 2f       	mov	r24, r25
    1ed2:	05 c0       	rjmp	.+10     	; 0x1ede <f_open+0x29e>
		dir = dj.dir;
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
			LEAVE_FF(dj.fs, FR_NO_FILE);
    1ed4:	84 e0       	ldi	r24, 0x04	; 4
    1ed6:	03 c0       	rjmp	.+6      	; 0x1ede <f_open+0x29e>
    1ed8:	84 e0       	ldi	r24, 0x04	; 4
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <f_open+0x29e>
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
    1edc:	87 e0       	ldi	r24, 0x07	; 7
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
}
    1ede:	a4 96       	adiw	r28, 0x24	; 36
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	df 90       	pop	r13
    1ef8:	cf 90       	pop	r12
    1efa:	bf 90       	pop	r11
    1efc:	af 90       	pop	r10
    1efe:	9f 90       	pop	r9
    1f00:	8f 90       	pop	r8
    1f02:	7f 90       	pop	r7
    1f04:	6f 90       	pop	r6
    1f06:	5f 90       	pop	r5
    1f08:	4f 90       	pop	r4
    1f0a:	08 95       	ret

00001f0c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    1f0c:	2f 92       	push	r2
    1f0e:	3f 92       	push	r3
    1f10:	4f 92       	push	r4
    1f12:	5f 92       	push	r5
    1f14:	6f 92       	push	r6
    1f16:	7f 92       	push	r7
    1f18:	8f 92       	push	r8
    1f1a:	9f 92       	push	r9
    1f1c:	af 92       	push	r10
    1f1e:	bf 92       	push	r11
    1f20:	cf 92       	push	r12
    1f22:	df 92       	push	r13
    1f24:	ef 92       	push	r14
    1f26:	ff 92       	push	r15
    1f28:	0f 93       	push	r16
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <f_write+0x24>
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <f_write+0x26>
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
    1f3a:	4b 01       	movw	r8, r22
    1f3c:	6a 01       	movw	r12, r20
    1f3e:	59 01       	movw	r10, r18
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    1f40:	d9 01       	movw	r26, r18
    1f42:	1d 92       	st	X+, r1
    1f44:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1f46:	fc 01       	movw	r30, r24
    1f48:	62 81       	ldd	r22, Z+2	; 0x02
    1f4a:	73 81       	ldd	r23, Z+3	; 0x03
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	0e 94 81 02 	call	0x502	; 0x502 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1f54:	81 11       	cpse	r24, r1
    1f56:	cf c1       	rjmp	.+926    	; 0x22f6 <f_write+0x3ea>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1f58:	ab 81       	ldd	r26, Y+3	; 0x03
    1f5a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f5c:	14 96       	adiw	r26, 0x04	; 4
    1f5e:	8c 91       	ld	r24, X
    1f60:	14 97       	sbiw	r26, 0x04	; 4
    1f62:	88 23       	and	r24, r24
    1f64:	0c f4       	brge	.+2      	; 0x1f68 <f_write+0x5c>
    1f66:	c4 c1       	rjmp	.+904    	; 0x22f0 <f_write+0x3e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    1f68:	81 ff       	sbrs	r24, 1
    1f6a:	c4 c1       	rjmp	.+904    	; 0x22f4 <f_write+0x3e8>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    1f6c:	1a 96       	adiw	r26, 0x0a	; 10
    1f6e:	8d 91       	ld	r24, X+
    1f70:	9d 91       	ld	r25, X+
    1f72:	0d 90       	ld	r0, X+
    1f74:	bc 91       	ld	r27, X
    1f76:	a0 2d       	mov	r26, r0
    1f78:	ac 01       	movw	r20, r24
    1f7a:	bd 01       	movw	r22, r26
    1f7c:	4c 0d       	add	r20, r12
    1f7e:	5d 1d       	adc	r21, r13
    1f80:	61 1d       	adc	r22, r1
    1f82:	71 1d       	adc	r23, r1
    1f84:	48 17       	cp	r20, r24
    1f86:	59 07       	cpc	r21, r25
    1f88:	6a 07       	cpc	r22, r26
    1f8a:	7b 07       	cpc	r23, r27
    1f8c:	08 f4       	brcc	.+2      	; 0x1f90 <f_write+0x84>
    1f8e:	93 c1       	rjmp	.+806    	; 0x22b6 <f_write+0x3aa>

	for ( ;  btw;									/* Repeat until all data transferred */
    1f90:	c1 14       	cp	r12, r1
    1f92:	d1 04       	cpc	r13, r1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <f_write+0x8c>
    1f96:	8f c1       	rjmp	.+798    	; 0x22b6 <f_write+0x3aa>
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    1f98:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f9c:	b0 96       	adiw	r30, 0x20	; 32
    1f9e:	fa 83       	std	Y+2, r31	; 0x02
    1fa0:	e9 83       	std	Y+1, r30	; 0x01
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    1fa2:	ab 81       	ldd	r26, Y+3	; 0x03
    1fa4:	bc 81       	ldd	r27, Y+4	; 0x04
    1fa6:	16 96       	adiw	r26, 0x06	; 6
    1fa8:	4d 91       	ld	r20, X+
    1faa:	5d 91       	ld	r21, X+
    1fac:	6d 91       	ld	r22, X+
    1fae:	7c 91       	ld	r23, X
    1fb0:	19 97       	sbiw	r26, 0x09	; 9
    1fb2:	db 01       	movw	r26, r22
    1fb4:	ca 01       	movw	r24, r20
    1fb6:	91 70       	andi	r25, 0x01	; 1
    1fb8:	aa 27       	eor	r26, r26
    1fba:	bb 27       	eor	r27, r27
    1fbc:	89 2b       	or	r24, r25
    1fbe:	8a 2b       	or	r24, r26
    1fc0:	8b 2b       	or	r24, r27
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <f_write+0xba>
    1fc4:	37 c1       	rjmp	.+622    	; 0x2234 <f_write+0x328>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    1fc6:	ab 81       	ldd	r26, Y+3	; 0x03
    1fc8:	bc 81       	ldd	r27, Y+4	; 0x04
    1fca:	ed 91       	ld	r30, X+
    1fcc:	fc 91       	ld	r31, X
    1fce:	11 97       	sbiw	r26, 0x01	; 1
    1fd0:	15 96       	adiw	r26, 0x05	; 5
    1fd2:	9c 91       	ld	r25, X
    1fd4:	15 97       	sbiw	r26, 0x05	; 5
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	98 17       	cp	r25, r24
    1fda:	08 f4       	brcc	.+2      	; 0x1fde <f_write+0xd2>
    1fdc:	50 c0       	rjmp	.+160    	; 0x207e <f_write+0x172>
				if (fp->fptr == 0) {				/* On the top of the file? */
    1fde:	45 2b       	or	r20, r21
    1fe0:	46 2b       	or	r20, r22
    1fe2:	47 2b       	or	r20, r23
    1fe4:	c1 f4       	brne	.+48     	; 0x2016 <f_write+0x10a>
					clst = fp->org_clust;			/* Follow from the origin */
    1fe6:	1e 96       	adiw	r26, 0x0e	; 14
    1fe8:	6d 91       	ld	r22, X+
    1fea:	7d 91       	ld	r23, X+
    1fec:	8d 91       	ld	r24, X+
    1fee:	9c 91       	ld	r25, X
    1ff0:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    1ff2:	61 15       	cp	r22, r1
    1ff4:	71 05       	cpc	r23, r1
    1ff6:	81 05       	cpc	r24, r1
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	f1 f4       	brne	.+60     	; 0x2038 <f_write+0x12c>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	ba 01       	movw	r22, r20
    2002:	cf 01       	movw	r24, r30
    2004:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <create_chain>
    2008:	eb 81       	ldd	r30, Y+3	; 0x03
    200a:	fc 81       	ldd	r31, Y+4	; 0x04
    200c:	66 87       	std	Z+14, r22	; 0x0e
    200e:	77 87       	std	Z+15, r23	; 0x0f
    2010:	80 8b       	std	Z+16, r24	; 0x10
    2012:	91 8b       	std	Z+17, r25	; 0x11
    2014:	0b c0       	rjmp	.+22     	; 0x202c <f_write+0x120>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    2016:	ab 81       	ldd	r26, Y+3	; 0x03
    2018:	bc 81       	ldd	r27, Y+4	; 0x04
    201a:	52 96       	adiw	r26, 0x12	; 18
    201c:	4d 91       	ld	r20, X+
    201e:	5d 91       	ld	r21, X+
    2020:	6d 91       	ld	r22, X+
    2022:	7c 91       	ld	r23, X
    2024:	55 97       	sbiw	r26, 0x15	; 21
    2026:	cf 01       	movw	r24, r30
    2028:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    202c:	61 15       	cp	r22, r1
    202e:	71 05       	cpc	r23, r1
    2030:	81 05       	cpc	r24, r1
    2032:	91 05       	cpc	r25, r1
    2034:	09 f4       	brne	.+2      	; 0x2038 <f_write+0x12c>
    2036:	3f c1       	rjmp	.+638    	; 0x22b6 <f_write+0x3aa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2038:	61 30       	cpi	r22, 0x01	; 1
    203a:	71 05       	cpc	r23, r1
    203c:	81 05       	cpc	r24, r1
    203e:	91 05       	cpc	r25, r1
    2040:	39 f4       	brne	.+14     	; 0x2050 <f_write+0x144>
    2042:	eb 81       	ldd	r30, Y+3	; 0x03
    2044:	fc 81       	ldd	r31, Y+4	; 0x04
    2046:	84 81       	ldd	r24, Z+4	; 0x04
    2048:	80 68       	ori	r24, 0x80	; 128
    204a:	84 83       	std	Z+4, r24	; 0x04
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	53 c1       	rjmp	.+678    	; 0x22f6 <f_write+0x3ea>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2050:	6f 3f       	cpi	r22, 0xFF	; 255
    2052:	ff ef       	ldi	r31, 0xFF	; 255
    2054:	7f 07       	cpc	r23, r31
    2056:	8f 07       	cpc	r24, r31
    2058:	9f 07       	cpc	r25, r31
    205a:	51 f4       	brne	.+20     	; 0x2070 <f_write+0x164>
    205c:	ab 81       	ldd	r26, Y+3	; 0x03
    205e:	bc 81       	ldd	r27, Y+4	; 0x04
    2060:	14 96       	adiw	r26, 0x04	; 4
    2062:	8c 91       	ld	r24, X
    2064:	14 97       	sbiw	r26, 0x04	; 4
    2066:	80 68       	ori	r24, 0x80	; 128
    2068:	14 96       	adiw	r26, 0x04	; 4
    206a:	8c 93       	st	X, r24
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	43 c1       	rjmp	.+646    	; 0x22f6 <f_write+0x3ea>
				fp->curr_clust = clst;				/* Update current cluster */
    2070:	eb 81       	ldd	r30, Y+3	; 0x03
    2072:	fc 81       	ldd	r31, Y+4	; 0x04
    2074:	62 8b       	std	Z+18, r22	; 0x12
    2076:	73 8b       	std	Z+19, r23	; 0x13
    2078:	84 8b       	std	Z+20, r24	; 0x14
    207a:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    207c:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    207e:	ab 81       	ldd	r26, Y+3	; 0x03
    2080:	bc 81       	ldd	r27, Y+4	; 0x04
    2082:	14 96       	adiw	r26, 0x04	; 4
    2084:	8c 91       	ld	r24, X
    2086:	14 97       	sbiw	r26, 0x04	; 4
    2088:	86 ff       	sbrs	r24, 6
    208a:	1f c0       	rjmp	.+62     	; 0x20ca <f_write+0x1be>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    208c:	56 96       	adiw	r26, 0x16	; 22
    208e:	2d 91       	ld	r18, X+
    2090:	3d 91       	ld	r19, X+
    2092:	4d 91       	ld	r20, X+
    2094:	5c 91       	ld	r21, X
    2096:	59 97       	sbiw	r26, 0x19	; 25
    2098:	ed 91       	ld	r30, X+
    209a:	fc 91       	ld	r31, X
    209c:	01 e0       	ldi	r16, 0x01	; 1
    209e:	69 81       	ldd	r22, Y+1	; 0x01
    20a0:	7a 81       	ldd	r23, Y+2	; 0x02
    20a2:	81 81       	ldd	r24, Z+1	; 0x01
    20a4:	0e 94 97 00 	call	0x12e	; 0x12e <disk_write>
    20a8:	88 23       	and	r24, r24
    20aa:	39 f0       	breq	.+14     	; 0x20ba <f_write+0x1ae>
					ABORT(fp->fs, FR_DISK_ERR);
    20ac:	eb 81       	ldd	r30, Y+3	; 0x03
    20ae:	fc 81       	ldd	r31, Y+4	; 0x04
    20b0:	84 81       	ldd	r24, Z+4	; 0x04
    20b2:	80 68       	ori	r24, 0x80	; 128
    20b4:	84 83       	std	Z+4, r24	; 0x04
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	1e c1       	rjmp	.+572    	; 0x22f6 <f_write+0x3ea>
				fp->flag &= ~FA__DIRTY;
    20ba:	ab 81       	ldd	r26, Y+3	; 0x03
    20bc:	bc 81       	ldd	r27, Y+4	; 0x04
    20be:	14 96       	adiw	r26, 0x04	; 4
    20c0:	8c 91       	ld	r24, X
    20c2:	14 97       	sbiw	r26, 0x04	; 4
    20c4:	8f 7b       	andi	r24, 0xBF	; 191
    20c6:	14 96       	adiw	r26, 0x04	; 4
    20c8:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    20ca:	eb 81       	ldd	r30, Y+3	; 0x03
    20cc:	fc 81       	ldd	r31, Y+4	; 0x04
    20ce:	20 80       	ld	r2, Z
    20d0:	31 80       	ldd	r3, Z+1	; 0x01
    20d2:	42 89       	ldd	r20, Z+18	; 0x12
    20d4:	53 89       	ldd	r21, Z+19	; 0x13
    20d6:	64 89       	ldd	r22, Z+20	; 0x14
    20d8:	75 89       	ldd	r23, Z+21	; 0x15
    20da:	c1 01       	movw	r24, r2
    20dc:	0e 94 97 06 	call	0xd2e	; 0xd2e <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    20e0:	61 15       	cp	r22, r1
    20e2:	71 05       	cpc	r23, r1
    20e4:	81 05       	cpc	r24, r1
    20e6:	91 05       	cpc	r25, r1
    20e8:	51 f4       	brne	.+20     	; 0x20fe <f_write+0x1f2>
    20ea:	ab 81       	ldd	r26, Y+3	; 0x03
    20ec:	bc 81       	ldd	r27, Y+4	; 0x04
    20ee:	14 96       	adiw	r26, 0x04	; 4
    20f0:	8c 91       	ld	r24, X
    20f2:	14 97       	sbiw	r26, 0x04	; 4
    20f4:	80 68       	ori	r24, 0x80	; 128
    20f6:	14 96       	adiw	r26, 0x04	; 4
    20f8:	8c 93       	st	X, r24
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	fc c0       	rjmp	.+504    	; 0x22f6 <f_write+0x3ea>
			sect += fp->csect;
    20fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2100:	fc 81       	ldd	r31, Y+4	; 0x04
    2102:	45 81       	ldd	r20, Z+5	; 0x05
    2104:	2b 01       	movw	r4, r22
    2106:	3c 01       	movw	r6, r24
    2108:	44 0e       	add	r4, r20
    210a:	51 1c       	adc	r5, r1
    210c:	61 1c       	adc	r6, r1
    210e:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2110:	76 01       	movw	r14, r12
    2112:	ef 2c       	mov	r14, r15
    2114:	ff 24       	eor	r15, r15
    2116:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    2118:	e1 14       	cp	r14, r1
    211a:	f1 04       	cpc	r15, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <f_write+0x214>
    211e:	51 c0       	rjmp	.+162    	; 0x21c2 <f_write+0x2b6>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2120:	d1 01       	movw	r26, r2
    2122:	12 96       	adiw	r26, 0x02	; 2
    2124:	5c 91       	ld	r21, X
    2126:	25 2f       	mov	r18, r21
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	c7 01       	movw	r24, r14
    212c:	84 0f       	add	r24, r20
    212e:	91 1d       	adc	r25, r1
    2130:	28 17       	cp	r18, r24
    2132:	39 07       	cpc	r19, r25
    2134:	18 f4       	brcc	.+6      	; 0x213c <f_write+0x230>
					cc = fp->fs->csize - fp->csect;
    2136:	79 01       	movw	r14, r18
    2138:	e4 1a       	sub	r14, r20
    213a:	f1 08       	sbc	r15, r1
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    213c:	0e 2d       	mov	r16, r14
    213e:	a3 01       	movw	r20, r6
    2140:	92 01       	movw	r18, r4
    2142:	b4 01       	movw	r22, r8
    2144:	f1 01       	movw	r30, r2
    2146:	81 81       	ldd	r24, Z+1	; 0x01
    2148:	0e 94 97 00 	call	0x12e	; 0x12e <disk_write>
    214c:	88 23       	and	r24, r24
    214e:	51 f0       	breq	.+20     	; 0x2164 <f_write+0x258>
					ABORT(fp->fs, FR_DISK_ERR);
    2150:	ab 81       	ldd	r26, Y+3	; 0x03
    2152:	bc 81       	ldd	r27, Y+4	; 0x04
    2154:	14 96       	adiw	r26, 0x04	; 4
    2156:	8c 91       	ld	r24, X
    2158:	14 97       	sbiw	r26, 0x04	; 4
    215a:	80 68       	ori	r24, 0x80	; 128
    215c:	14 96       	adiw	r26, 0x04	; 4
    215e:	8c 93       	st	X, r24
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	c9 c0       	rjmp	.+402    	; 0x22f6 <f_write+0x3ea>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    2164:	eb 81       	ldd	r30, Y+3	; 0x03
    2166:	fc 81       	ldd	r31, Y+4	; 0x04
    2168:	86 89       	ldd	r24, Z+22	; 0x16
    216a:	97 89       	ldd	r25, Z+23	; 0x17
    216c:	a0 8d       	ldd	r26, Z+24	; 0x18
    216e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2170:	84 19       	sub	r24, r4
    2172:	95 09       	sbc	r25, r5
    2174:	a6 09       	sbc	r26, r6
    2176:	b7 09       	sbc	r27, r7
    2178:	a7 01       	movw	r20, r14
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	84 17       	cp	r24, r20
    2180:	95 07       	cpc	r25, r21
    2182:	a6 07       	cpc	r26, r22
    2184:	b7 07       	cpc	r27, r23
    2186:	a0 f4       	brcc	.+40     	; 0x21b0 <f_write+0x2a4>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    2188:	98 2f       	mov	r25, r24
    218a:	88 27       	eor	r24, r24
    218c:	99 0f       	add	r25, r25
    218e:	b4 01       	movw	r22, r8
    2190:	68 0f       	add	r22, r24
    2192:	79 1f       	adc	r23, r25
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	52 e0       	ldi	r21, 0x02	; 2
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    21a0:	ab 81       	ldd	r26, Y+3	; 0x03
    21a2:	bc 81       	ldd	r27, Y+4	; 0x04
    21a4:	14 96       	adiw	r26, 0x04	; 4
    21a6:	8c 91       	ld	r24, X
    21a8:	14 97       	sbiw	r26, 0x04	; 4
    21aa:	8f 7b       	andi	r24, 0xBF	; 191
    21ac:	14 96       	adiw	r26, 0x04	; 4
    21ae:	8c 93       	st	X, r24
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    21b0:	eb 81       	ldd	r30, Y+3	; 0x03
    21b2:	fc 81       	ldd	r31, Y+4	; 0x04
    21b4:	85 81       	ldd	r24, Z+5	; 0x05
    21b6:	8e 0d       	add	r24, r14
    21b8:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    21ba:	fe 2c       	mov	r15, r14
    21bc:	ee 24       	eor	r14, r14
    21be:	ff 0c       	add	r15, r15
				continue;
    21c0:	5e c0       	rjmp	.+188    	; 0x227e <f_write+0x372>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    21c2:	eb 81       	ldd	r30, Y+3	; 0x03
    21c4:	fc 81       	ldd	r31, Y+4	; 0x04
    21c6:	86 89       	ldd	r24, Z+22	; 0x16
    21c8:	97 89       	ldd	r25, Z+23	; 0x17
    21ca:	a0 8d       	ldd	r26, Z+24	; 0x18
    21cc:	b1 8d       	ldd	r27, Z+25	; 0x19
    21ce:	84 15       	cp	r24, r4
    21d0:	95 05       	cpc	r25, r5
    21d2:	a6 05       	cpc	r26, r6
    21d4:	b7 05       	cpc	r27, r7
    21d6:	01 f1       	breq	.+64     	; 0x2218 <f_write+0x30c>
				if (fp->fptr < fp->fsize &&
    21d8:	46 81       	ldd	r20, Z+6	; 0x06
    21da:	57 81       	ldd	r21, Z+7	; 0x07
    21dc:	60 85       	ldd	r22, Z+8	; 0x08
    21de:	71 85       	ldd	r23, Z+9	; 0x09
    21e0:	82 85       	ldd	r24, Z+10	; 0x0a
    21e2:	93 85       	ldd	r25, Z+11	; 0x0b
    21e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    21e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    21e8:	48 17       	cp	r20, r24
    21ea:	59 07       	cpc	r21, r25
    21ec:	6a 07       	cpc	r22, r26
    21ee:	7b 07       	cpc	r23, r27
    21f0:	98 f4       	brcc	.+38     	; 0x2218 <f_write+0x30c>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    21f2:	01 e0       	ldi	r16, 0x01	; 1
    21f4:	a3 01       	movw	r20, r6
    21f6:	92 01       	movw	r18, r4
    21f8:	69 81       	ldd	r22, Y+1	; 0x01
    21fa:	7a 81       	ldd	r23, Y+2	; 0x02
    21fc:	d1 01       	movw	r26, r2
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	8c 91       	ld	r24, X
    2202:	0e 94 6d 00 	call	0xda	; 0xda <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (fp->fptr < fp->fsize &&
    2206:	88 23       	and	r24, r24
    2208:	39 f0       	breq	.+14     	; 0x2218 <f_write+0x30c>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    220a:	eb 81       	ldd	r30, Y+3	; 0x03
    220c:	fc 81       	ldd	r31, Y+4	; 0x04
    220e:	84 81       	ldd	r24, Z+4	; 0x04
    2210:	80 68       	ori	r24, 0x80	; 128
    2212:	84 83       	std	Z+4, r24	; 0x04
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	6f c0       	rjmp	.+222    	; 0x22f6 <f_write+0x3ea>
			}
#endif
			fp->dsect = sect;
    2218:	ab 81       	ldd	r26, Y+3	; 0x03
    221a:	bc 81       	ldd	r27, Y+4	; 0x04
    221c:	56 96       	adiw	r26, 0x16	; 22
    221e:	4d 92       	st	X+, r4
    2220:	5d 92       	st	X+, r5
    2222:	6d 92       	st	X+, r6
    2224:	7c 92       	st	X, r7
    2226:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    2228:	15 96       	adiw	r26, 0x05	; 5
    222a:	8c 91       	ld	r24, X
    222c:	15 97       	sbiw	r26, 0x05	; 5
    222e:	8f 5f       	subi	r24, 0xFF	; 255
    2230:	15 96       	adiw	r26, 0x05	; 5
    2232:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    2234:	eb 81       	ldd	r30, Y+3	; 0x03
    2236:	fc 81       	ldd	r31, Y+4	; 0x04
    2238:	86 81       	ldd	r24, Z+6	; 0x06
    223a:	97 81       	ldd	r25, Z+7	; 0x07
    223c:	a0 85       	ldd	r26, Z+8	; 0x08
    223e:	b1 85       	ldd	r27, Z+9	; 0x09
    2240:	ac 01       	movw	r20, r24
    2242:	51 70       	andi	r21, 0x01	; 1
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	32 e0       	ldi	r19, 0x02	; 2
    2248:	24 1b       	sub	r18, r20
    224a:	35 0b       	sbc	r19, r21
    224c:	76 01       	movw	r14, r12
    224e:	2c 15       	cp	r18, r12
    2250:	3d 05       	cpc	r19, r13
    2252:	08 f4       	brcc	.+2      	; 0x2256 <f_write+0x34a>
    2254:	79 01       	movw	r14, r18
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2256:	91 70       	andi	r25, 0x01	; 1
    2258:	aa 27       	eor	r26, r26
    225a:	bb 27       	eor	r27, r27
    225c:	80 96       	adiw	r24, 0x20	; 32
    225e:	a7 01       	movw	r20, r14
    2260:	b4 01       	movw	r22, r8
    2262:	2b 81       	ldd	r18, Y+3	; 0x03
    2264:	3c 81       	ldd	r19, Y+4	; 0x04
    2266:	82 0f       	add	r24, r18
    2268:	93 1f       	adc	r25, r19
    226a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <mem_cpy>
		fp->flag |= FA__DIRTY;
    226e:	ab 81       	ldd	r26, Y+3	; 0x03
    2270:	bc 81       	ldd	r27, Y+4	; 0x04
    2272:	14 96       	adiw	r26, 0x04	; 4
    2274:	8c 91       	ld	r24, X
    2276:	14 97       	sbiw	r26, 0x04	; 4
    2278:	80 64       	ori	r24, 0x40	; 64
    227a:	14 96       	adiw	r26, 0x04	; 4
    227c:	8c 93       	st	X, r24
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    227e:	8e 0c       	add	r8, r14
    2280:	9f 1c       	adc	r9, r15
    2282:	eb 81       	ldd	r30, Y+3	; 0x03
    2284:	fc 81       	ldd	r31, Y+4	; 0x04
    2286:	86 81       	ldd	r24, Z+6	; 0x06
    2288:	97 81       	ldd	r25, Z+7	; 0x07
    228a:	a0 85       	ldd	r26, Z+8	; 0x08
    228c:	b1 85       	ldd	r27, Z+9	; 0x09
    228e:	8e 0d       	add	r24, r14
    2290:	9f 1d       	adc	r25, r15
    2292:	a1 1d       	adc	r26, r1
    2294:	b1 1d       	adc	r27, r1
    2296:	86 83       	std	Z+6, r24	; 0x06
    2298:	97 83       	std	Z+7, r25	; 0x07
    229a:	a0 87       	std	Z+8, r26	; 0x08
    229c:	b1 87       	std	Z+9, r27	; 0x09
    229e:	d5 01       	movw	r26, r10
    22a0:	8d 91       	ld	r24, X+
    22a2:	9c 91       	ld	r25, X
    22a4:	11 97       	sbiw	r26, 0x01	; 1
    22a6:	8e 0d       	add	r24, r14
    22a8:	9f 1d       	adc	r25, r15
    22aa:	8d 93       	st	X+, r24
    22ac:	9c 93       	st	X, r25
    22ae:	ce 18       	sub	r12, r14
    22b0:	df 08       	sbc	r13, r15
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <f_write+0x3aa>
    22b4:	76 ce       	rjmp	.-788    	; 0x1fa2 <f_write+0x96>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    22b6:	eb 81       	ldd	r30, Y+3	; 0x03
    22b8:	fc 81       	ldd	r31, Y+4	; 0x04
    22ba:	86 81       	ldd	r24, Z+6	; 0x06
    22bc:	97 81       	ldd	r25, Z+7	; 0x07
    22be:	a0 85       	ldd	r26, Z+8	; 0x08
    22c0:	b1 85       	ldd	r27, Z+9	; 0x09
    22c2:	42 85       	ldd	r20, Z+10	; 0x0a
    22c4:	53 85       	ldd	r21, Z+11	; 0x0b
    22c6:	64 85       	ldd	r22, Z+12	; 0x0c
    22c8:	75 85       	ldd	r23, Z+13	; 0x0d
    22ca:	48 17       	cp	r20, r24
    22cc:	59 07       	cpc	r21, r25
    22ce:	6a 07       	cpc	r22, r26
    22d0:	7b 07       	cpc	r23, r27
    22d2:	20 f4       	brcc	.+8      	; 0x22dc <f_write+0x3d0>
    22d4:	82 87       	std	Z+10, r24	; 0x0a
    22d6:	93 87       	std	Z+11, r25	; 0x0b
    22d8:	a4 87       	std	Z+12, r26	; 0x0c
    22da:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    22dc:	ab 81       	ldd	r26, Y+3	; 0x03
    22de:	bc 81       	ldd	r27, Y+4	; 0x04
    22e0:	14 96       	adiw	r26, 0x04	; 4
    22e2:	8c 91       	ld	r24, X
    22e4:	14 97       	sbiw	r26, 0x04	; 4
    22e6:	80 62       	ori	r24, 0x20	; 32
    22e8:	14 96       	adiw	r26, 0x04	; 4
    22ea:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <f_write+0x3ea>
	*bw = 0;	/* Initialize bytes written */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <f_write+0x3ea>
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    22f4:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	0f 91       	pop	r16
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	df 90       	pop	r13
    230a:	cf 90       	pop	r12
    230c:	bf 90       	pop	r11
    230e:	af 90       	pop	r10
    2310:	9f 90       	pop	r9
    2312:	8f 90       	pop	r8
    2314:	7f 90       	pop	r7
    2316:	6f 90       	pop	r6
    2318:	5f 90       	pop	r5
    231a:	4f 90       	pop	r4
    231c:	3f 90       	pop	r3
    231e:	2f 90       	pop	r2
    2320:	08 95       	ret

00002322 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    232c:	6a 81       	ldd	r22, Y+2	; 0x02
    232e:	7b 81       	ldd	r23, Y+3	; 0x03
    2330:	88 81       	ld	r24, Y
    2332:	99 81       	ldd	r25, Y+1	; 0x01
    2334:	0e 94 81 02 	call	0x502	; 0x502 <validate>
	if (res == FR_OK) {
    2338:	81 11       	cpse	r24, r1
    233a:	4d c0       	rjmp	.+154    	; 0x23d6 <f_sync+0xb4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    233c:	8c 81       	ldd	r24, Y+4	; 0x04
    233e:	85 ff       	sbrs	r24, 5
    2340:	47 c0       	rjmp	.+142    	; 0x23d0 <f_sync+0xae>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    2342:	86 ff       	sbrs	r24, 6
    2344:	12 c0       	rjmp	.+36     	; 0x236a <f_sync+0x48>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    2346:	2e 89       	ldd	r18, Y+22	; 0x16
    2348:	3f 89       	ldd	r19, Y+23	; 0x17
    234a:	48 8d       	ldd	r20, Y+24	; 0x18
    234c:	59 8d       	ldd	r21, Y+25	; 0x19
    234e:	e8 81       	ld	r30, Y
    2350:	f9 81       	ldd	r31, Y+1	; 0x01
    2352:	01 e0       	ldi	r16, 0x01	; 1
    2354:	be 01       	movw	r22, r28
    2356:	60 5e       	subi	r22, 0xE0	; 224
    2358:	7f 4f       	sbci	r23, 0xFF	; 255
    235a:	81 81       	ldd	r24, Z+1	; 0x01
    235c:	0e 94 97 00 	call	0x12e	; 0x12e <disk_write>
    2360:	81 11       	cpse	r24, r1
    2362:	38 c0       	rjmp	.+112    	; 0x23d4 <f_sync+0xb2>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    2364:	8c 81       	ldd	r24, Y+4	; 0x04
    2366:	8f 7b       	andi	r24, 0xBF	; 191
    2368:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    236a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    236c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    236e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2370:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2372:	88 81       	ld	r24, Y
    2374:	99 81       	ldd	r25, Y+1	; 0x01
    2376:	0e 94 9a 01 	call	0x334	; 0x334 <move_window>
			if (res == FR_OK) {
    237a:	81 11       	cpse	r24, r1
    237c:	2c c0       	rjmp	.+88     	; 0x23d6 <f_sync+0xb4>
				dir = fp->dir_ptr;
    237e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2380:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2382:	f8 01       	movw	r30, r16
    2384:	83 85       	ldd	r24, Z+11	; 0x0b
    2386:	80 62       	ori	r24, 0x20	; 32
    2388:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    238a:	8a 85       	ldd	r24, Y+10	; 0x0a
    238c:	84 8f       	std	Z+28, r24	; 0x1c
    238e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2390:	85 8f       	std	Z+29, r24	; 0x1d
    2392:	8c 85       	ldd	r24, Y+12	; 0x0c
    2394:	86 8f       	std	Z+30, r24	; 0x1e
    2396:	8d 85       	ldd	r24, Y+13	; 0x0d
    2398:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    239a:	8e 85       	ldd	r24, Y+14	; 0x0e
    239c:	82 8f       	std	Z+26, r24	; 0x1a
    239e:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a0:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    23a2:	88 89       	ldd	r24, Y+16	; 0x10
    23a4:	84 8b       	std	Z+20, r24	; 0x14
    23a6:	89 89       	ldd	r24, Y+17	; 0x11
    23a8:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
    23aa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    23ae:	f8 01       	movw	r30, r16
    23b0:	66 8b       	std	Z+22, r22	; 0x16
    23b2:	77 8b       	std	Z+23, r23	; 0x17
    23b4:	80 8f       	std	Z+24, r24	; 0x18
    23b6:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	8f 7d       	andi	r24, 0xDF	; 223
    23bc:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    23be:	e8 81       	ld	r30, Y
    23c0:	f9 81       	ldd	r31, Y+1	; 0x01
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    23c6:	88 81       	ld	r24, Y
    23c8:	99 81       	ldd	r25, Y+1	; 0x01
    23ca:	0e 94 9b 02 	call	0x536	; 0x536 <sync>
    23ce:	03 c0       	rjmp	.+6      	; 0x23d6 <f_sync+0xb4>
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <f_sync+0xb4>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    23d4:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    23e6:	0e 94 91 11 	call	0x2322	; 0x2322 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    23ea:	81 11       	cpse	r24, r1
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <f_close+0x12>
    23ee:	19 82       	std	Y+1, r1	; 0x01
    23f0:	18 82       	st	Y, r1
	return res;
#endif
}
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	08 95       	ret

000023f8 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    23f8:	2f 92       	push	r2
    23fa:	3f 92       	push	r3
    23fc:	4f 92       	push	r4
    23fe:	5f 92       	push	r5
    2400:	6f 92       	push	r6
    2402:	7f 92       	push	r7
    2404:	8f 92       	push	r8
    2406:	9f 92       	push	r9
    2408:	af 92       	push	r10
    240a:	bf 92       	push	r11
    240c:	cf 92       	push	r12
    240e:	df 92       	push	r13
    2410:	ef 92       	push	r14
    2412:	ff 92       	push	r15
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	00 d0       	rcall	.+0      	; 0x241e <f_lseek+0x26>
    241e:	00 d0       	rcall	.+0      	; 0x2420 <f_lseek+0x28>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	1c 01       	movw	r2, r24
    2426:	6a 01       	movw	r12, r20
    2428:	7b 01       	movw	r14, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    242a:	dc 01       	movw	r26, r24
    242c:	12 96       	adiw	r26, 0x02	; 2
    242e:	6d 91       	ld	r22, X+
    2430:	7c 91       	ld	r23, X
    2432:	13 97       	sbiw	r26, 0x03	; 3
    2434:	8d 91       	ld	r24, X+
    2436:	9c 91       	ld	r25, X
    2438:	0e 94 81 02 	call	0x502	; 0x502 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    243c:	81 11       	cpse	r24, r1
    243e:	d0 c1       	rjmp	.+928    	; 0x27e0 <f_lseek+0x3e8>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2440:	f1 01       	movw	r30, r2
    2442:	84 81       	ldd	r24, Z+4	; 0x04
    2444:	88 23       	and	r24, r24
    2446:	0c f4       	brge	.+2      	; 0x244a <f_lseek+0x52>
    2448:	c8 c1       	rjmp	.+912    	; 0x27da <f_lseek+0x3e2>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    244a:	42 85       	ldd	r20, Z+10	; 0x0a
    244c:	53 85       	ldd	r21, Z+11	; 0x0b
    244e:	64 85       	ldd	r22, Z+12	; 0x0c
    2450:	75 85       	ldd	r23, Z+13	; 0x0d
    2452:	4c 15       	cp	r20, r12
    2454:	5d 05       	cpc	r21, r13
    2456:	6e 05       	cpc	r22, r14
    2458:	7f 05       	cpc	r23, r15
    245a:	20 f4       	brcc	.+8      	; 0x2464 <f_lseek+0x6c>
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
    245c:	81 fd       	sbrc	r24, 1
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <f_lseek+0x6c>
#endif
		) ofs = fp->fsize;
    2460:	6a 01       	movw	r12, r20
    2462:	7b 01       	movw	r14, r22

	ifptr = fp->fptr;
    2464:	d1 01       	movw	r26, r2
    2466:	16 96       	adiw	r26, 0x06	; 6
    2468:	4d 90       	ld	r4, X+
    246a:	5d 90       	ld	r5, X+
    246c:	6d 90       	ld	r6, X+
    246e:	7c 90       	ld	r7, X
    2470:	19 97       	sbiw	r26, 0x09	; 9
	fp->fptr = nsect = 0; fp->csect = 255;
    2472:	f1 01       	movw	r30, r2
    2474:	16 82       	std	Z+6, r1	; 0x06
    2476:	17 82       	std	Z+7, r1	; 0x07
    2478:	10 86       	std	Z+8, r1	; 0x08
    247a:	11 86       	std	Z+9, r1	; 0x09
    247c:	8f ef       	ldi	r24, 0xFF	; 255
    247e:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    2480:	c1 14       	cp	r12, r1
    2482:	d1 04       	cpc	r13, r1
    2484:	e1 04       	cpc	r14, r1
    2486:	f1 04       	cpc	r15, r1
    2488:	09 f4       	brne	.+2      	; 0x248c <f_lseek+0x94>
    248a:	38 c1       	rjmp	.+624    	; 0x26fc <f_lseek+0x304>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    248c:	00 81       	ld	r16, Z
    248e:	11 81       	ldd	r17, Z+1	; 0x01
    2490:	d8 01       	movw	r26, r16
    2492:	12 96       	adiw	r26, 0x02	; 2
    2494:	8c 90       	ld	r8, X
    2496:	91 2c       	mov	r9, r1
    2498:	a1 2c       	mov	r10, r1
    249a:	b1 2c       	mov	r11, r1
    249c:	07 2e       	mov	r0, r23
    249e:	79 e0       	ldi	r23, 0x09	; 9
    24a0:	88 0c       	add	r8, r8
    24a2:	99 1c       	adc	r9, r9
    24a4:	aa 1c       	adc	r10, r10
    24a6:	bb 1c       	adc	r11, r11
    24a8:	7a 95       	dec	r23
    24aa:	d1 f7       	brne	.-12     	; 0x24a0 <f_lseek+0xa8>
    24ac:	70 2d       	mov	r23, r0
		if (ifptr > 0 &&
    24ae:	41 14       	cp	r4, r1
    24b0:	51 04       	cpc	r5, r1
    24b2:	61 04       	cpc	r6, r1
    24b4:	71 04       	cpc	r7, r1
    24b6:	09 f4       	brne	.+2      	; 0x24ba <f_lseek+0xc2>
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <f_lseek+0x140>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    24ba:	b1 e0       	ldi	r27, 0x01	; 1
    24bc:	4b 1a       	sub	r4, r27
    24be:	51 08       	sbc	r5, r1
    24c0:	61 08       	sbc	r6, r1
    24c2:	71 08       	sbc	r7, r1
    24c4:	c7 01       	movw	r24, r14
    24c6:	b6 01       	movw	r22, r12
    24c8:	61 50       	subi	r22, 0x01	; 1
    24ca:	71 09       	sbc	r23, r1
    24cc:	81 09       	sbc	r24, r1
    24ce:	91 09       	sbc	r25, r1
    24d0:	a5 01       	movw	r20, r10
    24d2:	94 01       	movw	r18, r8
    24d4:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__udivmodsi4>
    24d8:	29 83       	std	Y+1, r18	; 0x01
    24da:	3a 83       	std	Y+2, r19	; 0x02
    24dc:	4b 83       	std	Y+3, r20	; 0x03
    24de:	5c 83       	std	Y+4, r21	; 0x04
    24e0:	c3 01       	movw	r24, r6
    24e2:	b2 01       	movw	r22, r4
    24e4:	a5 01       	movw	r20, r10
    24e6:	94 01       	movw	r18, r8
    24e8:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__udivmodsi4>

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
	if (ofs > 0) {
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
		if (ifptr > 0 &&
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	ab 81       	ldd	r26, Y+3	; 0x03
    24f2:	bc 81       	ldd	r27, Y+4	; 0x04
    24f4:	82 17       	cp	r24, r18
    24f6:	93 07       	cpc	r25, r19
    24f8:	a4 07       	cpc	r26, r20
    24fa:	b5 07       	cpc	r27, r21
    24fc:	e8 f0       	brcs	.+58     	; 0x2538 <f_lseek+0x140>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    24fe:	88 27       	eor	r24, r24
    2500:	99 27       	eor	r25, r25
    2502:	dc 01       	movw	r26, r24
    2504:	88 19       	sub	r24, r8
    2506:	99 09       	sbc	r25, r9
    2508:	aa 09       	sbc	r26, r10
    250a:	bb 09       	sbc	r27, r11
    250c:	48 22       	and	r4, r24
    250e:	59 22       	and	r5, r25
    2510:	6a 22       	and	r6, r26
    2512:	7b 22       	and	r7, r27
    2514:	d1 01       	movw	r26, r2
    2516:	16 96       	adiw	r26, 0x06	; 6
    2518:	4d 92       	st	X+, r4
    251a:	5d 92       	st	X+, r5
    251c:	6d 92       	st	X+, r6
    251e:	7c 92       	st	X, r7
    2520:	19 97       	sbiw	r26, 0x09	; 9
			ofs -= fp->fptr;
    2522:	c4 18       	sub	r12, r4
    2524:	d5 08       	sbc	r13, r5
    2526:	e6 08       	sbc	r14, r6
    2528:	f7 08       	sbc	r15, r7
			clst = fp->curr_clust;
    252a:	52 96       	adiw	r26, 0x12	; 18
    252c:	4d 91       	ld	r20, X+
    252e:	5d 91       	ld	r21, X+
    2530:	6d 91       	ld	r22, X+
    2532:	7c 91       	ld	r23, X
    2534:	55 97       	sbiw	r26, 0x15	; 21
    2536:	38 c0       	rjmp	.+112    	; 0x25a8 <f_lseek+0x1b0>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    2538:	f1 01       	movw	r30, r2
    253a:	46 85       	ldd	r20, Z+14	; 0x0e
    253c:	57 85       	ldd	r21, Z+15	; 0x0f
    253e:	60 89       	ldd	r22, Z+16	; 0x10
    2540:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    2542:	41 15       	cp	r20, r1
    2544:	51 05       	cpc	r21, r1
    2546:	61 05       	cpc	r22, r1
    2548:	71 05       	cpc	r23, r1
    254a:	49 f5       	brne	.+82     	; 0x259e <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	ba 01       	movw	r22, r20
    2552:	c8 01       	movw	r24, r16
    2554:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <create_chain>
    2558:	ab 01       	movw	r20, r22
    255a:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    255c:	41 30       	cpi	r20, 0x01	; 1
    255e:	51 05       	cpc	r21, r1
    2560:	61 05       	cpc	r22, r1
    2562:	71 05       	cpc	r23, r1
    2564:	49 f4       	brne	.+18     	; 0x2578 <f_lseek+0x180>
    2566:	d1 01       	movw	r26, r2
    2568:	14 96       	adiw	r26, 0x04	; 4
    256a:	8c 91       	ld	r24, X
    256c:	14 97       	sbiw	r26, 0x04	; 4
    256e:	80 68       	ori	r24, 0x80	; 128
    2570:	14 96       	adiw	r26, 0x04	; 4
    2572:	8c 93       	st	X, r24
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	34 c1       	rjmp	.+616    	; 0x27e0 <f_lseek+0x3e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2578:	4f 3f       	cpi	r20, 0xFF	; 255
    257a:	bf ef       	ldi	r27, 0xFF	; 255
    257c:	5b 07       	cpc	r21, r27
    257e:	6b 07       	cpc	r22, r27
    2580:	7b 07       	cpc	r23, r27
    2582:	31 f4       	brne	.+12     	; 0x2590 <f_lseek+0x198>
    2584:	f1 01       	movw	r30, r2
    2586:	84 81       	ldd	r24, Z+4	; 0x04
    2588:	80 68       	ori	r24, 0x80	; 128
    258a:	84 83       	std	Z+4, r24	; 0x04
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	28 c1       	rjmp	.+592    	; 0x27e0 <f_lseek+0x3e8>
				fp->org_clust = clst;
    2590:	d1 01       	movw	r26, r2
    2592:	1e 96       	adiw	r26, 0x0e	; 14
    2594:	4d 93       	st	X+, r20
    2596:	5d 93       	st	X+, r21
    2598:	6d 93       	st	X+, r22
    259a:	7c 93       	st	X, r23
    259c:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    259e:	f1 01       	movw	r30, r2
    25a0:	42 8b       	std	Z+18, r20	; 0x12
    25a2:	53 8b       	std	Z+19, r21	; 0x13
    25a4:	64 8b       	std	Z+20, r22	; 0x14
    25a6:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    25a8:	41 15       	cp	r20, r1
    25aa:	51 05       	cpc	r21, r1
    25ac:	61 05       	cpc	r22, r1
    25ae:	71 05       	cpc	r23, r1
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <f_lseek+0x1bc>
    25b2:	a8 c0       	rjmp	.+336    	; 0x2704 <f_lseek+0x30c>
			while (ofs > bcs) {						/* Cluster following loop */
    25b4:	8c 14       	cp	r8, r12
    25b6:	9d 04       	cpc	r9, r13
    25b8:	ae 04       	cpc	r10, r14
    25ba:	bf 04       	cpc	r11, r15
    25bc:	08 f0       	brcs	.+2      	; 0x25c0 <f_lseek+0x1c8>
    25be:	62 c0       	rjmp	.+196    	; 0x2684 <f_lseek+0x28c>
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    25c0:	d1 01       	movw	r26, r2
    25c2:	14 96       	adiw	r26, 0x04	; 4
    25c4:	8c 91       	ld	r24, X
    25c6:	14 97       	sbiw	r26, 0x04	; 4
    25c8:	81 ff       	sbrs	r24, 1
    25ca:	0c c0       	rjmp	.+24     	; 0x25e4 <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    25cc:	8d 91       	ld	r24, X+
    25ce:	9c 91       	ld	r25, X
    25d0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <create_chain>
    25d4:	ab 01       	movw	r20, r22
    25d6:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    25d8:	41 15       	cp	r20, r1
    25da:	51 05       	cpc	r21, r1
    25dc:	61 05       	cpc	r22, r1
    25de:	71 05       	cpc	r23, r1
    25e0:	41 f4       	brne	.+16     	; 0x25f2 <f_lseek+0x1fa>
    25e2:	4e c0       	rjmp	.+156    	; 0x2680 <f_lseek+0x288>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    25e4:	f1 01       	movw	r30, r2
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	0e 94 06 03 	call	0x60c	; 0x60c <get_fat>
    25ee:	ab 01       	movw	r20, r22
    25f0:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    25f2:	4f 3f       	cpi	r20, 0xFF	; 255
    25f4:	ff ef       	ldi	r31, 0xFF	; 255
    25f6:	5f 07       	cpc	r21, r31
    25f8:	6f 07       	cpc	r22, r31
    25fa:	7f 07       	cpc	r23, r31
    25fc:	49 f4       	brne	.+18     	; 0x2610 <f_lseek+0x218>
    25fe:	d1 01       	movw	r26, r2
    2600:	14 96       	adiw	r26, 0x04	; 4
    2602:	8c 91       	ld	r24, X
    2604:	14 97       	sbiw	r26, 0x04	; 4
    2606:	80 68       	ori	r24, 0x80	; 128
    2608:	14 96       	adiw	r26, 0x04	; 4
    260a:	8c 93       	st	X, r24
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	e8 c0       	rjmp	.+464    	; 0x27e0 <f_lseek+0x3e8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    2610:	42 30       	cpi	r20, 0x02	; 2
    2612:	51 05       	cpc	r21, r1
    2614:	61 05       	cpc	r22, r1
    2616:	71 05       	cpc	r23, r1
    2618:	60 f0       	brcs	.+24     	; 0x2632 <f_lseek+0x23a>
    261a:	d1 01       	movw	r26, r2
    261c:	ed 91       	ld	r30, X+
    261e:	fc 91       	ld	r31, X
    2620:	82 8d       	ldd	r24, Z+26	; 0x1a
    2622:	93 8d       	ldd	r25, Z+27	; 0x1b
    2624:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2626:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2628:	48 17       	cp	r20, r24
    262a:	59 07       	cpc	r21, r25
    262c:	6a 07       	cpc	r22, r26
    262e:	7b 07       	cpc	r23, r27
    2630:	30 f0       	brcs	.+12     	; 0x263e <f_lseek+0x246>
    2632:	f1 01       	movw	r30, r2
    2634:	84 81       	ldd	r24, Z+4	; 0x04
    2636:	80 68       	ori	r24, 0x80	; 128
    2638:	84 83       	std	Z+4, r24	; 0x04
    263a:	82 e0       	ldi	r24, 0x02	; 2
    263c:	d1 c0       	rjmp	.+418    	; 0x27e0 <f_lseek+0x3e8>
				fp->curr_clust = clst;
    263e:	d1 01       	movw	r26, r2
    2640:	52 96       	adiw	r26, 0x12	; 18
    2642:	4d 93       	st	X+, r20
    2644:	5d 93       	st	X+, r21
    2646:	6d 93       	st	X+, r22
    2648:	7c 93       	st	X, r23
    264a:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    264c:	16 96       	adiw	r26, 0x06	; 6
    264e:	8d 91       	ld	r24, X+
    2650:	9d 91       	ld	r25, X+
    2652:	0d 90       	ld	r0, X+
    2654:	bc 91       	ld	r27, X
    2656:	a0 2d       	mov	r26, r0
    2658:	88 0d       	add	r24, r8
    265a:	99 1d       	adc	r25, r9
    265c:	aa 1d       	adc	r26, r10
    265e:	bb 1d       	adc	r27, r11
    2660:	f1 01       	movw	r30, r2
    2662:	86 83       	std	Z+6, r24	; 0x06
    2664:	97 83       	std	Z+7, r25	; 0x07
    2666:	a0 87       	std	Z+8, r26	; 0x08
    2668:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    266a:	c8 18       	sub	r12, r8
    266c:	d9 08       	sbc	r13, r9
    266e:	ea 08       	sbc	r14, r10
    2670:	fb 08       	sbc	r15, r11
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    2672:	8c 14       	cp	r8, r12
    2674:	9d 04       	cpc	r9, r13
    2676:	ae 04       	cpc	r10, r14
    2678:	bf 04       	cpc	r11, r15
    267a:	08 f4       	brcc	.+2      	; 0x267e <f_lseek+0x286>
    267c:	a1 cf       	rjmp	.-190    	; 0x25c0 <f_lseek+0x1c8>
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <f_lseek+0x28c>
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
					if (clst == 0) {				/* When disk gets full, clip file size */
						ofs = bcs; break;
    2680:	75 01       	movw	r14, r10
    2682:	64 01       	movw	r12, r8
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    2684:	f1 01       	movw	r30, r2
    2686:	86 81       	ldd	r24, Z+6	; 0x06
    2688:	97 81       	ldd	r25, Z+7	; 0x07
    268a:	a0 85       	ldd	r26, Z+8	; 0x08
    268c:	b1 85       	ldd	r27, Z+9	; 0x09
    268e:	8c 0d       	add	r24, r12
    2690:	9d 1d       	adc	r25, r13
    2692:	ae 1d       	adc	r26, r14
    2694:	bf 1d       	adc	r27, r15
    2696:	86 83       	std	Z+6, r24	; 0x06
    2698:	97 83       	std	Z+7, r25	; 0x07
    269a:	a0 87       	std	Z+8, r26	; 0x08
    269c:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    269e:	46 01       	movw	r8, r12
    26a0:	57 01       	movw	r10, r14
    26a2:	07 2e       	mov	r0, r23
    26a4:	79 e0       	ldi	r23, 0x09	; 9
    26a6:	b6 94       	lsr	r11
    26a8:	a7 94       	ror	r10
    26aa:	97 94       	ror	r9
    26ac:	87 94       	ror	r8
    26ae:	7a 95       	dec	r23
    26b0:	d1 f7       	brne	.-12     	; 0x26a6 <f_lseek+0x2ae>
    26b2:	70 2d       	mov	r23, r0
    26b4:	85 82       	std	Z+5, r8	; 0x05
			if (ofs % SS(fp->fs)) {
    26b6:	f1 e0       	ldi	r31, 0x01	; 1
    26b8:	df 22       	and	r13, r31
    26ba:	ee 24       	eor	r14, r14
    26bc:	ff 24       	eor	r15, r15
    26be:	cd 28       	or	r12, r13
    26c0:	ce 28       	or	r12, r14
    26c2:	cf 28       	or	r12, r15
    26c4:	19 f1       	breq	.+70     	; 0x270c <f_lseek+0x314>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    26c6:	d1 01       	movw	r26, r2
    26c8:	8d 91       	ld	r24, X+
    26ca:	9c 91       	ld	r25, X
    26cc:	0e 94 97 06 	call	0xd2e	; 0xd2e <clust2sect>
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    26d0:	61 15       	cp	r22, r1
    26d2:	71 05       	cpc	r23, r1
    26d4:	81 05       	cpc	r24, r1
    26d6:	91 05       	cpc	r25, r1
    26d8:	31 f4       	brne	.+12     	; 0x26e6 <f_lseek+0x2ee>
    26da:	f1 01       	movw	r30, r2
    26dc:	84 81       	ldd	r24, Z+4	; 0x04
    26de:	80 68       	ori	r24, 0x80	; 128
    26e0:	84 83       	std	Z+4, r24	; 0x04
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	7d c0       	rjmp	.+250    	; 0x27e0 <f_lseek+0x3e8>
				nsect += fp->csect;
    26e6:	6b 01       	movw	r12, r22
    26e8:	7c 01       	movw	r14, r24
    26ea:	c8 0c       	add	r12, r8
    26ec:	d1 1c       	adc	r13, r1
    26ee:	e1 1c       	adc	r14, r1
    26f0:	f1 1c       	adc	r15, r1
				fp->csect++;
    26f2:	83 94       	inc	r8
    26f4:	d1 01       	movw	r26, r2
    26f6:	15 96       	adiw	r26, 0x05	; 5
    26f8:	8c 92       	st	X, r8
    26fa:	0b c0       	rjmp	.+22     	; 0x2712 <f_lseek+0x31a>
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
    26fc:	c1 2c       	mov	r12, r1
    26fe:	d1 2c       	mov	r13, r1
    2700:	76 01       	movw	r14, r12
    2702:	07 c0       	rjmp	.+14     	; 0x2712 <f_lseek+0x31a>
    2704:	c1 2c       	mov	r12, r1
    2706:	d1 2c       	mov	r13, r1
    2708:	76 01       	movw	r14, r12
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <f_lseek+0x31a>
    270c:	c1 2c       	mov	r12, r1
    270e:	d1 2c       	mov	r13, r1
    2710:	76 01       	movw	r14, r12
				nsect += fp->csect;
				fp->csect++;
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    2712:	f1 01       	movw	r30, r2
    2714:	86 81       	ldd	r24, Z+6	; 0x06
    2716:	97 81       	ldd	r25, Z+7	; 0x07
    2718:	a0 85       	ldd	r26, Z+8	; 0x08
    271a:	b1 85       	ldd	r27, Z+9	; 0x09
    271c:	91 70       	andi	r25, 0x01	; 1
    271e:	aa 27       	eor	r26, r26
    2720:	bb 27       	eor	r27, r27
    2722:	89 2b       	or	r24, r25
    2724:	8a 2b       	or	r24, r26
    2726:	8b 2b       	or	r24, r27
    2728:	09 f4       	brne	.+2      	; 0x272c <f_lseek+0x334>
    272a:	40 c0       	rjmp	.+128    	; 0x27ac <f_lseek+0x3b4>
    272c:	26 89       	ldd	r18, Z+22	; 0x16
    272e:	37 89       	ldd	r19, Z+23	; 0x17
    2730:	40 8d       	ldd	r20, Z+24	; 0x18
    2732:	51 8d       	ldd	r21, Z+25	; 0x19
    2734:	2c 15       	cp	r18, r12
    2736:	3d 05       	cpc	r19, r13
    2738:	4e 05       	cpc	r20, r14
    273a:	5f 05       	cpc	r21, r15
    273c:	b9 f1       	breq	.+110    	; 0x27ac <f_lseek+0x3b4>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    273e:	84 81       	ldd	r24, Z+4	; 0x04
    2740:	86 ff       	sbrs	r24, 6
    2742:	19 c0       	rjmp	.+50     	; 0x2776 <f_lseek+0x37e>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    2744:	01 90       	ld	r0, Z+
    2746:	f0 81       	ld	r31, Z
    2748:	e0 2d       	mov	r30, r0
    274a:	01 e0       	ldi	r16, 0x01	; 1
    274c:	b1 01       	movw	r22, r2
    274e:	60 5e       	subi	r22, 0xE0	; 224
    2750:	7f 4f       	sbci	r23, 0xFF	; 255
    2752:	81 81       	ldd	r24, Z+1	; 0x01
    2754:	0e 94 97 00 	call	0x12e	; 0x12e <disk_write>
    2758:	88 23       	and	r24, r24
    275a:	49 f0       	breq	.+18     	; 0x276e <f_lseek+0x376>
				ABORT(fp->fs, FR_DISK_ERR);
    275c:	d1 01       	movw	r26, r2
    275e:	14 96       	adiw	r26, 0x04	; 4
    2760:	8c 91       	ld	r24, X
    2762:	14 97       	sbiw	r26, 0x04	; 4
    2764:	80 68       	ori	r24, 0x80	; 128
    2766:	14 96       	adiw	r26, 0x04	; 4
    2768:	8c 93       	st	X, r24
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	39 c0       	rjmp	.+114    	; 0x27e0 <f_lseek+0x3e8>
			fp->flag &= ~FA__DIRTY;
    276e:	f1 01       	movw	r30, r2
    2770:	84 81       	ldd	r24, Z+4	; 0x04
    2772:	8f 7b       	andi	r24, 0xBF	; 191
    2774:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    2776:	d1 01       	movw	r26, r2
    2778:	ed 91       	ld	r30, X+
    277a:	fc 91       	ld	r31, X
    277c:	01 e0       	ldi	r16, 0x01	; 1
    277e:	a7 01       	movw	r20, r14
    2780:	96 01       	movw	r18, r12
    2782:	b1 01       	movw	r22, r2
    2784:	60 5e       	subi	r22, 0xE0	; 224
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	81 81       	ldd	r24, Z+1	; 0x01
    278a:	0e 94 6d 00 	call	0xda	; 0xda <disk_read>
    278e:	88 23       	and	r24, r24
    2790:	31 f0       	breq	.+12     	; 0x279e <f_lseek+0x3a6>
			ABORT(fp->fs, FR_DISK_ERR);
    2792:	f1 01       	movw	r30, r2
    2794:	84 81       	ldd	r24, Z+4	; 0x04
    2796:	80 68       	ori	r24, 0x80	; 128
    2798:	84 83       	std	Z+4, r24	; 0x04
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	21 c0       	rjmp	.+66     	; 0x27e0 <f_lseek+0x3e8>
#endif
		fp->dsect = nsect;
    279e:	d1 01       	movw	r26, r2
    27a0:	56 96       	adiw	r26, 0x16	; 22
    27a2:	cd 92       	st	X+, r12
    27a4:	dd 92       	st	X+, r13
    27a6:	ed 92       	st	X+, r14
    27a8:	fc 92       	st	X, r15
    27aa:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    27ac:	f1 01       	movw	r30, r2
    27ae:	86 81       	ldd	r24, Z+6	; 0x06
    27b0:	97 81       	ldd	r25, Z+7	; 0x07
    27b2:	a0 85       	ldd	r26, Z+8	; 0x08
    27b4:	b1 85       	ldd	r27, Z+9	; 0x09
    27b6:	42 85       	ldd	r20, Z+10	; 0x0a
    27b8:	53 85       	ldd	r21, Z+11	; 0x0b
    27ba:	64 85       	ldd	r22, Z+12	; 0x0c
    27bc:	75 85       	ldd	r23, Z+13	; 0x0d
    27be:	48 17       	cp	r20, r24
    27c0:	59 07       	cpc	r21, r25
    27c2:	6a 07       	cpc	r22, r26
    27c4:	7b 07       	cpc	r23, r27
    27c6:	58 f4       	brcc	.+22     	; 0x27de <f_lseek+0x3e6>
		fp->fsize = fp->fptr;
    27c8:	82 87       	std	Z+10, r24	; 0x0a
    27ca:	93 87       	std	Z+11, r25	; 0x0b
    27cc:	a4 87       	std	Z+12, r26	; 0x0c
    27ce:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA__WRITTEN;
    27d0:	84 81       	ldd	r24, Z+4	; 0x04
    27d2:	80 62       	ori	r24, 0x20	; 32
    27d4:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	03 c0       	rjmp	.+6      	; 0x27e0 <f_lseek+0x3e8>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	01 c0       	rjmp	.+2      	; 0x27e0 <f_lseek+0x3e8>
		fp->fsize = fp->fptr;
		fp->flag |= FA__WRITTEN;
	}
#endif

	LEAVE_FF(fp->fs, res);
    27de:	80 e0       	ldi	r24, 0x00	; 0
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	ff 90       	pop	r15
    27f2:	ef 90       	pop	r14
    27f4:	df 90       	pop	r13
    27f6:	cf 90       	pop	r12
    27f8:	bf 90       	pop	r11
    27fa:	af 90       	pop	r10
    27fc:	9f 90       	pop	r9
    27fe:	8f 90       	pop	r8
    2800:	7f 90       	pop	r7
    2802:	6f 90       	pop	r6
    2804:	5f 90       	pop	r5
    2806:	4f 90       	pop	r4
    2808:	3f 90       	pop	r3
    280a:	2f 90       	pop	r2
    280c:	08 95       	ret

0000280e <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	a4 97       	sbiw	r28, 0x24	; 36
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	9c a3       	std	Y+36, r25	; 0x24
    282a:	8b a3       	std	Y+35, r24	; 0x23
    282c:	7b 01       	movw	r14, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	be 01       	movw	r22, r28
    2832:	6f 5f       	subi	r22, 0xFF	; 255
    2834:	7f 4f       	sbci	r23, 0xFF	; 255
    2836:	ce 01       	movw	r24, r28
    2838:	83 96       	adiw	r24, 0x23	; 35
    283a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <chk_mounted>
    283e:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2840:	81 11       	cpse	r24, r1
    2842:	17 c0       	rjmp	.+46     	; 0x2872 <f_stat+0x64>
		INITBUF(dj, sfn, lfn);
    2844:	ce 01       	movw	r24, r28
    2846:	47 96       	adiw	r24, 0x17	; 23
    2848:	9e 8b       	std	Y+22, r25	; 0x16
    284a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    284c:	6b a1       	ldd	r22, Y+35	; 0x23
    284e:	7c a1       	ldd	r23, Y+36	; 0x24
    2850:	46 97       	sbiw	r24, 0x16	; 22
    2852:	0e 94 c2 08 	call	0x1184	; 0x1184 <follow_path>
    2856:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    2858:	81 11       	cpse	r24, r1
    285a:	0b c0       	rjmp	.+22     	; 0x2872 <f_stat+0x64>
			if (dj.dir)	/* Found an object */
    285c:	8b 89       	ldd	r24, Y+19	; 0x13
    285e:	9c 89       	ldd	r25, Y+20	; 0x14
    2860:	89 2b       	or	r24, r25
    2862:	31 f0       	breq	.+12     	; 0x2870 <f_stat+0x62>
				get_fileinfo(&dj, fno);
    2864:	b7 01       	movw	r22, r14
    2866:	ce 01       	movw	r24, r28
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <get_fileinfo>
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <f_stat+0x64>
			else		/* It is root dir */
				res = FR_INVALID_NAME;
    2870:	16 e0       	ldi	r17, 0x06	; 6
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2872:	81 2f       	mov	r24, r17
    2874:	a4 96       	adiw	r28, 0x24	; 36
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	ff 90       	pop	r15
    2888:	ef 90       	pop	r14
    288a:	08 95       	ret

0000288c <I2C_Start>:



void I2C_Start(void)
{
	SDA_OUT;
    288c:	57 9a       	sbi	0x0a, 7	; 10
	SDA_H;
    288e:	5f 9a       	sbi	0x0b, 7	; 11
	SCL_H;
    2890:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2892:	85 e0       	ldi	r24, 0x05	; 5
    2894:	8a 95       	dec	r24
    2896:	f1 f7       	brne	.-4      	; 0x2894 <I2C_Start+0x8>
    2898:	00 00       	nop
	I2C_DELAY;	
	SDA_L;
    289a:	5f 98       	cbi	0x0b, 7	; 11
    289c:	85 e0       	ldi	r24, 0x05	; 5
    289e:	8a 95       	dec	r24
    28a0:	f1 f7       	brne	.-4      	; 0x289e <I2C_Start+0x12>
    28a2:	00 00       	nop
    28a4:	08 95       	ret

000028a6 <I2C_Stop>:
	I2C_DELAY;
}

void I2C_Stop(void)
{
	SCL_L;
    28a6:	5e 98       	cbi	0x0b, 6	; 11
    28a8:	85 e0       	ldi	r24, 0x05	; 5
    28aa:	8a 95       	dec	r24
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <I2C_Stop+0x4>
    28ae:	00 00       	nop
	I2C_DELAY;
	SDA_L;
    28b0:	5f 98       	cbi	0x0b, 7	; 11
    28b2:	85 e0       	ldi	r24, 0x05	; 5
    28b4:	8a 95       	dec	r24
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <I2C_Stop+0xe>
    28b8:	00 00       	nop
	I2C_DELAY;
	SCL_H;
    28ba:	5e 9a       	sbi	0x0b, 6	; 11
    28bc:	85 e0       	ldi	r24, 0x05	; 5
    28be:	8a 95       	dec	r24
    28c0:	f1 f7       	brne	.-4      	; 0x28be <I2C_Stop+0x18>
    28c2:	00 00       	nop
	I2C_DELAY;
	SDA_H;
    28c4:	5f 9a       	sbi	0x0b, 7	; 11
    28c6:	85 e0       	ldi	r24, 0x05	; 5
    28c8:	8a 95       	dec	r24
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <I2C_Stop+0x22>
    28cc:	00 00       	nop
    28ce:	08 95       	ret

000028d0 <I2C_Ack>:
	I2C_DELAY;
}

void I2C_Ack(void)
{
	SCL_L;
    28d0:	5e 98       	cbi	0x0b, 6	; 11
    28d2:	85 e0       	ldi	r24, 0x05	; 5
    28d4:	8a 95       	dec	r24
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <I2C_Ack+0x4>
    28d8:	00 00       	nop
	I2C_DELAY;
	SDA_L;
    28da:	5f 98       	cbi	0x0b, 7	; 11
    28dc:	85 e0       	ldi	r24, 0x05	; 5
    28de:	8a 95       	dec	r24
    28e0:	f1 f7       	brne	.-4      	; 0x28de <I2C_Ack+0xe>
    28e2:	00 00       	nop
	I2C_DELAY;
	SCL_H;
    28e4:	5e 9a       	sbi	0x0b, 6	; 11
    28e6:	85 e0       	ldi	r24, 0x05	; 5
    28e8:	8a 95       	dec	r24
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <I2C_Ack+0x18>
    28ec:	00 00       	nop
	I2C_DELAY;
	SCL_L;
    28ee:	5e 98       	cbi	0x0b, 6	; 11
    28f0:	85 e0       	ldi	r24, 0x05	; 5
    28f2:	8a 95       	dec	r24
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <I2C_Ack+0x22>
    28f6:	00 00       	nop
	I2C_DELAY;
	SDA_H;
    28f8:	5f 9a       	sbi	0x0b, 7	; 11
    28fa:	08 95       	ret

000028fc <I2C_NoAck>:
}

void I2C_NoAck(void)
{
	SCL_L;
    28fc:	5e 98       	cbi	0x0b, 6	; 11
    28fe:	85 e0       	ldi	r24, 0x05	; 5
    2900:	8a 95       	dec	r24
    2902:	f1 f7       	brne	.-4      	; 0x2900 <I2C_NoAck+0x4>
    2904:	00 00       	nop
	I2C_DELAY;
	SDA_H;
    2906:	5f 9a       	sbi	0x0b, 7	; 11
    2908:	85 e0       	ldi	r24, 0x05	; 5
    290a:	8a 95       	dec	r24
    290c:	f1 f7       	brne	.-4      	; 0x290a <I2C_NoAck+0xe>
    290e:	00 00       	nop
	I2C_DELAY;
	SCL_H;
    2910:	5e 9a       	sbi	0x0b, 6	; 11
    2912:	85 e0       	ldi	r24, 0x05	; 5
    2914:	8a 95       	dec	r24
    2916:	f1 f7       	brne	.-4      	; 0x2914 <I2C_NoAck+0x18>
    2918:	00 00       	nop
	I2C_DELAY;
	SCL_L;
    291a:	5e 98       	cbi	0x0b, 6	; 11
    291c:	85 e0       	ldi	r24, 0x05	; 5
    291e:	8a 95       	dec	r24
    2920:	f1 f7       	brne	.-4      	; 0x291e <I2C_NoAck+0x22>
    2922:	00 00       	nop
	I2C_DELAY;
	SDA_H;
    2924:	5f 9a       	sbi	0x0b, 7	; 11
    2926:	08 95       	ret

00002928 <I2C_SendByte>:

//数据从高位到低位
void I2C_SendByte(unsigned char SendByte)
{
	unsigned char i=0;
	SDA_OUT;
    2928:	57 9a       	sbi	0x0a, 7	; 10
	SCL_L;
    292a:	5e 98       	cbi	0x0b, 6	; 11
    292c:	98 e0       	ldi	r25, 0x08	; 8
	for (i=0;i<8;i++)
	{
		if(SendByte & 0x80)
    292e:	88 23       	and	r24, r24
    2930:	14 f4       	brge	.+4      	; 0x2936 <I2C_SendByte+0xe>
		{
			SDA_H;
    2932:	5f 9a       	sbi	0x0b, 7	; 11
    2934:	01 c0       	rjmp	.+2      	; 0x2938 <I2C_SendByte+0x10>
		}
		else
		{
			SDA_L;
    2936:	5f 98       	cbi	0x0b, 7	; 11
		}	
		SCL_H;
    2938:	5e 9a       	sbi	0x0b, 6	; 11
    293a:	25 e0       	ldi	r18, 0x05	; 5
    293c:	2a 95       	dec	r18
    293e:	f1 f7       	brne	.-4      	; 0x293c <I2C_SendByte+0x14>
    2940:	00 00       	nop
		I2C_DELAY;
		SendByte <<= 1;
    2942:	88 0f       	add	r24, r24
		SCL_L;
    2944:	5e 98       	cbi	0x0b, 6	; 11
    2946:	91 50       	subi	r25, 0x01	; 1
void I2C_SendByte(unsigned char SendByte)
{
	unsigned char i=0;
	SDA_OUT;
	SCL_L;
	for (i=0;i<8;i++)
    2948:	91 f7       	brne	.-28     	; 0x292e <I2C_SendByte+0x6>
		SCL_H;
		I2C_DELAY;
		SendByte <<= 1;
		SCL_L;
	}
	SDA_H;
    294a:	5f 9a       	sbi	0x0b, 7	; 11
	SCL_H;
    294c:	5e 9a       	sbi	0x0b, 6	; 11
    294e:	85 e0       	ldi	r24, 0x05	; 5
    2950:	8a 95       	dec	r24
    2952:	f1 f7       	brne	.-4      	; 0x2950 <I2C_SendByte+0x28>
    2954:	00 00       	nop
	I2C_DELAY;
	SCL_L;
    2956:	5e 98       	cbi	0x0b, 6	; 11
    2958:	25 e0       	ldi	r18, 0x05	; 5
    295a:	2a 95       	dec	r18
    295c:	f1 f7       	brne	.-4      	; 0x295a <I2C_SendByte+0x32>
    295e:	00 00       	nop
    2960:	08 95       	ret

00002962 <I2C_ReceiveByte>:
//数据从高位到低位
unsigned char I2C_ReceiveByte(void)
{
	unsigned char i=0;
	unsigned char ReceiveByte=0;
	SDA_H;
    2962:	5f 9a       	sbi	0x0b, 7	; 11
	SDA_IN;
    2964:	57 98       	cbi	0x0a, 7	; 10
	SDA_H;
    2966:	5f 9a       	sbi	0x0b, 7	; 11
    2968:	98 e0       	ldi	r25, 0x08	; 8

//数据从高位到低位
unsigned char I2C_ReceiveByte(void)
{
	unsigned char i=0;
	unsigned char ReceiveByte=0;
    296a:	80 e0       	ldi	r24, 0x00	; 0
	SDA_H;
	SDA_IN;
	SDA_H;
	for (i=0;i<8;i++)
	{			
		ReceiveByte <<= 1;	
    296c:	88 0f       	add	r24, r24
		SCL_H;
    296e:	5e 9a       	sbi	0x0b, 6	; 11
		if (SDA_READ)
    2970:	4f 99       	sbic	0x09, 7	; 9
		{
			ReceiveByte	|=1;
    2972:	81 60       	ori	r24, 0x01	; 1
		}
		SCL_L;
    2974:	5e 98       	cbi	0x0b, 6	; 11
    2976:	25 e0       	ldi	r18, 0x05	; 5
    2978:	2a 95       	dec	r18
    297a:	f1 f7       	brne	.-4      	; 0x2978 <I2C_ReceiveByte+0x16>
    297c:	00 00       	nop
    297e:	91 50       	subi	r25, 0x01	; 1
	unsigned char i=0;
	unsigned char ReceiveByte=0;
	SDA_H;
	SDA_IN;
	SDA_H;
	for (i=0;i<8;i++)
    2980:	a9 f7       	brne	.-22     	; 0x296c <I2C_ReceiveByte+0xa>
			ReceiveByte	|=1;
		}
		SCL_L;
		I2C_DELAY;
	}
	SDA_OUT;
    2982:	57 9a       	sbi	0x0a, 7	; 10
	return ReceiveByte;
}
    2984:	08 95       	ret

00002986 <HEX_BCD>:


unsigned char HEX_BCD(unsigned char val)		//B码转换为BCD码
{
	unsigned char k;
	k = (val/10)<<4 | (val%10);
    2986:	9d ec       	ldi	r25, 0xCD	; 205
    2988:	89 9f       	mul	r24, r25
    298a:	91 2d       	mov	r25, r1
    298c:	11 24       	eor	r1, r1
    298e:	96 95       	lsr	r25
    2990:	96 95       	lsr	r25
    2992:	96 95       	lsr	r25
    2994:	20 e1       	ldi	r18, 0x10	; 16
    2996:	92 9f       	mul	r25, r18
    2998:	a0 01       	movw	r20, r0
    299a:	11 24       	eor	r1, r1
    299c:	99 0f       	add	r25, r25
    299e:	29 2f       	mov	r18, r25
    29a0:	22 0f       	add	r18, r18
    29a2:	22 0f       	add	r18, r18
    29a4:	92 0f       	add	r25, r18
    29a6:	89 1b       	sub	r24, r25
	return k;
}
    29a8:	84 2b       	or	r24, r20
    29aa:	08 95       	ret

000029ac <Initialize_DS3231>:
	I2C_SendByte(Time.week);
	I2C_SendByte(Time.date);
	I2C_SendByte(Time.month);
	I2C_SendByte(Time.year);	
	I2C_Stop();	*/
	I2C_Start();
    29ac:	0e 94 46 14 	call	0x288c	; 0x288c <I2C_Start>
	I2C_SendByte(DS3231_ADDR);
    29b0:	80 ed       	ldi	r24, 0xD0	; 208
    29b2:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_SendByte(0x0E);
    29b6:	8e e0       	ldi	r24, 0x0E	; 14
    29b8:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_SendByte(0x00);
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_SendByte(0x0F);
    29c2:	8f e0       	ldi	r24, 0x0F	; 15
    29c4:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_SendByte(0x08);
    29c8:	88 e0       	ldi	r24, 0x08	; 8
    29ca:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_Stop();
    29ce:	0e 94 53 14 	call	0x28a6	; 0x28a6 <I2C_Stop>
    29d2:	08 95       	ret

000029d4 <ReadTime_DS3231>:
	I2C_Stop();
}


void ReadTime_DS3231(void)
{
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
	I2C_Start();
    29d8:	0e 94 46 14 	call	0x288c	; 0x288c <I2C_Start>
	I2C_SendByte(DS3231_ADDR);
    29dc:	80 ed       	ldi	r24, 0xD0	; 208
    29de:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_SendByte(0x00);			//从秒的地址开始读，地址指针自动++
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_Start();
    29e8:	0e 94 46 14 	call	0x288c	; 0x288c <I2C_Start>
	//在写入读地址
	I2C_SendByte(DS3231_ADDR | 1);
    29ec:	81 ed       	ldi	r24, 0xD1	; 209
    29ee:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	//读出时间
	Time.second =	I2C_ReceiveByte();
    29f2:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    29f6:	c3 e2       	ldi	r28, 0x23	; 35
    29f8:	d1 e0       	ldi	r29, 0x01	; 1
    29fa:	8e 83       	std	Y+6, r24	; 0x06
	I2C_Ack();	
    29fc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <I2C_Ack>
	Time.minute =	I2C_ReceiveByte();
    2a00:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    2a04:	8d 83       	std	Y+5, r24	; 0x05
	I2C_Ack();
    2a06:	0e 94 68 14 	call	0x28d0	; 0x28d0 <I2C_Ack>
	Time.hour   =	I2C_ReceiveByte();
    2a0a:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    2a0e:	8c 83       	std	Y+4, r24	; 0x04
	I2C_Ack();
    2a10:	0e 94 68 14 	call	0x28d0	; 0x28d0 <I2C_Ack>
	Time.week   =	I2C_ReceiveByte();
    2a14:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    2a18:	8b 83       	std	Y+3, r24	; 0x03
	I2C_Ack();
    2a1a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <I2C_Ack>
	Time.date   =	I2C_ReceiveByte();
    2a1e:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    2a22:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Ack();
    2a24:	0e 94 68 14 	call	0x28d0	; 0x28d0 <I2C_Ack>
	Time.month  =	I2C_ReceiveByte();
    2a28:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    2a2c:	89 83       	std	Y+1, r24	; 0x01
	I2C_Ack();
    2a2e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <I2C_Ack>
	Time.year   =	I2C_ReceiveByte();
    2a32:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    2a36:	88 83       	st	Y, r24
	I2C_NoAck();
    2a38:	0e 94 7e 14 	call	0x28fc	; 0x28fc <I2C_NoAck>
	I2C_Stop();
    2a3c:	0e 94 53 14 	call	0x28a6	; 0x28a6 <I2C_Stop>
}
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <ReadTemp_DS3231>:

void ReadTemp_DS3231(void)
{
	I2C_Start();
    2a46:	0e 94 46 14 	call	0x288c	; 0x288c <I2C_Start>
	I2C_SendByte(DS3231_ADDR);
    2a4a:	80 ed       	ldi	r24, 0xD0	; 208
    2a4c:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_SendByte(CMD_TEMPERATUREH);			//直接读温度高字节寄存器
    2a50:	81 e1       	ldi	r24, 0x11	; 17
    2a52:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	I2C_Start();
    2a56:	0e 94 46 14 	call	0x288c	; 0x288c <I2C_Start>
	//在写入读地址
	I2C_SendByte(DS3231_ADDR | 1);
    2a5a:	81 ed       	ldi	r24, 0xD1	; 209
    2a5c:	0e 94 94 14 	call	0x2928	; 0x2928 <I2C_SendByte>
	//读出温度
	Temperature_Integer=I2C_ReceiveByte();
    2a60:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    2a64:	80 93 e0 03 	sts	0x03E0, r24
	I2C_Ack();
    2a68:	0e 94 68 14 	call	0x28d0	; 0x28d0 <I2C_Ack>
	Temperature_Decimals=I2C_ReceiveByte()>>6;
    2a6c:	0e 94 b1 14 	call	0x2962	; 0x2962 <I2C_ReceiveByte>
    2a70:	82 95       	swap	r24
    2a72:	86 95       	lsr	r24
    2a74:	86 95       	lsr	r24
    2a76:	83 70       	andi	r24, 0x03	; 3
    2a78:	80 93 df 03 	sts	0x03DF, r24
	I2C_NoAck();
    2a7c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <I2C_NoAck>
	I2C_Stop();
    2a80:	0e 94 53 14 	call	0x28a6	; 0x28a6 <I2C_Stop>
    2a84:	08 95       	ret

00002a86 <Time_DisplayString>:
}

void Time_DisplayString()
{	
	ReadTime_DS3231();
    2a86:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <ReadTime_DS3231>
	DS3231_Date[2]	=	(Time.year>>4)+0x30;
    2a8a:	a3 e2       	ldi	r26, 0x23	; 35
    2a8c:	b1 e0       	ldi	r27, 0x01	; 1
    2a8e:	8c 91       	ld	r24, X
    2a90:	e4 e1       	ldi	r30, 0x14	; 20
    2a92:	f1 e0       	ldi	r31, 0x01	; 1
    2a94:	98 2f       	mov	r25, r24
    2a96:	92 95       	swap	r25
    2a98:	9f 70       	andi	r25, 0x0F	; 15
    2a9a:	90 5d       	subi	r25, 0xD0	; 208
    2a9c:	92 83       	std	Z+2, r25	; 0x02
	DS3231_Date[3]	=	(Time.year&0x0F)+0x30;
    2a9e:	8f 70       	andi	r24, 0x0F	; 15
    2aa0:	80 5d       	subi	r24, 0xD0	; 208
    2aa2:	83 83       	std	Z+3, r24	; 0x03
	DS3231_Date[6]	=	(Time.month>>4)+0x30;
    2aa4:	11 96       	adiw	r26, 0x01	; 1
    2aa6:	8c 91       	ld	r24, X
    2aa8:	11 97       	sbiw	r26, 0x01	; 1
    2aaa:	98 2f       	mov	r25, r24
    2aac:	92 95       	swap	r25
    2aae:	9f 70       	andi	r25, 0x0F	; 15
    2ab0:	90 5d       	subi	r25, 0xD0	; 208
    2ab2:	96 83       	std	Z+6, r25	; 0x06
	DS3231_Date[7]	=	(Time.month&0x0F)+0x30;
    2ab4:	8f 70       	andi	r24, 0x0F	; 15
    2ab6:	80 5d       	subi	r24, 0xD0	; 208
    2ab8:	87 83       	std	Z+7, r24	; 0x07
	DS3231_Date[10]	=	(Time.date>>4)+0x30;
    2aba:	12 96       	adiw	r26, 0x02	; 2
    2abc:	8c 91       	ld	r24, X
    2abe:	12 97       	sbiw	r26, 0x02	; 2
    2ac0:	98 2f       	mov	r25, r24
    2ac2:	92 95       	swap	r25
    2ac4:	9f 70       	andi	r25, 0x0F	; 15
    2ac6:	90 5d       	subi	r25, 0xD0	; 208
    2ac8:	92 87       	std	Z+10, r25	; 0x0a
	DS3231_Date[11]	=	(Time.date&0x0F)+0x30;
    2aca:	8f 70       	andi	r24, 0x0F	; 15
    2acc:	80 5d       	subi	r24, 0xD0	; 208
    2ace:	83 87       	std	Z+11, r24	; 0x0b
	DS3231_Time[0]	=	(Time.hour>>4)+0x30;
    2ad0:	14 96       	adiw	r26, 0x04	; 4
    2ad2:	8c 91       	ld	r24, X
    2ad4:	14 97       	sbiw	r26, 0x04	; 4
    2ad6:	eb e0       	ldi	r30, 0x0B	; 11
    2ad8:	f1 e0       	ldi	r31, 0x01	; 1
    2ada:	98 2f       	mov	r25, r24
    2adc:	92 95       	swap	r25
    2ade:	9f 70       	andi	r25, 0x0F	; 15
    2ae0:	90 5d       	subi	r25, 0xD0	; 208
    2ae2:	90 83       	st	Z, r25
	DS3231_Time[1]	=	(Time.hour&0x0F)+0x30;
    2ae4:	8f 70       	andi	r24, 0x0F	; 15
    2ae6:	80 5d       	subi	r24, 0xD0	; 208
    2ae8:	81 83       	std	Z+1, r24	; 0x01
	DS3231_Time[3]	=	(Time.minute>>4)+0x30;
    2aea:	15 96       	adiw	r26, 0x05	; 5
    2aec:	8c 91       	ld	r24, X
    2aee:	15 97       	sbiw	r26, 0x05	; 5
    2af0:	98 2f       	mov	r25, r24
    2af2:	92 95       	swap	r25
    2af4:	9f 70       	andi	r25, 0x0F	; 15
    2af6:	90 5d       	subi	r25, 0xD0	; 208
    2af8:	93 83       	std	Z+3, r25	; 0x03
	DS3231_Time[4]	=	(Time.minute&0x0F)+0x30;
    2afa:	8f 70       	andi	r24, 0x0F	; 15
    2afc:	80 5d       	subi	r24, 0xD0	; 208
    2afe:	84 83       	std	Z+4, r24	; 0x04
	DS3231_Time[6]	=	(Time.second>>4)+0x30;
    2b00:	16 96       	adiw	r26, 0x06	; 6
    2b02:	8c 91       	ld	r24, X
    2b04:	98 2f       	mov	r25, r24
    2b06:	92 95       	swap	r25
    2b08:	9f 70       	andi	r25, 0x0F	; 15
    2b0a:	90 5d       	subi	r25, 0xD0	; 208
    2b0c:	96 83       	std	Z+6, r25	; 0x06
	DS3231_Time[7]	=	(Time.second&0x0F)+0x30;
    2b0e:	8f 70       	andi	r24, 0x0F	; 15
    2b10:	80 5d       	subi	r24, 0xD0	; 208
    2b12:	87 83       	std	Z+7, r24	; 0x07
	//strcpy(DS3231_Week,weeks[Time.week-1]);	
	ReadTemp_DS3231();
    2b14:	0e 94 23 15 	call	0x2a46	; 0x2a46 <ReadTemp_DS3231>
	DS3231_Temperature[0]=(HEX_BCD(Temperature_Integer)>>4)+0x30;
    2b18:	80 91 e0 03 	lds	r24, 0x03E0
    2b1c:	0e 94 c3 14 	call	0x2986	; 0x2986 <HEX_BCD>
    2b20:	e0 e0       	ldi	r30, 0x00	; 0
    2b22:	f1 e0       	ldi	r31, 0x01	; 1
    2b24:	98 2f       	mov	r25, r24
    2b26:	92 95       	swap	r25
    2b28:	9f 70       	andi	r25, 0x0F	; 15
    2b2a:	90 5d       	subi	r25, 0xD0	; 208
    2b2c:	90 83       	st	Z, r25
	DS3231_Temperature[1]=(HEX_BCD(Temperature_Integer)&0x0F)+0x30;
    2b2e:	8f 70       	andi	r24, 0x0F	; 15
    2b30:	80 5d       	subi	r24, 0xD0	; 208
    2b32:	81 83       	std	Z+1, r24	; 0x01
    2b34:	08 95       	ret

00002b36 <main>:
FRESULT scan_files (char* path);
FRESULT get_file_size();
FRESULT read();
FRESULT write();
int main(void)
{
    2b36:	2f 92       	push	r2
    2b38:	3f 92       	push	r3
    2b3a:	4f 92       	push	r4
    2b3c:	5f 92       	push	r5
    2b3e:	6f 92       	push	r6
    2b40:	7f 92       	push	r7
    2b42:	8f 92       	push	r8
    2b44:	9f 92       	push	r9
    2b46:	af 92       	push	r10
    2b48:	bf 92       	push	r11
    2b4a:	cf 92       	push	r12
    2b4c:	df 92       	push	r13
    2b4e:	ef 92       	push	r14
    2b50:	ff 92       	push	r15
    2b52:	0f 93       	push	r16
    2b54:	1f 93       	push	r17
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	c4 55       	subi	r28, 0x54	; 84
    2b60:	d2 40       	sbci	r29, 0x02	; 2
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
	DDRD|=(1<<PORTD6);
    2b6c:	56 9a       	sbi	0x0a, 6	; 10
	unsigned char temp1=0,temp2=0,i=0;
    2b6e:	19 82       	std	Y+1, r1	; 0x01
    Serial_Init(57600);
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	71 ee       	ldi	r23, 0xE1	; 225
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 ae 19 	call	0x335c	; 0x335c <Serial_Init>
	Initialize_DS3231();
    2b7c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <Initialize_DS3231>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b80:	2f ef       	ldi	r18, 0xFF	; 255
    2b82:	83 ed       	ldi	r24, 0xD3	; 211
    2b84:	90 e3       	ldi	r25, 0x30	; 48
    2b86:	21 50       	subi	r18, 0x01	; 1
    2b88:	80 40       	sbci	r24, 0x00	; 0
    2b8a:	90 40       	sbci	r25, 0x00	; 0
    2b8c:	e1 f7       	brne	.-8      	; 0x2b86 <main+0x50>
    2b8e:	00 c0       	rjmp	.+0      	; 0x2b90 <main+0x5a>
    2b90:	00 00       	nop
	_delay_ms(1000);
	Serial_SendString("Ready!\r\n");
    2b92:	86 e4       	ldi	r24, 0x46	; 70
    2b94:	91 e0       	ldi	r25, 0x01	; 1
    2b96:	0e 94 ca 19 	call	0x3394	; 0x3394 <Serial_SendString>
	char line[29]; 
	FIL fil;   	
	FRESULT fr;   
	FILINFO fileinfo;
	fr=f_mount(0,&FatFs);
    2b9a:	60 eb       	ldi	r22, 0xB0	; 176
    2b9c:	71 e0       	ldi	r23, 0x01	; 1
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <f_mount>
	for (i=0;i<5;i++)
    2ba4:	19 82       	std	Y+1, r1	; 0x01
	{
		fr=f_open(&fil,"/test1.txt",FA_CREATE_ALWAYS|FA_WRITE);
    2ba6:	4a e0       	ldi	r20, 0x0A	; 10
    2ba8:	6f e4       	ldi	r22, 0x4F	; 79
    2baa:	71 e0       	ldi	r23, 0x01	; 1
    2bac:	ce 01       	movw	r24, r28
    2bae:	4f 96       	adiw	r24, 0x1f	; 31
    2bb0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <f_open>
		if (!fr) break;
    2bb4:	88 23       	and	r24, r24
    2bb6:	29 f0       	breq	.+10     	; 0x2bc2 <main+0x8c>
	char line[29]; 
	FIL fil;   	
	FRESULT fr;   
	FILINFO fileinfo;
	fr=f_mount(0,&FatFs);
	for (i=0;i<5;i++)
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	85 30       	cpi	r24, 0x05	; 5
    2bc0:	90 f3       	brcs	.-28     	; 0x2ba6 <main+0x70>
	{
		fr=f_open(&fil,"/test1.txt",FA_CREATE_ALWAYS|FA_WRITE);
		if (!fr) break;
	}
	if (i==5)
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	85 30       	cpi	r24, 0x05	; 5
    2bc6:	29 f4       	brne	.+10     	; 0x2bd2 <main+0x9c>
	{	
		Serial_SendString("mount error!");
    2bc8:	8a e5       	ldi	r24, 0x5A	; 90
    2bca:	91 e0       	ldi	r25, 0x01	; 1
    2bcc:	0e 94 ca 19 	call	0x3394	; 0x3394 <Serial_SendString>
		return 0;
    2bd0:	a8 c0       	rjmp	.+336    	; 0x2d22 <main+0x1ec>
	}
	f_close(&fil);
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	4f 96       	adiw	r24, 0x1f	; 31
    2bd6:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <f_close>
	f_mount(0, NULL);
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <f_mount>
FRESULT read();
FRESULT write();
int main(void)
{
	DDRD|=(1<<PORTD6);
	unsigned char temp1=0,temp2=0,i=0;
    2be4:	51 2c       	mov	r5, r1
	f_close(&fil);
	f_mount(0, NULL);
    while(1)
	{
		Time_DisplayString();
		temp1=Time.second;
    2be6:	0f 2e       	mov	r0, r31
    2be8:	f3 e2       	ldi	r31, 0x23	; 35
    2bea:	8f 2e       	mov	r8, r31
    2bec:	f1 e0       	ldi	r31, 0x01	; 1
    2bee:	9f 2e       	mov	r9, r31
    2bf0:	f0 2d       	mov	r31, r0
    2bf2:	0f 2e       	mov	r0, r31
    2bf4:	f4 e1       	ldi	r31, 0x14	; 20
    2bf6:	6f 2e       	mov	r6, r31
    2bf8:	f1 e0       	ldi	r31, 0x01	; 1
    2bfa:	7f 2e       	mov	r7, r31
    2bfc:	f0 2d       	mov	r31, r0
    2bfe:	7e 01       	movw	r14, r28
    2c00:	e1 e1       	ldi	r30, 0x11	; 17
    2c02:	ee 0e       	add	r14, r30
    2c04:	f1 1c       	adc	r15, r1
    2c06:	6e 01       	movw	r12, r28
    2c08:	f9 e1       	ldi	r31, 0x19	; 25
    2c0a:	cf 0e       	add	r12, r31
    2c0c:	d1 1c       	adc	r13, r1
			line[28]='\0';
			Serial_SendString(line);
			for (i=0;i<5;i++)
			{	
				fr=f_mount(0,&FatFs);
				f_stat("test1.txt",&fileinfo);
    2c0e:	8e 01       	movw	r16, r28
    2c10:	01 5c       	subi	r16, 0xC1	; 193
    2c12:	1d 4f       	sbci	r17, 0xFD	; 253
    2c14:	30 2e       	mov	r3, r16
    2c16:	41 2e       	mov	r4, r17
    2c18:	5e 01       	movw	r10, r28
    2c1a:	2e e1       	ldi	r18, 0x1E	; 30
    2c1c:	a2 0e       	add	r10, r18
    2c1e:	b1 1c       	adc	r11, r1
	}
	f_close(&fil);
	f_mount(0, NULL);
    while(1)
	{
		Time_DisplayString();
    2c20:	0e 94 43 15 	call	0x2a86	; 0x2a86 <Time_DisplayString>
		temp1=Time.second;
    2c24:	f4 01       	movw	r30, r8
    2c26:	26 80       	ldd	r2, Z+6	; 0x06
		if (temp1!=temp2)
    2c28:	25 14       	cp	r2, r5
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <main+0xf8>
    2c2c:	70 c0       	rjmp	.+224    	; 0x2d0e <main+0x1d8>
		{	
			line[0]=32;
    2c2e:	80 e2       	ldi	r24, 0x20	; 32
    2c30:	8a 83       	std	Y+2, r24	; 0x02
    2c32:	d3 01       	movw	r26, r6
    2c34:	fe 01       	movw	r30, r28
    2c36:	33 96       	adiw	r30, 0x03	; 3
			for(i=0;i<14;i++)
			{
				line[i+1]=DS3231_Date[i];
    2c38:	8d 91       	ld	r24, X+
    2c3a:	81 93       	st	Z+, r24
		Time_DisplayString();
		temp1=Time.second;
		if (temp1!=temp2)
		{	
			line[0]=32;
			for(i=0;i<14;i++)
    2c3c:	ee 15       	cp	r30, r14
    2c3e:	ff 05       	cpc	r31, r15
    2c40:	d9 f7       	brne	.-10     	; 0x2c38 <main+0x102>
    2c42:	ab e0       	ldi	r26, 0x0B	; 11
    2c44:	b1 e0       	ldi	r27, 0x01	; 1
    2c46:	f7 01       	movw	r30, r14
			{
				line[i+1]=DS3231_Date[i];
			}
			for(i=0;i<8;i++)
			{
				line[i+15]=DS3231_Time[i];
    2c48:	8d 91       	ld	r24, X+
    2c4a:	81 93       	st	Z+, r24
			line[0]=32;
			for(i=0;i<14;i++)
			{
				line[i+1]=DS3231_Date[i];
			}
			for(i=0;i<8;i++)
    2c4c:	ec 15       	cp	r30, r12
    2c4e:	fd 05       	cpc	r31, r13
    2c50:	d9 f7       	brne	.-10     	; 0x2c48 <main+0x112>
    2c52:	88 e0       	ldi	r24, 0x08	; 8
    2c54:	89 83       	std	Y+1, r24	; 0x01
			{
				line[i+15]=DS3231_Time[i];
			}
			line[23]=32;
    2c56:	80 e2       	ldi	r24, 0x20	; 32
    2c58:	89 8f       	std	Y+25, r24	; 0x19
			line[24]=DS3231_Temperature[0];
    2c5a:	e0 e0       	ldi	r30, 0x00	; 0
    2c5c:	f1 e0       	ldi	r31, 0x01	; 1
    2c5e:	80 81       	ld	r24, Z
    2c60:	8a 8f       	std	Y+26, r24	; 0x1a
			line[25]=DS3231_Temperature[1];
    2c62:	81 81       	ldd	r24, Z+1	; 0x01
    2c64:	8b 8f       	std	Y+27, r24	; 0x1b
			line[26]='\r';
    2c66:	8d e0       	ldi	r24, 0x0D	; 13
    2c68:	8c 8f       	std	Y+28, r24	; 0x1c
			line[27]='\n';
    2c6a:	8a e0       	ldi	r24, 0x0A	; 10
    2c6c:	8d 8f       	std	Y+29, r24	; 0x1d
			line[28]='\0';
    2c6e:	1e 8e       	std	Y+30, r1	; 0x1e
			Serial_SendString(line);
    2c70:	ce 01       	movw	r24, r28
    2c72:	02 96       	adiw	r24, 0x02	; 2
    2c74:	0e 94 ca 19 	call	0x3394	; 0x3394 <Serial_SendString>
			for (i=0;i<5;i++)
    2c78:	19 82       	std	Y+1, r1	; 0x01
			{	
				fr=f_mount(0,&FatFs);
    2c7a:	60 eb       	ldi	r22, 0xB0	; 176
    2c7c:	71 e0       	ldi	r23, 0x01	; 1
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <f_mount>
				f_stat("test1.txt",&fileinfo);
    2c84:	63 2d       	mov	r22, r3
    2c86:	74 2d       	mov	r23, r4
    2c88:	80 e5       	ldi	r24, 0x50	; 80
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	0e 94 07 14 	call	0x280e	; 0x280e <f_stat>
				fr=f_open(&fil,"/test1.txt",FA_WRITE);				
    2c90:	42 e0       	ldi	r20, 0x02	; 2
    2c92:	6f e4       	ldi	r22, 0x4F	; 79
    2c94:	71 e0       	ldi	r23, 0x01	; 1
    2c96:	ce 01       	movw	r24, r28
    2c98:	4f 96       	adiw	r24, 0x1f	; 31
    2c9a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <f_open>
    2c9e:	58 2e       	mov	r5, r24
				f_lseek(&fil,fileinfo.fsize);
    2ca0:	f8 01       	movw	r30, r16
    2ca2:	40 81       	ld	r20, Z
    2ca4:	51 81       	ldd	r21, Z+1	; 0x01
    2ca6:	62 81       	ldd	r22, Z+2	; 0x02
    2ca8:	73 81       	ldd	r23, Z+3	; 0x03
    2caa:	ce 01       	movw	r24, r28
    2cac:	4f 96       	adiw	r24, 0x1f	; 31
    2cae:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <f_lseek>
				if (!fr)
    2cb2:	51 10       	cpse	r5, r1
    2cb4:	16 c0       	rjmp	.+44     	; 0x2ce2 <main+0x1ac>
				{
					fr=f_write(&fil,line,27,&i);
    2cb6:	9e 01       	movw	r18, r28
    2cb8:	2f 5f       	subi	r18, 0xFF	; 255
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	4b e1       	ldi	r20, 0x1B	; 27
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	be 01       	movw	r22, r28
    2cc2:	6e 5f       	subi	r22, 0xFE	; 254
    2cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	4f 96       	adiw	r24, 0x1f	; 31
    2cca:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <f_write>
					f_close(&fil);
    2cce:	ce 01       	movw	r24, r28
    2cd0:	4f 96       	adiw	r24, 0x1f	; 31
    2cd2:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <f_close>
					f_mount(0, NULL);
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <f_mount>
					break;
    2ce0:	05 c0       	rjmp	.+10     	; 0x2cec <main+0x1b6>
			line[25]=DS3231_Temperature[1];
			line[26]='\r';
			line[27]='\n';
			line[28]='\0';
			Serial_SendString(line);
			for (i=0;i<5;i++)
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	8f 5f       	subi	r24, 0xFF	; 255
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	85 30       	cpi	r24, 0x05	; 5
    2cea:	38 f2       	brcs	.-114    	; 0x2c7a <main+0x144>
					f_close(&fil);
					f_mount(0, NULL);
					break;
				}
			}
			if (i==5)
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	85 30       	cpi	r24, 0x05	; 5
    2cf0:	29 f4       	brne	.+10     	; 0x2cfc <main+0x1c6>
			{
				Serial_SendString("mount error!");
    2cf2:	8a e5       	ldi	r24, 0x5A	; 90
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	0e 94 ca 19 	call	0x3394	; 0x3394 <Serial_SendString>
				return 0;
    2cfa:	13 c0       	rjmp	.+38     	; 0x2d22 <main+0x1ec>
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	32 96       	adiw	r30, 0x02	; 2
			}							
			for (i=0;i<28;i++)
			{
				line[i]=0;
    2d00:	11 92       	st	Z+, r1
			if (i==5)
			{
				Serial_SendString("mount error!");
				return 0;
			}							
			for (i=0;i<28;i++)
    2d02:	ea 15       	cp	r30, r10
    2d04:	fb 05       	cpc	r31, r11
    2d06:	e1 f7       	brne	.-8      	; 0x2d00 <main+0x1ca>
    2d08:	8c e1       	ldi	r24, 0x1C	; 28
    2d0a:	89 83       	std	Y+1, r24	; 0x01
			{
				line[i]=0;
			}						
			temp2=temp1;
    2d0c:	52 2c       	mov	r5, r2
    2d0e:	ff ef       	ldi	r31, 0xFF	; 255
    2d10:	23 ec       	ldi	r18, 0xC3	; 195
    2d12:	89 e0       	ldi	r24, 0x09	; 9
    2d14:	f1 50       	subi	r31, 0x01	; 1
    2d16:	20 40       	sbci	r18, 0x00	; 0
    2d18:	80 40       	sbci	r24, 0x00	; 0
    2d1a:	e1 f7       	brne	.-8      	; 0x2d14 <main+0x1de>
    2d1c:	00 c0       	rjmp	.+0      	; 0x2d1e <main+0x1e8>
    2d1e:	00 00       	nop
    2d20:	7f cf       	rjmp	.-258    	; 0x2c20 <main+0xea>
		_delay_ms(200);
	}
	f_close(&fil);
	f_mount(0, NULL);
	return 0;
}
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	cc 5a       	subi	r28, 0xAC	; 172
    2d28:	dd 4f       	sbci	r29, 0xFD	; 253
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	ff 90       	pop	r15
    2d3e:	ef 90       	pop	r14
    2d40:	df 90       	pop	r13
    2d42:	cf 90       	pop	r12
    2d44:	bf 90       	pop	r11
    2d46:	af 90       	pop	r10
    2d48:	9f 90       	pop	r9
    2d4a:	8f 90       	pop	r8
    2d4c:	7f 90       	pop	r7
    2d4e:	6f 90       	pop	r6
    2d50:	5f 90       	pop	r5
    2d52:	4f 90       	pop	r4
    2d54:	3f 90       	pop	r3
    2d56:	2f 90       	pop	r2
    2d58:	08 95       	ret

00002d5a <SPI_Low>:

unsigned char SD_Type=0 ;

void SPI_Low(void)		
{//SPI低速模式
	SPCR = 0;
    2d5a:	1c bc       	out	0x2c, r1	; 44
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1);
    2d5c:	83 e5       	ldi	r24, 0x53	; 83
    2d5e:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1 << SPI2X);
    2d60:	8d b5       	in	r24, 0x2d	; 45
    2d62:	8e 7f       	andi	r24, 0xFE	; 254
    2d64:	8d bd       	out	0x2d, r24	; 45
    2d66:	08 95       	ret

00002d68 <SPI_High>:
	//使能SPI,主机方式,MSB在前,模式0,128分频
}

void SPI_High(void)
{//SPI高速模式
	SPCR = 0;
    2d68:	1c bc       	out	0x2c, r1	; 44
	SPCR = (1 << SPE) | (1 << MSTR);
    2d6a:	80 e5       	ldi	r24, 0x50	; 80
    2d6c:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
    2d6e:	8d b5       	in	r24, 0x2d	; 45
    2d70:	81 60       	ori	r24, 0x01	; 1
    2d72:	8d bd       	out	0x2d, r24	; 45
    2d74:	08 95       	ret

00002d76 <SPI_Init>:
}


void SPI_Init(void)
{//SPI初始化
	PORT_SPI |= (1 << SPI_SS) | (1 << SPI_MISO);		//将SS置位输出拉高,MISO输入带上拉
    2d76:	85 b1       	in	r24, 0x05	; 5
    2d78:	84 61       	ori	r24, 0x14	; 20
    2d7a:	85 b9       	out	0x05, r24	; 5
	DDR_SPI &= ~((1 << SPI_SS) | (1 << SPI_MOSI) | (1 << SPI_MISO)| (1 << SPI_SCK));
    2d7c:	84 b1       	in	r24, 0x04	; 4
    2d7e:	83 7c       	andi	r24, 0xC3	; 195
    2d80:	84 b9       	out	0x04, r24	; 4
	DDR_SPI |= (1 << SPI_SS) | (1 << SPI_MOSI) | (1 << SPI_SCK);
    2d82:	84 b1       	in	r24, 0x04	; 4
    2d84:	8c 62       	ori	r24, 0x2C	; 44
    2d86:	84 b9       	out	0x04, r24	; 4
    2d88:	08 95       	ret

00002d8a <SPI_RW>:
}


unsigned char SPI_RW(unsigned char dat)
{
	SPDR = dat;
    2d8a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)))
    2d8c:	0d b4       	in	r0, 0x2d	; 45
    2d8e:	07 fe       	sbrs	r0, 7
    2d90:	fd cf       	rjmp	.-6      	; 0x2d8c <SPI_RW+0x2>
		;
	return (SPDR);
    2d92:	8e b5       	in	r24, 0x2e	; 46
}
    2d94:	08 95       	ret

00002d96 <SD_Write_Command>:
//****************************************************************************
//Send a Command to MMC/SD-Card
//Return: the second byte of response register of MMC/SD-Card
//****************************************************************************
unsigned char SD_Write_Command(unsigned char cmd,unsigned long arg)
{
    2d96:	ff 92       	push	r15
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	f8 2e       	mov	r15, r24
    2da2:	c4 2f       	mov	r28, r20
    2da4:	d5 2f       	mov	r29, r21
    2da6:	16 2f       	mov	r17, r22
    2da8:	07 2f       	mov	r16, r23
	unsigned char tmp;
	unsigned char retry=0;
	
	SD_CS_H;   //关闭SD卡
    2daa:	2a 9a       	sbi	0x05, 2	; 5
	SPI_RW(0xff);
    2dac:	8f ef       	ldi	r24, 0xFF	; 255
    2dae:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
	SD_CS_L;
    2db2:	2a 98       	cbi	0x05, 2	; 5
	SPI_RW(cmd|0x40);   //送头命令
    2db4:	8f 2d       	mov	r24, r15
    2db6:	80 64       	ori	r24, 0x40	; 64
    2db8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
	SPI_RW(arg>>24);  //最高的8位
    2dbc:	80 2f       	mov	r24, r16
    2dbe:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
	SPI_RW(arg>>16);   //send 6 Byte Command to MMC/SD-Card
    2dc2:	81 2f       	mov	r24, r17
    2dc4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
	SPI_RW(arg>>8);
    2dc8:	8d 2f       	mov	r24, r29
    2dca:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
	SPI_RW(arg&0xff);
    2dce:	8c 2f       	mov	r24, r28
    2dd0:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
	SPI_RW(0x95);      //仅仅对RESET有效的CRC效验码
    2dd4:	85 e9       	ldi	r24, 0x95	; 149
    2dd6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    2dda:	c4 e6       	ldi	r28, 0x64	; 100
		//get 8 bit response 

	do
	{
		tmp = SPI_RW(0XFF);
    2ddc:	8f ef       	ldi	r24, 0xFF	; 255
    2dde:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
		retry++;
	}while((tmp==0xff)&&(retry<100));
    2de2:	8f 3f       	cpi	r24, 0xFF	; 255
    2de4:	11 f4       	brne	.+4      	; 0x2dea <SD_Write_Command+0x54>
    2de6:	c1 50       	subi	r28, 0x01	; 1
    2de8:	c9 f7       	brne	.-14     	; 0x2ddc <SD_Write_Command+0x46>

	if(reading==0) SD_CS_H;
    2dea:	90 91 af 01 	lds	r25, 0x01AF
    2dee:	91 11       	cpse	r25, r1
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <SD_Write_Command+0x60>
    2df2:	2a 9a       	sbi	0x05, 2	; 5
    2df4:	01 c0       	rjmp	.+2      	; 0x2df8 <SD_Write_Command+0x62>
	else
	SD_CS_L;
    2df6:	2a 98       	cbi	0x05, 2	; 5
	return(tmp);

		
}
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	ff 90       	pop	r15
    2e02:	08 95       	ret

00002e04 <SD_Init>:

//****************************************************************************
//SD卡初始化(SPI-MODE)
//****************************************************************************
unsigned char SD_Init(void)
{
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    2e08:	cf 93       	push	r28

	unsigned char i,temp;
    unsigned int retry; 
	

	SPI_Init();
    2e0a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <SPI_Init>
	SPI_Low();
    2e0e:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <SPI_Low>

	SD_CS_L;
    2e12:	2a 98       	cbi	0x05, 2	; 5
    2e14:	8f e9       	ldi	r24, 0x9F	; 159
    2e16:	9f e0       	ldi	r25, 0x0F	; 15
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <SD_Init+0x14>
    2e1c:	00 c0       	rjmp	.+0      	; 0x2e1e <SD_Init+0x1a>
    2e1e:	00 00       	nop
    2e20:	cf ef       	ldi	r28, 0xFF	; 255
	_delay_ms(1);       //Wait MMC/SD ready...

	for(i=0;i<0xff;i++)
	{
		SPI_RW(0xff);   //send 74 clock at least!!!
    2e22:	8f ef       	ldi	r24, 0xFF	; 255
    2e24:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    2e28:	c1 50       	subi	r28, 0x01	; 1
	SPI_Low();

	SD_CS_L;
	_delay_ms(1);       //Wait MMC/SD ready...

	for(i=0;i<0xff;i++)
    2e2a:	d9 f7       	brne	.-10     	; 0x2e22 <SD_Init+0x1e>
    2e2c:	2d c0       	rjmp	.+90     	; 0x2e88 <SD_Init+0x84>

	retry = 0;

	do
	{
		temp=SD_Write_Command(0,0);//retry 200 times to send CMD0 command 
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	50 e0       	ldi	r21, 0x00	; 0
    2e32:	ba 01       	movw	r22, r20
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <SD_Write_Command>
    2e3a:	01 50       	subi	r16, 0x01	; 1
    2e3c:	11 09       	sbc	r17, r1
		retry++;
		if(retry==2000) return 0xff;//CMD0 Error! 
    2e3e:	b9 f0       	breq	.+46     	; 0x2e6e <SD_Init+0x6a>

	}while(temp!=1);      //temp=0x01即说明SD卡进入空闲状态复位成功
    2e40:	81 30       	cpi	r24, 0x01	; 1
    2e42:	a9 f7       	brne	.-22     	; 0x2e2e <SD_Init+0x2a>
    2e44:	18 c0       	rjmp	.+48     	; 0x2e76 <SD_Init+0x72>

	retry = 0;
	do
	{
		temp=SD_Write_Command(1,0);
    2e46:	40 e0       	ldi	r20, 0x00	; 0
    2e48:	50 e0       	ldi	r21, 0x00	; 0
    2e4a:	ba 01       	movw	r22, r20
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <SD_Write_Command>
    2e52:	01 50       	subi	r16, 0x01	; 1
    2e54:	11 09       	sbc	r17, r1
		retry++;
		if(retry >= 2000) return 0xff;  //retry 100 times to send CMD1 command 
    2e56:	69 f0       	breq	.+26     	; 0x2e72 <SD_Init+0x6e>
	}while(temp!=0);    //temp=0说明SD可以进行操作 激活成功
    2e58:	81 11       	cpse	r24, r1
    2e5a:	f5 cf       	rjmp	.-22     	; 0x2e46 <SD_Init+0x42>

	retry = 0;
	SD_Write_Command(16,512);     //设置一次读写BLOCK的长度为512个字节 CMD16
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	52 e0       	ldi	r21, 0x02	; 2
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	80 e1       	ldi	r24, 0x10	; 16
    2e66:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <SD_Write_Command>
	SD_CS_H;   //MMC_CS_PIN=1;  //set MMC_Chip_Select to high 关闭片选
    2e6a:	2a 9a       	sbi	0x05, 2	; 5
    return(0); //All commands have been taken.
    2e6c:	16 c0       	rjmp	.+44     	; 0x2e9a <SD_Init+0x96>

	do
	{
		temp=SD_Write_Command(0,0);//retry 200 times to send CMD0 command 
		retry++;
		if(retry==2000) return 0xff;//CMD0 Error! 
    2e6e:	cf ef       	ldi	r28, 0xFF	; 255
    2e70:	14 c0       	rjmp	.+40     	; 0x2e9a <SD_Init+0x96>
	retry = 0;
	do
	{
		temp=SD_Write_Command(1,0);
		retry++;
		if(retry >= 2000) return 0xff;  //retry 100 times to send CMD1 command 
    2e72:	cf ef       	ldi	r28, 0xFF	; 255
    2e74:	12 c0       	rjmp	.+36     	; 0x2e9a <SD_Init+0x96>
	}while(temp!=1);      //temp=0x01即说明SD卡进入空闲状态复位成功

	retry = 0;
	do
	{
		temp=SD_Write_Command(1,0);
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	ba 01       	movw	r22, r20
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <SD_Write_Command>
    2e82:	0f ec       	ldi	r16, 0xCF	; 207
    2e84:	17 e0       	ldi	r17, 0x07	; 7
    2e86:	e8 cf       	rjmp	.-48     	; 0x2e58 <SD_Init+0x54>

	retry = 0;

	do
	{
		temp=SD_Write_Command(0,0);//retry 200 times to send CMD0 command 
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	ba 01       	movw	r22, r20
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <SD_Write_Command>
    2e94:	0f ec       	ldi	r16, 0xCF	; 207
    2e96:	17 e0       	ldi	r17, 0x07	; 7
    2e98:	d3 cf       	rjmp	.-90     	; 0x2e40 <SD_Init+0x3c>
	SD_Write_Command(16,512);     //设置一次读写BLOCK的长度为512个字节 CMD16
	SD_CS_H;   //MMC_CS_PIN=1;  //set MMC_Chip_Select to high 关闭片选
    return(0); //All commands have been taken.


}
    2e9a:	8c 2f       	mov	r24, r28
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	08 95       	ret

00002ea4 <SD_SendCommand>:
*                  unsigned char crc   crc校验值
* Output         : None
* Return         : unsigned char r1 SD卡返回的响应
*******************************************************************************/
unsigned char SD_SendCommand(unsigned char cmd,unsigned long arg,unsigned char crc)
{
    2ea4:	ef 92       	push	r14
    2ea6:	ff 92       	push	r15
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	e8 2e       	mov	r14, r24
    2eb2:	d4 2f       	mov	r29, r20
    2eb4:	15 2f       	mov	r17, r21
    2eb6:	06 2f       	mov	r16, r22
    2eb8:	f7 2e       	mov	r15, r23
    2eba:	c2 2f       	mov	r28, r18
    unsigned char r1 ;
    unsigned char Retry=0 ;
    

    SPI_RW(0XFF);
    2ebc:	8f ef       	ldi	r24, 0xFF	; 255
    2ebe:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    //片选端置低，选中SD卡
    SD_CS_L;   //PC0 = 0
    2ec2:	2a 98       	cbi	0x05, 2	; 5
    
    //发送
    SPI_RW(cmd|0x40);
    2ec4:	8e 2d       	mov	r24, r14
    2ec6:	80 64       	ori	r24, 0x40	; 64
    2ec8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    //分别写入命令
    SPI_RW(arg>>24);
    2ecc:	8f 2d       	mov	r24, r15
    2ece:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(arg>>16);
    2ed2:	80 2f       	mov	r24, r16
    2ed4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(arg>>8);
    2ed8:	81 2f       	mov	r24, r17
    2eda:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(arg);
    2ede:	8d 2f       	mov	r24, r29
    2ee0:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(crc);
    2ee4:	8c 2f       	mov	r24, r28
    2ee6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    
    //等待响应，或超时退出
    while((r1=SPI_RW(0xFF))==0xFF)
    2eea:	c9 ec       	ldi	r28, 0xC9	; 201
    2eec:	02 c0       	rjmp	.+4      	; 0x2ef2 <SD_SendCommand+0x4e>
    2eee:	c1 50       	subi	r28, 0x01	; 1
    {
        Retry++;
        if(Retry>200)
    2ef0:	31 f0       	breq	.+12     	; 0x2efe <SD_SendCommand+0x5a>
    SPI_RW(arg>>8);
    SPI_RW(arg);
    SPI_RW(crc);
    
    //等待响应，或超时退出
    while((r1=SPI_RW(0xFF))==0xFF)
    2ef2:	8f ef       	ldi	r24, 0xFF	; 255
    2ef4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    2ef8:	d8 2f       	mov	r29, r24
    2efa:	8f 3f       	cpi	r24, 0xFF	; 255
    2efc:	c1 f3       	breq	.-16     	; 0x2eee <SD_SendCommand+0x4a>
        break ;
        }
    }

    //关闭片选
    SD_CS_H;
    2efe:	2a 9a       	sbi	0x05, 2	; 5
    //在总线上额外增加8个时钟，让SD卡完成剩下的工作
    SPI_RW(0xFF);
    2f00:	8f ef       	ldi	r24, 0xFF	; 255
    2f02:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    
    //返回状态值
    return r1 ;
}
    2f06:	8d 2f       	mov	r24, r29
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	ff 90       	pop	r15
    2f12:	ef 90       	pop	r14
    2f14:	08 95       	ret

00002f16 <SD_ReceiveData>:
* Return         : unsigned char
*                  0：NO_ERR
*                  other：错误信息
*******************************************************************************/
unsigned char SD_ReceiveData(unsigned char*data,unsigned int len,unsigned char release)
{
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	7c 01       	movw	r14, r24
    2f26:	8b 01       	movw	r16, r22
    2f28:	d4 2e       	mov	r13, r20
    unsigned int retry ;
    unsigned char r1 ;
    
    // 启动一次传输
    SD_CS_L;
    2f2a:	2a 98       	cbi	0x05, 2	; 5
    //等待SD卡发回数据起始令牌0xFE
    retry=0 ;
    do 
    {
        r1=SPI_RW(0xFF);
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    2f32:	c8 ec       	ldi	r28, 0xC8	; 200
    2f34:	d0 e0       	ldi	r29, 0x00	; 0
    2f36:	08 c0       	rjmp	.+16     	; 0x2f48 <SD_ReceiveData+0x32>
    2f38:	8f ef       	ldi	r24, 0xFF	; 255
    2f3a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    2f3e:	21 97       	sbiw	r28, 0x01	; 1
        retry++;
        //2000次等待后没有应答，退出报错
        if(retry>200)
    2f40:	19 f4       	brne	.+6      	; 0x2f48 <SD_ReceiveData+0x32>
        {
            SD_CS_H;
    2f42:	2a 9a       	sbi	0x05, 2	; 5
            return 1 ;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	1e c0       	rjmp	.+60     	; 0x2f84 <SD_ReceiveData+0x6e>
        }
    }
    while(r1!=0xFE);
    2f48:	8e 3f       	cpi	r24, 0xFE	; 254
    2f4a:	b1 f7       	brne	.-20     	; 0x2f38 <SD_ReceiveData+0x22>
    //开始接收数据
    while(len--)
    2f4c:	01 15       	cp	r16, r1
    2f4e:	11 05       	cpc	r17, r1
    2f50:	49 f0       	breq	.+18     	; 0x2f64 <SD_ReceiveData+0x4e>
    2f52:	e8 01       	movw	r28, r16
    {
        *data=SPI_RW(0xFF);
    2f54:	8f ef       	ldi	r24, 0xFF	; 255
    2f56:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    2f5a:	f7 01       	movw	r30, r14
    2f5c:	81 93       	st	Z+, r24
    2f5e:	7f 01       	movw	r14, r30
    2f60:	21 97       	sbiw	r28, 0x01	; 1
            return 1 ;
        }
    }
    while(r1!=0xFE);
    //开始接收数据
    while(len--)
    2f62:	c1 f7       	brne	.-16     	; 0x2f54 <SD_ReceiveData+0x3e>
    {
        *data=SPI_RW(0xFF);
        data++;
    }
    //下面是2个伪CRC（dummy CRC）
    SPI_RW(0xFF);
    2f64:	8f ef       	ldi	r24, 0xFF	; 255
    2f66:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(0xFF);
    2f6a:	8f ef       	ldi	r24, 0xFF	; 255
    2f6c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    //按需释放总线，将CS置高
    if(release==RELEASE)
    2f70:	f1 e0       	ldi	r31, 0x01	; 1
    2f72:	df 12       	cpse	r13, r31
    2f74:	06 c0       	rjmp	.+12     	; 0x2f82 <SD_ReceiveData+0x6c>
    {
        //传输结束
        SD_CS_H;
    2f76:	2a 9a       	sbi	0x05, 2	; 5
        SPI_RW(0xFF);
    2f78:	8f ef       	ldi	r24, 0xFF	; 255
    2f7a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    }
    return 0 ;
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <SD_ReceiveData+0x6e>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
}
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	ef 90       	pop	r14
    2f90:	df 90       	pop	r13
    2f92:	08 95       	ret

00002f94 <SD_ReadSingleBlock>:
* Return         : unsigned char r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
unsigned char SD_ReadSingleBlock(unsigned long sector,unsigned char*buffer)
{
    2f94:	cf 92       	push	r12
    2f96:	df 92       	push	r13
    2f98:	ef 92       	push	r14
    2f9a:	ff 92       	push	r15
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	6b 01       	movw	r12, r22
    2fa2:	7c 01       	movw	r14, r24
    2fa4:	ea 01       	movw	r28, r20
    unsigned char r1 ;
    
    //设置为高速模式
    SPI_High();
    2fa6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <SPI_High>
    
    //如果不是SDHC，将sector地址转成byte地址
    sector=sector<<9 ;
    2faa:	b7 01       	movw	r22, r14
    2fac:	a6 01       	movw	r20, r12
    2fae:	03 2e       	mov	r0, r19
    2fb0:	39 e0       	ldi	r19, 0x09	; 9
    2fb2:	44 0f       	add	r20, r20
    2fb4:	55 1f       	adc	r21, r21
    2fb6:	66 1f       	adc	r22, r22
    2fb8:	77 1f       	adc	r23, r23
    2fba:	3a 95       	dec	r19
    2fbc:	d1 f7       	brne	.-12     	; 0x2fb2 <SD_ReadSingleBlock+0x1e>
    2fbe:	30 2d       	mov	r19, r0
    
    r1=SD_SendCommand(CMD17,sector,0);
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	81 e1       	ldi	r24, 0x11	; 17
    2fc4:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <SD_SendCommand>
    //读命令
    
    if(r1!=0x00)
    2fc8:	81 11       	cpse	r24, r1
    2fca:	06 c0       	rjmp	.+12     	; 0x2fd8 <SD_ReadSingleBlock+0x44>
    {
        return r1 ;
    }
    
    r1=SD_ReceiveData(buffer,512,RELEASE);
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	72 e0       	ldi	r23, 0x02	; 2
    2fd2:	ce 01       	movw	r24, r28
    2fd4:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <SD_ReceiveData>
    }
    else 
    {
        return 0 ;
    }
}
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	ff 90       	pop	r15
    2fde:	ef 90       	pop	r14
    2fe0:	df 90       	pop	r13
    2fe2:	cf 90       	pop	r12
    2fe4:	08 95       	ret

00002fe6 <SD_ReadMultiBlock>:
* Return         : unsigned char r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
unsigned char SD_ReadMultiBlock(unsigned long sector,unsigned char *buffer,unsigned char count)
{
    2fe6:	cf 92       	push	r12
    2fe8:	df 92       	push	r13
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	6b 01       	movw	r12, r22
    2ff6:	7c 01       	movw	r14, r24
    2ff8:	8a 01       	movw	r16, r20
    2ffa:	c2 2f       	mov	r28, r18
    unsigned char r1 ;
    
    //设置为高速模式
    SPI_High();
    2ffc:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <SPI_High>
    
    //如果不是SDHC，将sector地址转成byte地址
    sector=sector<<9 ;
    3000:	b7 01       	movw	r22, r14
    3002:	a6 01       	movw	r20, r12
    3004:	03 2e       	mov	r0, r19
    3006:	39 e0       	ldi	r19, 0x09	; 9
    3008:	44 0f       	add	r20, r20
    300a:	55 1f       	adc	r21, r21
    300c:	66 1f       	adc	r22, r22
    300e:	77 1f       	adc	r23, r23
    3010:	3a 95       	dec	r19
    3012:	d1 f7       	brne	.-12     	; 0x3008 <SD_ReadMultiBlock+0x22>
    3014:	30 2d       	mov	r19, r0
    //SD_WaitReady();
    //发读多块命令
    r1=SD_SendCommand(CMD18,sector,0);
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	82 e1       	ldi	r24, 0x12	; 18
    301a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <SD_SendCommand>
    //读命令
    if(r1!=0x00)
    301e:	81 11       	cpse	r24, r1
    3020:	17 c0       	rjmp	.+46     	; 0x3050 <SD_ReadMultiBlock+0x6a>
        return r1 ;
    }
    //开始接收数据
    do 
    {
        if(SD_ReceiveData(buffer,512,NO_RELEASE)!=0x00)
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	72 e0       	ldi	r23, 0x02	; 2
    3028:	c8 01       	movw	r24, r16
    302a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <SD_ReceiveData>
    302e:	81 11       	cpse	r24, r1
    3030:	03 c0       	rjmp	.+6      	; 0x3038 <SD_ReadMultiBlock+0x52>
        {
            break ;
        }
        buffer+=512 ;
    3032:	1e 5f       	subi	r17, 0xFE	; 254
    }
    while(--count);
    3034:	c1 50       	subi	r28, 0x01	; 1
    3036:	a9 f7       	brne	.-22     	; 0x3022 <SD_ReadMultiBlock+0x3c>
    
    //全部传输完毕，发送停止命令
    SD_SendCommand(CMD12,0,0);
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	40 e0       	ldi	r20, 0x00	; 0
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	ba 01       	movw	r22, r20
    3040:	8c e0       	ldi	r24, 0x0C	; 12
    3042:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <SD_SendCommand>
    //释放总线
    SD_CS_H;
    3046:	2a 9a       	sbi	0x05, 2	; 5
    SPI_RW(0xFF);
    3048:	8f ef       	ldi	r24, 0xFF	; 255
    304a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
        return count ;
        //如果没有传完，返回剩余个数
    }
    else 
    {
        return 0 ;
    304e:	8c 2f       	mov	r24, r28
    }
}
    3050:	cf 91       	pop	r28
    3052:	1f 91       	pop	r17
    3054:	0f 91       	pop	r16
    3056:	ff 90       	pop	r15
    3058:	ef 90       	pop	r14
    305a:	df 90       	pop	r13
    305c:	cf 90       	pop	r12
    305e:	08 95       	ret

00003060 <SD_WriteSingleBlock>:
* Return         : unsigned char r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
unsigned char SD_WriteSingleBlock(unsigned long sector,const unsigned char *data)
{
    3060:	cf 92       	push	r12
    3062:	df 92       	push	r13
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	6b 01       	movw	r12, r22
    3072:	7c 01       	movw	r14, r24
    3074:	8a 01       	movw	r16, r20
    unsigned char r1 ;
    unsigned int i ;
    unsigned int retry ;
    
    //设置为高速模式
    SPI_High();
    3076:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <SPI_High>
    
    //如果不是SDHC，给定的是sector地址，将其转换成byte地址
    if(SD_Type!=SD_TYPE_V2HC)
    307a:	80 91 ae 01 	lds	r24, 0x01AE
    307e:	84 30       	cpi	r24, 0x04	; 4
    3080:	49 f0       	breq	.+18     	; 0x3094 <SD_WriteSingleBlock+0x34>
    {
        sector=sector<<9 ;
    3082:	0b 2e       	mov	r0, r27
    3084:	b9 e0       	ldi	r27, 0x09	; 9
    3086:	cc 0c       	add	r12, r12
    3088:	dd 1c       	adc	r13, r13
    308a:	ee 1c       	adc	r14, r14
    308c:	ff 1c       	adc	r15, r15
    308e:	ba 95       	dec	r27
    3090:	d1 f7       	brne	.-12     	; 0x3086 <SD_WriteSingleBlock+0x26>
    3092:	b0 2d       	mov	r27, r0
    }
    
    r1=SD_SendCommand(CMD24,sector,0x00);
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	b7 01       	movw	r22, r14
    3098:	a6 01       	movw	r20, r12
    309a:	88 e1       	ldi	r24, 0x18	; 24
    309c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <SD_SendCommand>
    if(r1!=0x00)
    30a0:	81 11       	cpse	r24, r1
    30a2:	35 c0       	rjmp	.+106    	; 0x310e <SD_WriteSingleBlock+0xae>
        return r1 ;
        //应答不正确，直接返回
    }
    
    //开始准备数据传输
    SD_CS_L;
    30a4:	2a 98       	cbi	0x05, 2	; 5
    //先放3个空数据，等待SD卡准备好
    SPI_RW(0xff);
    30a6:	8f ef       	ldi	r24, 0xFF	; 255
    30a8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(0xff);
    30ac:	8f ef       	ldi	r24, 0xFF	; 255
    30ae:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(0xff);
    30b2:	8f ef       	ldi	r24, 0xFF	; 255
    30b4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    //放起始令牌0xFE
    SPI_RW(0xFE);
    30b8:	8e ef       	ldi	r24, 0xFE	; 254
    30ba:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    30be:	e8 01       	movw	r28, r16
    30c0:	1e 5f       	subi	r17, 0xFE	; 254
    
    //放一个sector的数据
    for(i=0;i<512;i++)
    {
        SPI_RW(*data++);
    30c2:	89 91       	ld	r24, Y+
    30c4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(0xff);
    //放起始令牌0xFE
    SPI_RW(0xFE);
    
    //放一个sector的数据
    for(i=0;i<512;i++)
    30c8:	c0 17       	cp	r28, r16
    30ca:	d1 07       	cpc	r29, r17
    30cc:	d1 f7       	brne	.-12     	; 0x30c2 <SD_WriteSingleBlock+0x62>
    {
        SPI_RW(*data++);
    }
    //发2个Byte的dummy CRC
    SPI_RW(0xff);
    30ce:	8f ef       	ldi	r24, 0xFF	; 255
    30d0:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(0xff);
    30d4:	8f ef       	ldi	r24, 0xFF	; 255
    30d6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    
    //等待SD卡应答
    r1=SPI_RW(0xff);
    30da:	8f ef       	ldi	r24, 0xFF	; 255
    30dc:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    if((r1&0x1F)!=0x05)
    30e0:	98 2f       	mov	r25, r24
    30e2:	9f 71       	andi	r25, 0x1F	; 31
    30e4:	95 30       	cpi	r25, 0x05	; 5
    30e6:	39 f0       	breq	.+14     	; 0x30f6 <SD_WriteSingleBlock+0x96>
    {
        SD_CS_H;
    30e8:	2a 9a       	sbi	0x05, 2	; 5
        return r1 ;
    30ea:	11 c0       	rjmp	.+34     	; 0x310e <SD_WriteSingleBlock+0xae>
    30ec:	21 97       	sbiw	r28, 0x01	; 1
    retry=0 ;
    while(!SPI_RW(0xff))
    {
        retry++;
        //如果长时间写入没有完成，报错退出
        if(retry>0xfffe)
    30ee:	29 f4       	brne	.+10     	; 0x30fa <SD_WriteSingleBlock+0x9a>
        {
            SD_CS_H;
    30f0:	2a 9a       	sbi	0x05, 2	; 5
            return 1 ;
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	0c c0       	rjmp	.+24     	; 0x310e <SD_WriteSingleBlock+0xae>
    30f6:	cf ef       	ldi	r28, 0xFF	; 255
    30f8:	df ef       	ldi	r29, 0xFF	; 255
        return r1 ;
    }
    
    //等待操作完成
    retry=0 ;
    while(!SPI_RW(0xff))
    30fa:	8f ef       	ldi	r24, 0xFF	; 255
    30fc:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    3100:	88 23       	and	r24, r24
    3102:	a1 f3       	breq	.-24     	; 0x30ec <SD_WriteSingleBlock+0x8c>
            //写入超时返回1
        }
    }
    
    //写入完成，片选置1
    SD_CS_H;
    3104:	2a 9a       	sbi	0x05, 2	; 5
    SPI_RW(0xff);
    3106:	8f ef       	ldi	r24, 0xFF	; 255
    3108:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    
    return 0 ;
    310c:	80 e0       	ldi	r24, 0x00	; 0
}
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	df 90       	pop	r13
    311c:	cf 90       	pop	r12
    311e:	08 95       	ret

00003120 <SD_WaitReady>:
    unsigned char r1 ;
    unsigned char retry ;
    retry=0 ;
    do 
    {
        r1=SPI_RW(0xFF);
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
        if(retry==255)//如果卡异常，会死循坏！
        {
            return 1 ;
        }
    }
    while(r1!=0xFF);
    3126:	8f 3f       	cpi	r24, 0xFF	; 255
    3128:	d9 f7       	brne	.-10     	; 0x3120 <SD_WaitReady>
    
    return 0 ;
}
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	08 95       	ret

0000312e <SD_WriteMultiBlock>:
* Return         : unsigned char r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
unsigned char SD_WriteMultiBlock(unsigned long sector,const unsigned char*data,unsigned char count)
{
    312e:	8f 92       	push	r8
    3130:	9f 92       	push	r9
    3132:	af 92       	push	r10
    3134:	bf 92       	push	r11
    3136:	df 92       	push	r13
    3138:	ef 92       	push	r14
    313a:	ff 92       	push	r15
    313c:	0f 93       	push	r16
    313e:	1f 93       	push	r17
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	4b 01       	movw	r8, r22
    3146:	5c 01       	movw	r10, r24
    3148:	7a 01       	movw	r14, r20
    314a:	d2 2e       	mov	r13, r18
    unsigned char r1 ;
    unsigned int i ;
    
    //设置为高速模式
    SPI_High();
    314c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <SPI_High>
    
    //如果不是SDHC，给定的是sector地址，将其转换成byte地址
    if(SD_Type!=SD_TYPE_V2HC)
    3150:	80 91 ae 01 	lds	r24, 0x01AE
    3154:	84 30       	cpi	r24, 0x04	; 4
    3156:	59 f0       	breq	.+22     	; 0x316e <SD_WriteMultiBlock+0x40>
    {
        sector=sector<<9 ;
    3158:	07 2e       	mov	r0, r23
    315a:	79 e0       	ldi	r23, 0x09	; 9
    315c:	88 0c       	add	r8, r8
    315e:	99 1c       	adc	r9, r9
    3160:	aa 1c       	adc	r10, r10
    3162:	bb 1c       	adc	r11, r11
    3164:	7a 95       	dec	r23
    3166:	d1 f7       	brne	.-12     	; 0x315c <SD_WriteMultiBlock+0x2e>
    3168:	70 2d       	mov	r23, r0
    }
    //如果目标卡不是MMC卡，启用ACMD23指令使能预擦除
    if(SD_Type!=SD_TYPE_MMC)
    316a:	88 23       	and	r24, r24
    316c:	41 f0       	breq	.+16     	; 0x317e <SD_WriteMultiBlock+0x50>
    {
        r1=SD_SendCommand(ACMD23,count,0x00);
    316e:	4d 2d       	mov	r20, r13
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	70 e0       	ldi	r23, 0x00	; 0
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	87 e1       	ldi	r24, 0x17	; 23
    317a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <SD_SendCommand>
    }
    //发多块写入指令
    r1=SD_SendCommand(CMD25,sector,0x00);
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	b5 01       	movw	r22, r10
    3182:	a4 01       	movw	r20, r8
    3184:	89 e1       	ldi	r24, 0x19	; 25
    3186:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <SD_SendCommand>
    if(r1!=0x00)
    318a:	81 11       	cpse	r24, r1
    318c:	41 c0       	rjmp	.+130    	; 0x3210 <SD_WriteMultiBlock+0xe2>
        return r1 ;
        //应答不正确，直接返回
    }
    
    //开始准备数据传输
    SD_CS_L;
    318e:	2a 98       	cbi	0x05, 2	; 5
    //先放3个空数据，等待SD卡准备好
    SPI_RW(0xff);
    3190:	8f ef       	ldi	r24, 0xFF	; 255
    3192:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(0xff);
    3196:	8f ef       	ldi	r24, 0xFF	; 255
    3198:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    SPI_RW(0xff);
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    //--------下面是N个sector写入的循环部分
    do 
    {
        //放起始令牌0xFC 表明是多块写入
        SPI_RW(0xFC);
    31a2:	8c ef       	ldi	r24, 0xFC	; 252
    31a4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    31a8:	e7 01       	movw	r28, r14
    31aa:	8e ef       	ldi	r24, 0xFE	; 254
    31ac:	f8 1a       	sub	r15, r24
    31ae:	87 01       	movw	r16, r14
        
        //放一个sector的数据
        for(i=0;i<512;i++)
        {
            SPI_RW(*data++);
    31b0:	89 91       	ld	r24, Y+
    31b2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    {
        //放起始令牌0xFC 表明是多块写入
        SPI_RW(0xFC);
        
        //放一个sector的数据
        for(i=0;i<512;i++)
    31b6:	c0 17       	cp	r28, r16
    31b8:	d1 07       	cpc	r29, r17
    31ba:	d1 f7       	brne	.-12     	; 0x31b0 <SD_WriteMultiBlock+0x82>
        {
            SPI_RW(*data++);
        }
        //发2个Byte的dummy CRC
        SPI_RW(0xff);
    31bc:	8f ef       	ldi	r24, 0xFF	; 255
    31be:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
        SPI_RW(0xff);
    31c2:	8f ef       	ldi	r24, 0xFF	; 255
    31c4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
        
        //等待SD卡应答
        r1=SPI_RW(0xff);
    31c8:	8f ef       	ldi	r24, 0xFF	; 255
    31ca:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
        if((r1&0x1F)!=0x05)
    31ce:	98 2f       	mov	r25, r24
    31d0:	9f 71       	andi	r25, 0x1F	; 31
    31d2:	95 30       	cpi	r25, 0x05	; 5
    31d4:	11 f0       	breq	.+4      	; 0x31da <SD_WriteMultiBlock+0xac>
        {
            SD_CS_H;
    31d6:	2a 9a       	sbi	0x05, 2	; 5
            //如果应答为报错，则带错误代码直接退出
            return r1 ;
    31d8:	1b c0       	rjmp	.+54     	; 0x3210 <SD_WriteMultiBlock+0xe2>
        }
        
        //等待SD卡写入完成
        if(SD_WaitReady()==1)
    31da:	0e 94 90 18 	call	0x3120	; 0x3120 <SD_WaitReady>
    31de:	81 30       	cpi	r24, 0x01	; 1
    31e0:	11 f4       	brne	.+4      	; 0x31e6 <SD_WriteMultiBlock+0xb8>
        {
            SD_CS_H;
    31e2:	2a 9a       	sbi	0x05, 2	; 5
            //等待SD卡写入完成超时，直接退出报错
            return 1 ;
    31e4:	15 c0       	rjmp	.+42     	; 0x3210 <SD_WriteMultiBlock+0xe2>
        }
        
        //本sector数据传输完成
    }
    while(--count);
    31e6:	da 94       	dec	r13
    31e8:	d1 10       	cpse	r13, r1
    31ea:	db cf       	rjmp	.-74     	; 0x31a2 <SD_WriteMultiBlock+0x74>
    
    //发结束传输令牌0xFD
    r1=SPI_RW(0xFD);
    31ec:	8d ef       	ldi	r24, 0xFD	; 253
    31ee:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    if(r1==0x00)
    31f2:	81 11       	cpse	r24, r1
    31f4:	04 c0       	rjmp	.+8      	; 0x31fe <SD_WriteMultiBlock+0xd0>
    {
        count=0xfe ;
    31f6:	0f 2e       	mov	r0, r31
    31f8:	fe ef       	ldi	r31, 0xFE	; 254
    31fa:	df 2e       	mov	r13, r31
    31fc:	f0 2d       	mov	r31, r0
    }
    
    if(SD_WaitReady())
    31fe:	0e 94 90 18 	call	0x3120	; 0x3120 <SD_WaitReady>
    3202:	81 11       	cpse	r24, r1
    {
        while(1){}
    3204:	ff cf       	rjmp	.-2      	; 0x3204 <SD_WriteMultiBlock+0xd6>
    }
    
    //写入完成，片选置1
    SD_CS_H;
    3206:	2a 9a       	sbi	0x05, 2	; 5
    SPI_RW(0xff);
    3208:	8f ef       	ldi	r24, 0xFF	; 255
    320a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SPI_RW>
    
    return count ;
    320e:	8d 2d       	mov	r24, r13
    //返回count值，如果写完则count=0，否则count=1
}
    3210:	df 91       	pop	r29
    3212:	cf 91       	pop	r28
    3214:	1f 91       	pop	r17
    3216:	0f 91       	pop	r16
    3218:	ff 90       	pop	r15
    321a:	ef 90       	pop	r14
    321c:	df 90       	pop	r13
    321e:	bf 90       	pop	r11
    3220:	af 90       	pop	r10
    3222:	9f 90       	pop	r9
    3224:	8f 90       	pop	r8
    3226:	08 95       	ret

00003228 <SD_GetCSD>:
*                  0：NO_ERR
*                  1：TIME_OUT
*                  other：错误信息
*******************************************************************************/
unsigned char SD_GetCSD(unsigned char *csd_data)
{
    3228:	0f 93       	push	r16
    322a:	1f 93       	push	r17
    322c:	cf 93       	push	r28
    322e:	8c 01       	movw	r16, r24
    unsigned char r1 ;
    
    //发CMD9命令，读CSD
    r1=SD_SendCommand(CMD9,0,0xFF);
    3230:	2f ef       	ldi	r18, 0xFF	; 255
    3232:	40 e0       	ldi	r20, 0x00	; 0
    3234:	50 e0       	ldi	r21, 0x00	; 0
    3236:	ba 01       	movw	r22, r20
    3238:	89 e0       	ldi	r24, 0x09	; 9
    323a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <SD_SendCommand>
    323e:	c8 2f       	mov	r28, r24
    if(r1!=0x00)
    3240:	81 11       	cpse	r24, r1
    3242:	06 c0       	rjmp	.+12     	; 0x3250 <SD_GetCSD+0x28>
    {
        return r1 ;
        //没返回正确应答，则退出，报错
    }
    //接收16个字节的数据
    SD_ReceiveData(csd_data,16,RELEASE);
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	60 e1       	ldi	r22, 0x10	; 16
    3248:	70 e0       	ldi	r23, 0x00	; 0
    324a:	c8 01       	movw	r24, r16
    324c:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <SD_ReceiveData>
    
    return 0 ;
}
    3250:	8c 2f       	mov	r24, r28
    3252:	cf 91       	pop	r28
    3254:	1f 91       	pop	r17
    3256:	0f 91       	pop	r16
    3258:	08 95       	ret

0000325a <SD_GetCapacity>:
* Output         : None
* Return         : unsigned long capacity
*                   0： 取容量出错
*******************************************************************************/
unsigned long SD_GetCapacity(void)
{
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	60 97       	sbiw	r28, 0x10	; 16
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    unsigned char r1 ;
    unsigned int i ;
    unsigned int temp ;
    
    //取CSD信息，如果期间出错，返回0
    if(SD_GetCSD(csd)!=0)
    326e:	ce 01       	movw	r24, r28
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	0e 94 14 19 	call	0x3228	; 0x3228 <SD_GetCSD>
    3276:	81 11       	cpse	r24, r1
    3278:	65 c0       	rjmp	.+202    	; 0x3344 <SD_GetCapacity+0xea>
    {
        return 0 ;
    }

    //如果为SDHC卡，按照下面方式计算
    if((csd[0]&0xC0)==0x40)
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	80 7c       	andi	r24, 0xC0	; 192
    327e:	80 34       	cpi	r24, 0x40	; 64
    3280:	19 f5       	brne	.+70     	; 0x32c8 <SD_GetCapacity+0x6e>
    {
        Capacity=((((unsigned long)csd[8])<<8)+(unsigned long)csd[9]+1)*(unsigned long)1024 ;
    3282:	6a 85       	ldd	r22, Y+10	; 0x0a
    3284:	86 2f       	mov	r24, r22
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	a0 e0       	ldi	r26, 0x00	; 0
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	ac 01       	movw	r20, r24
    328e:	bd 01       	movw	r22, r26
    3290:	4f 5f       	subi	r20, 0xFF	; 255
    3292:	5f 4f       	sbci	r21, 0xFF	; 255
    3294:	6f 4f       	sbci	r22, 0xFF	; 255
    3296:	7f 4f       	sbci	r23, 0xFF	; 255
    3298:	89 85       	ldd	r24, Y+9	; 0x09
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	a0 e0       	ldi	r26, 0x00	; 0
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	ba 2f       	mov	r27, r26
    32a2:	a9 2f       	mov	r26, r25
    32a4:	98 2f       	mov	r25, r24
    32a6:	88 27       	eor	r24, r24
    32a8:	84 0f       	add	r24, r20
    32aa:	95 1f       	adc	r25, r21
    32ac:	a6 1f       	adc	r26, r22
    32ae:	b7 1f       	adc	r27, r23
    32b0:	bc 01       	movw	r22, r24
    32b2:	cd 01       	movw	r24, r26
    32b4:	05 2e       	mov	r0, r21
    32b6:	5a e0       	ldi	r21, 0x0A	; 10
    32b8:	66 0f       	add	r22, r22
    32ba:	77 1f       	adc	r23, r23
    32bc:	88 1f       	adc	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	5a 95       	dec	r21
    32c2:	d1 f7       	brne	.-12     	; 0x32b8 <SD_GetCapacity+0x5e>
    32c4:	50 2d       	mov	r21, r0
    32c6:	41 c0       	rjmp	.+130    	; 0x334a <SD_GetCapacity+0xf0>
        //
        //               READ_BL_LEN
        //	BLOCK_LEN = 2
        /**********************************************/
        //C_SIZE
        i=csd[6]&0x03 ;
    32c8:	4f 81       	ldd	r20, Y+7	; 0x07
    32ca:	43 70       	andi	r20, 0x03	; 3
    32cc:	50 e0       	ldi	r21, 0x00	; 0
        i<<=8 ;
    32ce:	54 2f       	mov	r21, r20
    32d0:	44 27       	eor	r20, r20
        i+=csd[7];
    32d2:	88 85       	ldd	r24, Y+8	; 0x08
    32d4:	48 0f       	add	r20, r24
    32d6:	51 1d       	adc	r21, r1
        i<<=2 ;
    32d8:	44 0f       	add	r20, r20
    32da:	55 1f       	adc	r21, r21
    32dc:	44 0f       	add	r20, r20
    32de:	55 1f       	adc	r21, r21
        i+=((csd[8]&0xc0)>>6);
    32e0:	a9 85       	ldd	r26, Y+9	; 0x09
    32e2:	a2 95       	swap	r26
    32e4:	a6 95       	lsr	r26
    32e6:	a6 95       	lsr	r26
    32e8:	a3 70       	andi	r26, 0x03	; 3
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	11 96       	adiw	r26, 0x01	; 1
        
        //C_SIZE_MULT
        r1=csd[9]&0x03 ;
    32ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f0:	83 70       	andi	r24, 0x03	; 3
        r1<<=1 ;
    32f2:	98 2f       	mov	r25, r24
    32f4:	99 0f       	add	r25, r25
        r1+=((csd[10]&0x80)>>7);
    32f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    32f8:	88 1f       	adc	r24, r24
    32fa:	88 27       	eor	r24, r24
    32fc:	88 1f       	adc	r24, r24
    32fe:	8e 5f       	subi	r24, 0xFE	; 254
        
        //BLOCKNR
        r1+=2 ;
    3300:	89 0f       	add	r24, r25
        temp=1 ;
        while(r1)
    3302:	39 f0       	breq	.+14     	; 0x3312 <SD_GetCapacity+0xb8>
    3304:	21 e0       	ldi	r18, 0x01	; 1
    3306:	30 e0       	ldi	r19, 0x00	; 0
        {
            temp*=2 ;
    3308:	22 0f       	add	r18, r18
    330a:	33 1f       	adc	r19, r19
            r1--;
    330c:	81 50       	subi	r24, 0x01	; 1
        r1+=((csd[10]&0x80)>>7);
        
        //BLOCKNR
        r1+=2 ;
        temp=1 ;
        while(r1)
    330e:	e1 f7       	brne	.-8      	; 0x3308 <SD_GetCapacity+0xae>
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <SD_GetCapacity+0xbc>
        r1<<=1 ;
        r1+=((csd[10]&0x80)>>7);
        
        //BLOCKNR
        r1+=2 ;
        temp=1 ;
    3312:	21 e0       	ldi	r18, 0x01	; 1
    3314:	30 e0       	ldi	r19, 0x00	; 0
        while(r1)
        {
            temp*=2 ;
            r1--;
        }
        Capacity=((unsigned long)(i+1))*((unsigned long)temp);
    3316:	a4 0f       	add	r26, r20
    3318:	b5 1f       	adc	r27, r21
    331a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__umulhisi3>
    331e:	9b 01       	movw	r18, r22
    3320:	ac 01       	movw	r20, r24
        
        // READ_BL_LEN
        i=csd[5]&0x0f ;
    3322:	8e 81       	ldd	r24, Y+6	; 0x06
    3324:	8f 70       	andi	r24, 0x0F	; 15
    3326:	90 e0       	ldi	r25, 0x00	; 0
        //BLOCK_LEN
        temp=1 ;
        while(i)
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	39 f0       	breq	.+14     	; 0x333a <SD_GetCapacity+0xe0>
    332c:	a1 e0       	ldi	r26, 0x01	; 1
    332e:	b0 e0       	ldi	r27, 0x00	; 0
        {
            temp*=2 ;
    3330:	aa 0f       	add	r26, r26
    3332:	bb 1f       	adc	r27, r27
            i--;
    3334:	01 97       	sbiw	r24, 0x01	; 1
        
        // READ_BL_LEN
        i=csd[5]&0x0f ;
        //BLOCK_LEN
        temp=1 ;
        while(i)
    3336:	e1 f7       	brne	.-8      	; 0x3330 <SD_GetCapacity+0xd6>
    3338:	02 c0       	rjmp	.+4      	; 0x333e <SD_GetCapacity+0xe4>
        Capacity=((unsigned long)(i+1))*((unsigned long)temp);
        
        // READ_BL_LEN
        i=csd[5]&0x0f ;
        //BLOCK_LEN
        temp=1 ;
    333a:	a1 e0       	ldi	r26, 0x01	; 1
    333c:	b0 e0       	ldi	r27, 0x00	; 0
        {
            temp*=2 ;
            i--;
        }
        //The final result
        Capacity*=(unsigned long)temp ;
    333e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__muluhisi3>
    3342:	03 c0       	rjmp	.+6      	; 0x334a <SD_GetCapacity+0xf0>
    unsigned int temp ;
    
    //取CSD信息，如果期间出错，返回0
    if(SD_GetCSD(csd)!=0)
    {
        return 0 ;
    3344:	60 e0       	ldi	r22, 0x00	; 0
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	cb 01       	movw	r24, r22
        //The final result
        Capacity*=(unsigned long)temp ;
        //Capacity /= 512;
    }
    return (unsigned long)Capacity ;
}
    334a:	60 96       	adiw	r28, 0x10	; 16
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	08 95       	ret

0000335c <Serial_Init>:

/*
    串口初始化程序    
*/
void Serial_Init(unsigned long BAUD)
{	
    335c:	9b 01       	movw	r18, r22
    335e:	ac 01       	movw	r20, r24
	/*    设置波特率    */
	UBRR0L= (unsigned char)((F_CPU/BAUD/16)-1)%256;
    3360:	60 e4       	ldi	r22, 0x40	; 64
    3362:	72 e4       	ldi	r23, 0x42	; 66
    3364:	8f e0       	ldi	r24, 0x0F	; 15
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__udivmodsi4>
    336c:	21 50       	subi	r18, 0x01	; 1
    336e:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H= (unsigned char)((F_CPU/BAUD/16)-1)/256;
    3372:	10 92 c5 00 	sts	0x00C5, r1
	/*    使能接收中断，使能接收器与发送器    */
	UCSR0B=(1<<RXEN0)|(1<<TXEN0);
    3376:	88 e1       	ldi	r24, 0x18	; 24
    3378:	80 93 c1 00 	sts	0x00C1, r24
	/*    设置帧格式 ：  8个数据位，1个停止位    */
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);	
    337c:	86 e0       	ldi	r24, 0x06	; 6
    337e:	80 93 c2 00 	sts	0x00C2, r24
    3382:	08 95       	ret

00003384 <Serial_Send>:
}

void Serial_Send(unsigned char data)
{
	/* 等待发送缓冲器为空 */
	while ( !( UCSR0A & (1<<UDRE0)) )
    3384:	e0 ec       	ldi	r30, 0xC0	; 192
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	90 81       	ld	r25, Z
    338a:	95 ff       	sbrs	r25, 5
    338c:	fd cf       	rjmp	.-6      	; 0x3388 <Serial_Send+0x4>
	;
	/* 将数据放入缓冲器，发送数据 */
	UDR0 = data;
    338e:	80 93 c6 00 	sts	0x00C6, r24
    3392:	08 95       	ret

00003394 <Serial_SendString>:
}

void Serial_SendString(char *s)
{
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	ec 01       	movw	r28, r24
	while(*s)
    339a:	88 81       	ld	r24, Y
    339c:	88 23       	and	r24, r24
    339e:	31 f0       	breq	.+12     	; 0x33ac <Serial_SendString+0x18>
    33a0:	21 96       	adiw	r28, 0x01	; 1
	{
		Serial_Send(*s);
    33a2:	0e 94 c2 19 	call	0x3384	; 0x3384 <Serial_Send>
	UDR0 = data;
}

void Serial_SendString(char *s)
{
	while(*s)
    33a6:	89 91       	ld	r24, Y+
    33a8:	81 11       	cpse	r24, r1
    33aa:	fb cf       	rjmp	.-10     	; 0x33a2 <Serial_SendString+0xe>
	{
		Serial_Send(*s);
		s++;
	}
    33ac:	df 91       	pop	r29
    33ae:	cf 91       	pop	r28
    33b0:	08 95       	ret

000033b2 <__udivmodsi4>:
    33b2:	a1 e2       	ldi	r26, 0x21	; 33
    33b4:	1a 2e       	mov	r1, r26
    33b6:	aa 1b       	sub	r26, r26
    33b8:	bb 1b       	sub	r27, r27
    33ba:	fd 01       	movw	r30, r26
    33bc:	0d c0       	rjmp	.+26     	; 0x33d8 <__udivmodsi4_ep>

000033be <__udivmodsi4_loop>:
    33be:	aa 1f       	adc	r26, r26
    33c0:	bb 1f       	adc	r27, r27
    33c2:	ee 1f       	adc	r30, r30
    33c4:	ff 1f       	adc	r31, r31
    33c6:	a2 17       	cp	r26, r18
    33c8:	b3 07       	cpc	r27, r19
    33ca:	e4 07       	cpc	r30, r20
    33cc:	f5 07       	cpc	r31, r21
    33ce:	20 f0       	brcs	.+8      	; 0x33d8 <__udivmodsi4_ep>
    33d0:	a2 1b       	sub	r26, r18
    33d2:	b3 0b       	sbc	r27, r19
    33d4:	e4 0b       	sbc	r30, r20
    33d6:	f5 0b       	sbc	r31, r21

000033d8 <__udivmodsi4_ep>:
    33d8:	66 1f       	adc	r22, r22
    33da:	77 1f       	adc	r23, r23
    33dc:	88 1f       	adc	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	1a 94       	dec	r1
    33e2:	69 f7       	brne	.-38     	; 0x33be <__udivmodsi4_loop>
    33e4:	60 95       	com	r22
    33e6:	70 95       	com	r23
    33e8:	80 95       	com	r24
    33ea:	90 95       	com	r25
    33ec:	9b 01       	movw	r18, r22
    33ee:	ac 01       	movw	r20, r24
    33f0:	bd 01       	movw	r22, r26
    33f2:	cf 01       	movw	r24, r30
    33f4:	08 95       	ret

000033f6 <__umulhisi3>:
    33f6:	a2 9f       	mul	r26, r18
    33f8:	b0 01       	movw	r22, r0
    33fa:	b3 9f       	mul	r27, r19
    33fc:	c0 01       	movw	r24, r0
    33fe:	a3 9f       	mul	r26, r19
    3400:	70 0d       	add	r23, r0
    3402:	81 1d       	adc	r24, r1
    3404:	11 24       	eor	r1, r1
    3406:	91 1d       	adc	r25, r1
    3408:	b2 9f       	mul	r27, r18
    340a:	70 0d       	add	r23, r0
    340c:	81 1d       	adc	r24, r1
    340e:	11 24       	eor	r1, r1
    3410:	91 1d       	adc	r25, r1
    3412:	08 95       	ret

00003414 <__muluhisi3>:
    3414:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__umulhisi3>
    3418:	a5 9f       	mul	r26, r21
    341a:	90 0d       	add	r25, r0
    341c:	b4 9f       	mul	r27, r20
    341e:	90 0d       	add	r25, r0
    3420:	a4 9f       	mul	r26, r20
    3422:	80 0d       	add	r24, r0
    3424:	91 1d       	adc	r25, r1
    3426:	11 24       	eor	r1, r1
    3428:	08 95       	ret

0000342a <_exit>:
    342a:	f8 94       	cli

0000342c <__stop_program>:
    342c:	ff cf       	rjmp	.-2      	; 0x342c <__stop_program>
